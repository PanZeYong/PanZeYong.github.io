<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PANJU&#39;s Note</title>
  <subtitle>故不积跬步，无以至千里；不积小流，无以成江海。</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://panzeyong.github.io/"/>
  <updated>2017-03-26T15:00:27.000Z</updated>
  <id>https://panzeyong.github.io/</id>
  
  <author>
    <name>PANJU</name>
    <email>04120513panzeyong@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一章 Activity 的生命周期和启动模式</title>
    <link href="https://panzeyong.github.io/2017/03/26/%E7%AC%AC%E4%B8%80%E7%AB%A0-Activity-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://panzeyong.github.io/2017/03/26/第一章-Activity-的生命周期和启动模式/</id>
    <published>2017-03-26T08:41:15.000Z</published>
    <updated>2017-03-26T15:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p>
<h3 id="Activity-正常情况下生命周期"><a href="#Activity-正常情况下生命周期" class="headerlink" title="Activity 正常情况下生命周期"></a>Activity 正常情况下生命周期</h3><p><img src="/images/explore/activity_lifecycle.png" alt=""></p>
<ul>
<li><p>生命周期方法分析</p>
<ul>
<li><p>onCreate()：Activity 创建时调用，可以做一些初始化工作。</p>
</li>
<li><p>onRestart()：Activity 正在重新启动，由不可见状态变为可见状态。</p>
</li>
<li><p>onStart()：Activity 正在被启动，这时已经处于可见状态，但是还没出现在前台，而是在后台，无法与用户交互。</p>
</li>
<li><p>onResume()：Activity 已经处于可见状态，并且出现在前台。</p>
</li>
<li><p>onPause()：Activity 暂停，位于后台，可以做一些存储数据、停止动画等工作，但是不能太耗时。</p>
</li>
<li><p>onStop()：Activity 停止，不可见状态，可以做一些资源回收工作，但不能太耗时。</p>
</li>
<li><p>onDestroy()：Activity 销毁，可以做一些回收工作和资源释放。</p>
</li>
</ul>
</li>
<li><p>Activity 生命周期方法不同情况下调用</p>
<ul>
<li><p>Activity 第一次启动：onCreate() —&gt; onStart() —&gt; onResume()。</p>
</li>
<li><p>打开新的 Activity 或者切换到桌面：onPause() —&gt; onStop()。</p>
</li>
<li><p>回到原来 Activity：onRestart() —&gt; onStart() —&gt; onResume()。</p>
</li>
<li><p>按 back 键：onPause() —&gt; onStop() —&gt; onDestroy()。</p>
</li>
</ul>
</li>
<li><p>注意（提示、问题）</p>
<ul>
<li><p>onCreate() 与 onDestroy() 是配对的，表示 Activity 的创建和销毁,并且只有可能一次调用。</p>
</li>
<li><p>onStart() 与 onStop() 是配对的，从是否可见这个角度来回调。</p>
</li>
<li><p>onResume() 与 onPause() 是配对的，从是否位于前台这个角度来回调。</p>
</li>
<li><p>如果新 Activity 采用了透明主题，那么当前 Activity 不会回到 onStop()（原因：处于可见状态，但是失去焦点，无法与用户进行交互）。</p>
</li>
<li><p>假设当前 Activity A，用户打开新的 Activity B，此时 A 的 onPause() 先调用，再调用 B 的 onResume()。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="Activity异常情况下生命周期"><a href="#Activity异常情况下生命周期" class="headerlink" title="Activity异常情况下生命周期"></a>Activity异常情况下生命周期</h3><ul>
<li><p>系统配置发生改变导致 Activity 被杀死并重新创建</p>
<ul>
<li><p>系统配置文件发生改变时，Activity 会被重新创建，生命周期方法调用顺序 onPause() —&gt; onSaveInstanceState() —&gt; onStop() —&gt; onDestroy() —&gt; onCreate() —&gt; onStart() —&gt; onRestoreInstanceState() —&gt; onResume()。</p>
</li>
<li><p>Activity 被异常终止情况下，onSaveInstanceState() 方法才会被调用，正常情况下是不会的；该方法调用时机是在 onStop() 之前，至于在 onPause() 之前或者之后并不确定。</p>
</li>
<li><p>Activity 被异常终止情况下，Activity 会被重建，此时 onRestoreInstanceState() 会被调用，调用时机在 onStart() 之后。</p>
</li>
<li><p>onCreate() 与 onRestoreInstanceState() 区别：onRestoreInstanceState() 一旦被调用，其参数  savedInstanceState 一定是有值的，不用判断是否为空；但 onCreate() 不一样，如果是正常启动时，其参数 savedInstanceState 为 null，所以需要额外判空。</p>
</li>
<li><p>可以通过设置<code>android:configChanges</code>属性让屏幕旋转时不重新创建。</p>
</li>
</ul>
</li>
<li><p>资源内存不足导致低优先级的 Activity 被杀死</p>
<ul>
<li><p>前台 Activity：正在和用户交互的 Activity，优先级最高。</p>
</li>
<li><p>可见但非前台 Activity：可见但是位于后台无法与用户进行交互，优先级次之。</p>
</li>
<li><p>后台 Activity：优先级最低。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="Activity四种启动模式"><a href="#Activity四种启动模式" class="headerlink" title="Activity四种启动模式"></a>Activity四种启动模式</h3><ul>
<li><p>启动模式</p>
<ul>
<li><p>standard：标准模式，这也是系统默认模式。每当启动一个 Activity 创建一个实例，谁启动谁就在谁任务栈。</p>
</li>
<li><p>singleTop：栈顶复用模式。如果新 Activity 已经位于任务栈栈顶，那么此 Activity 不会被创建，同时 onNewIntent() 方法被调用，随后 onResume() 方法也被调用；反之则会重新创建 Activity。</p>
</li>
<li><p>singleTask：栈内复用模式，这是一种实例模式。</p>
<p><img src="/images/explore/singTask.png" alt=""></p>
</li>
<li><p>singleInstance：单实例模式，singleTask 加强版。Activity 启动时，系统会单独为其创建任务栈，然后此 Activity 就在这个任务栈中，后续跟 singleTask 相同。</p>
</li>
</ul>
</li>
<li><p>Activity 的 Flags</p>
<ul>
<li><p>FLAG_ACTIVITY_NEW_TASK：为 Activity 指定 singleTask 启动模式。</p>
</li>
<li><p>FLAG_ACTIVITY_SINGLE_TOP：为 Activity 指定 singleTop 启动模式。</p>
</li>
<li><p>FLAG_ACTIVITY_CLEAR_TOP：与 singleTask 启动模式异同出现，作用相同。</p>
</li>
<li><p>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：具有该标记的 Activity 不会出现在历史 Activity 列表中。</p>
</li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><p>TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用才起作用，其它情况下没用。</p>
</li>
<li><p>TaskAffinity 与 singleTask 启动模式配对使用时，此时 Activity 运行 TaskAffinity 属性所指定的任务栈。</p>
</li>
<li><p>TaskAffinity 与 allowTaskReparenting 配对使用时，情况比较复杂，会产生特殊效果。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="IntentFilter-匹配规则"><a href="#IntentFilter-匹配规则" class="headerlink" title="IntentFilter 匹配规则"></a>IntentFilter 匹配规则</h3><ul>
<li><p>action 的匹配规则</p>
<ul>
<li><p>匹配规则：Intent 中的 action 必须能够和过滤规则中的任何一个action 匹配。</p>
</li>
<li><p>区分大小写。</p>
</li>
<li><p>注意与 category 匹配规则不一样。</p>
</li>
</ul>
</li>
<li><p>category 的匹配规则</p>
<ul>
<li><p>匹配规则：Intent 所包含的 category 必须与过滤规则中的任何一个 category 相同（可理解为一对一关系）。</p>
</li>
<li><p>特殊情况是 Intent 可以没有 category，但是系统默认会加上<code>android.intent.category.DEFAULT</code>，这也是隐式调用所要求的。</p>
</li>
</ul>
</li>
<li><p>data 匹配规则</p>
<ul>
<li><p>data 的结构</p>
<ul>
<li><p>android:scheme：URI 模式，比如 http、file、content 等。</p>
</li>
<li><p>android:port：URI 中的端口号，需要指定 scheme 和 host 才有作用。</p>
</li>
<li><p>android:host：URI 主机名。</p>
</li>
<li><p>android:path：完整的路径。</p>
</li>
<li><p>android:pathPattern：完整的路径信息，也可以包含通配符 *。</p>
</li>
<li><p>android:pathPrefix：路径的前缀信息。</p>
</li>
<li><p>android:mimeType：媒体类型。</p>
</li>
</ul>
</li>
<li><p>匹配规则：Intent 包含的 data 数据必须与过滤规则中某一个匹配（Intent 是过滤规则的子集），与 action 类似。</p>
</li>
<li><p>过滤规则有默认URI值：content 和 file。</p>
</li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><p>判断是否能匹配隐式 Intent 方法</p>
<ul>
<li><p>调用 PackageManager 的 resolveActivity 方法。</p>
</li>
<li><p>Intent 的 resolveActivity 方法。</p>
</li>
</ul>
</li>
<li><p>PackageManager 中 queryIntentActivies 方法。    </p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;Activity-正常情况下生命周期&quot;&gt;&lt;a href=&quot;#Activity-正常情况下生命周期&quot; class=&quot;headerlink&quot; title=&quot;Activity 正常情况下生命周期&quot;&gt;&lt;/a&gt;Activity 正常情况下生命周期&lt;/
    
    </summary>
    
      <category term="《Android 开发艺术探索》学习笔记" scheme="https://panzeyong.github.io/categories/%E3%80%8AAndroid-%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://panzeyong.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
