<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PANJU&#39;s Note</title>
  <subtitle>故不积跬步，无以至千里；不积小流，无以成江海。</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://panzeyong.com/"/>
  <updated>2019-11-23T09:29:09.852Z</updated>
  <id>http://panzeyong.com/</id>
  
  <author>
    <name>PANJU</name>
    <email>04120513panzeyong@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript 之原型及原型链</title>
    <link href="http://panzeyong.com/2019/11/19/Javascript-%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://panzeyong.com/2019/11/19/Javascript-之原型及原型链/</id>
    <published>2019-11-18T23:53:16.000Z</published>
    <updated>2019-11-23T09:29:09.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Javascript 函数有一个 <code>prototype</code> 属性，该属性是一个指针，指向一个对象，该对象包含特定类型的所有实例共享的属性和方法，称为实例对象的<strong>原型对象</strong>。</p>
<p>简单来说，在 JavaScript 中创建一个新函数，就会自动获取 <code>prototype</code> 属性，通过 <code>new</code> 命令创建实例对象，实例对象会获取 <code>prototype</code> 属性所指向的原型对象的属性和方法。打个比方，在 Java 中有类和继承的概念，<code>prototype</code> 所指向的原型对象就好比 Java 中的基类，而新函数好比是 Java 中的新类，继承基类中的属性和方法，那么创建实例后，除了能访问到本身的属性和方法外，还能访问到基类中的属性和方法。</p>
<h1 id="构造函数与原型对象之间的关系"><a href="#构造函数与原型对象之间的关系" class="headerlink" title="构造函数与原型对象之间的关系"></a>构造函数与原型对象之间的关系</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</div><div class="line">person.age = <span class="number">12</span>;</div><div class="line"><span class="built_in">console</span>.log(person.age);    <span class="comment">// 12</span></div></pre></td></tr></table></figure>
<p>以上例子，Person 是一个构造函数，通过 <code>new</code> 命令实例化对象。通过构造函数实例化对象的方式，如果多个实例对象都拥有属性 <code>age</code> 时，则需要在每个实例对象本身设置该属性，这样的操作显得有点冗余。那么有没有一种方式可以把属性 <code>age</code> 设置为公有，实例化对象时就自动拥有公共的属性呢，而对于实例对象本身只需要添加自己需要的属性即可。答案是有的。</p>
<p>这里就需要引出 <code>prototype</code> 属性，那么 <code>prototype</code> 属性是什么呢？除了<strong>bind 函数</strong>、<strong>箭头函数</strong>以及 <strong>Function.prototype</strong> 外，每个函数都有一个属性 <strong>prototype</strong>，该属性是一个指针，指向一个对象，该对象是函数的<strong>原型对象</strong>，原型对象包含了公共的属性和方法，实例化的所有对象都共享原型对象的属性和方法。<em>需要注意的是 <em>*<code>prototype</code> 属性是函数才拥有的。</em></em> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Person.prototype.age = <span class="number">12</span>;</div><div class="line">Person.prototype.name = <span class="string">"Jack"</span>;</div><div class="line"></div><div class="line">Person.prototype.say = () =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello World !"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person1.age);    <span class="comment">// 12</span></div><div class="line"><span class="built_in">console</span>.log(person1.name);   <span class="comment">// Jack</span></div><div class="line"><span class="built_in">console</span>.log(person2.age);    <span class="comment">// 12</span></div><div class="line"><span class="built_in">console</span>.log(person2.name);   <span class="comment">// Jack</span></div><div class="line"><span class="built_in">console</span>.log(person1.say());  <span class="comment">// Hello World</span></div><div class="line"><span class="built_in">console</span>.log(person2.say());  <span class="comment">// Hello World</span></div><div class="line"></div><div class="line">person1.job = <span class="string">"test"</span>;</div><div class="line"><span class="built_in">console</span>.log(person1.job);    <span class="comment">// test</span></div><div class="line"><span class="built_in">console</span>.log(person2.job);    <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>从以上例子可以得知，通过 <code>prototype</code> 属性添加 <code>age</code> 和 <code>name</code> 属性，然后实例化两个对象，分别打印出两个属性是有值的，说明实例对象拥有了原型对象的属性和方法。</p>
<p>现在我们已经知道构造函数与原型对象的单向关系，即构造函数通过 <code>prototype</code> 属性指向原型对象。那么原型对象能反过来通过某种方式指向原先的构造函数吗？答案是可以的，这时就需要 <code>constructor</code> 派上场了。</p>
<p>每个原型对象都会有一个 <code>constructor</code> 属性，而 <code>constructor</code> 属性包含一个指向 <code>prototype</code> 属性所在函数的指针。以上面例子为例，即</p>
<p><code>Person.prototype.constructor === Person</code>（<code>true</code>）。</p>
<p>至此，我们理清了构造函数与原型对象之间的关系，关系图如下：</p>
<p><img src="/images/javascript/prototype/constructor_prototype_object_relation.png" alt=""></p>
<h1 id="实例对象与原型对象之间的关系"><a href="#实例对象与原型对象之间的关系" class="headerlink" title="实例对象与原型对象之间的关系"></a>实例对象与原型对象之间的关系</h1><p>当读取实例对象属性时，首先会在实例对象本身查找该属性是否存在，不存在的话，就会往实例对象与之关联的原型对象查找，再查找不到时，直向原型的原型查找，查找到最上层为止。</p>
<p>例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">"Jack"</span>;</div><div class="line">Person.prototype.desc = <span class="string">"desc"</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person.name);    <span class="comment">// Jack</span></div></pre></td></tr></table></figure>
<p>可见，实例对象 <code>person</code> 本身没有属性 <code>name</code>，但是还能查找到该属性，这是通过原型对象找到的。那么实例对象是通过什么方式与原型对象关联呢？其实实例对象有一个属性 <code>__proto__</code>，指向原型对象，即 </p>
<p><code>person.__proto__ === Person.prototype</code>（<code>true</code>）。</p>
<p><img src="/images/javascript/prototype/proto_to_prototype.png" alt=""></p>
<h1 id="原型对象的原型对象"><a href="#原型对象的原型对象" class="headerlink" title="原型对象的原型对象"></a>原型对象的原型对象</h1><p>从上面我们已经理清了构造函数与原型对象、实例对象与原型对象之间的关系，那么我们会不会产生一个疑惑：原型对象的原型对象是什么，即 <code>Person.prototype</code> 的原型对象是什么？</p>
<p>JavaScript 中的所有对象都来自 <code>Object</code>，并且所有对象都从 <code>Object.prototype</code> 继承属性和方法，尽管它们可能被覆盖。因此可以推出：</p>
<p><code>Person.prototype.__proto__ === Object.prototype</code>（<strong>true</strong>）。</p>
<p><img src="/images/javascript/prototype/object_prototype.png" alt=""></p>
<p>图中画虚线的表示通过 <code>__prototype__</code> 形成原型链；至此，已经把原型对象及原型链的知识讲完。最后放一张网上对原型的理解画得比较全面的关系图，如下：</p>
<p><img src="/images/javascript/prototype/prototype_all.png" alt=""></p>
<p>注：以上只是自己整理的学习笔记，由于水平有限难免有错误，欢迎指出。随着自己对原型的深入理解，笔记也会做相应的修改，最后放上资料参考来源。</p>
<ul>
<li><p><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="external">https://github.com/mqyqingfeng/Blog/issues/2</a></p>
</li>
<li><p>《JavaScript 高级程序设计》（第 3 版）</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Javascript 函数有一个 &lt;code&gt;prototype&lt;/code&gt; 属性，该属性是一个指针，指向一个对象，该对象包含特定类型的所
    
    </summary>
    
      <category term="JavaScript" scheme="http://panzeyong.com/categories/JavaScript/"/>
    
    
      <category term="知识点整理" scheme="http://panzeyong.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 源码目录结构</title>
    <link href="http://panzeyong.com/2018/12/19/Vue-js-%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://panzeyong.com/2018/12/19/Vue-js-源码目录结构/</id>
    <published>2018-12-19T14:33:04.000Z</published>
    <updated>2020-08-29T08:23:35.144Z</updated>
    
    <content type="html"><![CDATA[<p>今年 4 月份开始使用 Vue.js，到现在差不多有 8 个月了，参与了两三个项目，对 Vue.js 的用法有了一定的了解。但是我觉得会使用是学习框架的第一步，第二步是研究框架是怎么实现的，学习其设计思想。所以给自己制定了计划来学习 Vue.js 框架源码，打算把自己学习到的知识作为一个系列记录下来。</p>
<p>在学习源码之前，先来学习下 Vue.js 目录结构设计，从整体上了解 Vue.js 的结构。</p>
<p>注：Vue.js 的版本为 2.6.11</p>
<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><ul>
<li><p><code>.circleci</code>：Vue.js 使用了持续集成工具 CircleCI，要在项目中使用该工具，需要在项目根目录创建文件夹 <code>.circleci</code>，并在其目录下创建文件 <code>config.yml</code> 编写构建脚本。</p>
<ul>
<li><code>config.yml</code>：编写 CircleCI 构建脚本。</li>
</ul>
</li>
<li><p><code>.github</code>：项目相关说明文档，比如开发者参与项目的规则、要求之类的。</p>
<p>  <code>CODE_OF_CONDUCT.md</code>：贡献代码的行为准则。</p>
<p>  <code>COMMIT_CONVENTION.md</code>：git 提交代码时添加提交信息的约定。</p>
<p>  <code>CONTRIBUTING.md</code>：参与项目指南。</p>
<p>  <code>ISSUE_TEMPLATE.md</code>：提交 issue 的模板。</p>
<p>  <code>PULL_REQUEST_TEMPLATE.md</code>：拉取代码指南。</p>
</li>
<li><p><code>benchmarks</code>：性能测试相关文件。</p>
</li>
<li><p><code>dist</code>：包含不同分发版本的构建文件。要注意的是，这个目录只有在发布新版本时才会更新，开发分支更新的新特性不会影响到该目录。</p>
</li>
<li><p><code>example</code>：官方提供的示例。</p>
</li>
<li><p><code>flow</code>：包含使用Flow（静态类型检查工具）声明的类型，供全局使用。</p>
<ul>
<li><p><code>compiler.js</code>：编译相关。</p>
</li>
<li><p><code>component.js</code>：组件数据结构。</p>
</li>
<li><p><code>global-api.js</code>：Global API 结构。</p>
</li>
<li><p><code>modules.js</code>：第三方库定义。</p>
</li>
<li><p><code>options.js</code>：选项相关。</p>
</li>
<li><p><code>ssr.js</code>：服务端渲染相关。</p>
</li>
<li><p><code>vnode.js</code>：虚拟 node 相关。</p>
</li>
<li><p><code>weex.js</code>：weex 平台相关。</p>
</li>
</ul>
</li>
<li><p><code>packages</code>：包含服务端渲染和模板编译器两种不同 NPM 包，供不同场景使用。</p>
<ul>
<li><p><code>vue-server-render</code>：服务端渲染。</p>
</li>
<li><p><code>vue-template-compiler</code>：vue 模板编译器。</p>
</li>
<li><p><code>weex-template-compiler</code>：weex 模板编译器。</p>
</li>
<li><p><code>weex-vue-framework</code>：weex vue 框架。</p>
</li>
</ul>
</li>
<li><p><code>scripts</code>：包含构建相关脚本和配置文件，大多数情况下不需要关注该目录。</p>
<ul>
<li><p><code>alias.js</code>：所有源代码和测试中使用的模块导入别名。</p>
</li>
<li><p><code>config</code>：包含 <code>dist</code> 目录下所有文件的配置信息。</p>
</li>
</ul>
</li>
<li><p><code>src</code>：vue.js 源代码，代码用 ES6 实现的并采用 JavaScript 静态类型检查工具。</p>
<ul>
<li><p><code>compiler</code>：该目录包含 Vue.js 编译的相关代码，包括将模板字符串解析成 AST 语法树的<strong>解析器</strong>、检测用于 vdom 渲染优化的静态树的<strong>优化器</strong>和将 AST 语法树生成渲染函数的<strong>代码生成器</strong>。</p>
</li>
<li><p><code>core</code>：Vue.js 核心代码，包含通用、跨平台的代码。主要有观察者、虚拟 dom、vue 实例化、全局 api 和内置组件。</p>
</li>
<li><p><code>server</code>：包含与服务端渲染相关的代码。</p>
</li>
<li><p><code>platform</code>：Vue.js 是一个跨平台的 MVVM 框架，可以在 web 上运行，也可以配合 weex 在 native 客户端上运行。每个平台都有一个入口，都位于该目录下。</p>
</li>
<li><p><code>sfc</code>：包含将 .vue 单文件解析为 JavaScript 对象的代码，用于 <code>vue-template-compiler</code> 包。</p>
</li>
<li><p><code>shared</code>：包含通用的工具方法，用于浏览器端的 vue.js 和服务器端的 vue.js。</p>
</li>
</ul>
</li>
<li><p><code>tests</code>：所有测试代码，单元测试代码是用 <a href="https://jasmine.github.io/2.3/introduction.html" target="_blank" rel="external">Jasmine</a> 实现并与 <a href="http://karma-runner.github.io/0.13/index.html" target="_blank" rel="external">Karma</a> 一起运行。e2e 测试是为 <a href="http://nightwatchjs.org/" target="_blank" rel="external">Nightwatch.js</a> 编写并与之一起运行。</p>
</li>
<li><p><code>types</code>：使用 TypeScript 类型注释，并且包含了测试代码。</p>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#project-structure" target="_blank" rel="external">https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#project-structure</a></p>
<p><a href="https://ustbhuangyi.github.io/vue-analysis/prepare/directory.html#compiler" target="_blank" rel="external">https://ustbhuangyi.github.io/vue-analysis/prepare/directory.html#compiler</a></p>
<p><a href="https://segmentfault.com/a/1190000016426470" target="_blank" rel="external">https://segmentfault.com/a/1190000016426470</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年 4 月份开始使用 Vue.js，到现在差不多有 8 个月了，参与了两三个项目，对 Vue.js 的用法有了一定的了解。但是我觉得会使用是学习框架的第一步，第二步是研究框架是怎么实现的，学习其设计思想。所以给自己制定了计划来学习 Vue.js 框架源码，打算把自己学习到
    
    </summary>
    
      <category term="Vue.js" scheme="http://panzeyong.com/categories/Vue-js/"/>
    
    
      <category term="Vue.js 源码解析" scheme="http://panzeyong.com/tags/Vue-js-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 静态类型检查工具：Flow</title>
    <link href="http://panzeyong.com/2018/12/04/JavaScript-%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7%EF%BC%9AFlow/"/>
    <id>http://panzeyong.com/2018/12/04/JavaScript-静态类型检查工具：Flow/</id>
    <published>2018-12-04T15:01:32.000Z</published>
    <updated>2018-12-11T15:01:24.234Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://flow.org/en/" target="_blank" rel="external">Flow</a> 是 Facebook 开源的 JavaScript 静态类型检查工具，它可以帮助提高我们的工作效率，使我们的代码更快、更智能、更自信和更大规模。</p>
<p>在学习 Flow 的用法之前，我们先来学习如何在项目中使用 Flow。</p>
<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h3 id="1、安装编译器"><a href="#1、安装编译器" class="headerlink" title="1、安装编译器"></a>1、安装编译器</h3><p>在 Flow 官方文档可以了解到，安装 Flow 的方式多种，主要取决于项目使用什么工具。Flow 可以通过包管理器来安装，即 npm 或 yarn，而在安装 Flow 时，需要设置编译器，有两种编译器：Babel 和 flow-remove-types，所以总共有 4 种安装方式。这里包管理器为 npm 和 编译器为 Babel 为例子来说。</p>
<ul>
<li><p>设置编译器</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-cli babel-preset-flow</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>在项目根目录创建 <code>.babelrc</code> 文件，并添加以下代码</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attr">"presets"</span>: [<span class="string">"flow"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>如果所有源文件都存储在 <code>src</code> 目录下，那么可以通过运行以下命令，把它们编译到另外一个目录</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/babel src/ -d lib/</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>在 <code>package.json</code> 文件 <code>script</code> 添加代码</p>
  <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	&#123;</div><div class="line">	<span class="attr">"name"</span>: <span class="string">"my-project"</span>,</div><div class="line">	<span class="attr">"main"</span>: <span class="string">"lib/index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">  		<span class="attr">"build"</span>: <span class="string">"babel src/ -d lib/"</span>,</div><div class="line">    	<span class="attr">"prepublish"</span>: <span class="string">"npm run build"</span></div><div class="line">  	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2、安装-Flow"><a href="#2、安装-Flow" class="headerlink" title="2、安装 Flow"></a>2、安装 Flow</h3><ul>
<li><p>安装 flow-bin</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">	npm install --save-dev flow-bin</div><div class="line">	``` </div><div class="line">	</div><div class="line">- 在 `package.json` 文件 `script` 添加 Flow</div><div class="line"></div><div class="line">	```json</div><div class="line">	&#123;</div><div class="line">  &quot;name&quot;: &quot;my-flow-project&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    	&quot;flow-bin&quot;: &quot;^0.87.0&quot;</div><div class="line">  	 &#125;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    	&quot;flow&quot;: &quot;flow&quot;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>初始化 Flow，会生成文件 <code>.flowconfig</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run flow init</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>运行 Flow</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run flow</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="二、Flow-的工作方式"><a href="#二、Flow-的工作方式" class="headerlink" title="二、Flow 的工作方式"></a>二、Flow 的工作方式</h1><p>Flow 类型检查有两种方式：</p>
<ul>
<li><p>类型推断：结合变量的上下文语境推断出变量的数据类型，然后根据推断出的数据类型进行类型检查。</p>
</li>
<li><p>类型注释：在定义变量时声明其数据类型，Flow 会基于声明的数据类型作出判断。</p>
</li>
</ul>
<h3 id="1、类型推断"><a href="#1、类型推断" class="headerlink" title="1、类型推断"></a>1、类型推断</h3><p>类型推断这种类型检查方式对于开发者来说工作量几乎为零，基本不需要对代码作任何改造，Flow 会根据变量的上下文推断出类型，进而作出判断。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @flow</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> n * n; </div><div class="line">&#125;</div><div class="line"></div><div class="line">square(<span class="string">"2"</span>);    <span class="comment">// Error</span></div></pre></td></tr></table></figure>
<p>Flow 检查上述代码会报错，因为函数 square 期待输入的参数是整型，而我们输入的是字符串。</p>
<h3 id="2、类型注释"><a href="#2、类型注释" class="headerlink" title="2、类型注释"></a>2、类型注释</h3><p>在某些场景下，通过类型推断是检查不出类型错误的，这时就需要通过其它方式来检查类型，也就是这部分要说的类型注释。类型注释是说在定义变量时声明其数据类型，有点类似静态语言，比如 Java，Flow 会基于此作出判断。</p>
<p>先来看一个通过类型推断检查不出错误的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*@flow*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="string">'Hello'</span>, <span class="number">222</span>)</div></pre></td></tr></table></figure>
<p>以上代码，从语法上看没有错误，<code>+</code> 既可以用在字符串上，也可以用在整型上，而且我们并没有指出函数 <code>add</code> 参数必须为整型，其实我们期望的是两个整型相加，为了达到这目的，我们可以指定变量的类型，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="string">'Hello'</span>, <span class="number">222</span>)    <span class="comment">// Error</span></div></pre></td></tr></table></figure>
<p>此时，我们指定变量 <code>x</code> 和 <code>y</code> 的数据类型为整型，而我们传递的参数中有一个是字符串，那么 Flow 检查类型就会报错。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://flow.org/en/docs/getting-started/" target="_blank" rel="external">https://flow.org/en/docs/getting-started/</a></p>
</li>
<li><p><a href="https://ustbhuangyi.github.io/vue-analysis/prepare/flow.html#flow-%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F" target="_blank" rel="external">https://ustbhuangyi.github.io/vue-analysis/prepare/flow.html#flow-%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://flow.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flow&lt;/a&gt; 是 Facebook 开源的 JavaScript 静态类型检查工具，它可以帮助提高我们的工作效率，使我们的代码更快、更智能、更自信
    
    </summary>
    
      <category term="JavaScript" scheme="http://panzeyong.com/categories/JavaScript/"/>
    
    
      <category term="plugin" scheme="http://panzeyong.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>《Python3 网络爬虫开发实战》问题汇总（持续更新......）</title>
    <link href="http://panzeyong.com/2018/12/04/%E3%80%8APython3-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://panzeyong.com/2018/12/04/《Python3-网络爬虫开发实战》问题汇总/</id>
    <published>2018-12-04T14:52:32.000Z</published>
    <updated>2018-12-04T14:57:14.049Z</updated>
    
    <content type="html"><![CDATA[<p>mac 系统版本信息：</p>
<ul>
<li>macOS High Sierra </li>
<li>Version 10.13.4</li>
</ul>
<h3 id="1、安装-ChromeDriver"><a href="#1、安装-ChromeDriver" class="headerlink" title="1、安装 ChromeDriver"></a>1、安装 ChromeDriver</h3><p>mv: rename chromedriver to /usr/bin/chromedriver: Operation not permitted</p>
<p><a href="https://stackoverflow.com/questions/32659348/operation-not-permitted-when-on-root-el-capitan-rootless-disabled" target="_blank" rel="external">解决方案</a></p>
<h3 id="2、安装-Geckodriver"><a href="#2、安装-Geckodriver" class="headerlink" title="2、安装 Geckodriver"></a>2、安装 Geckodriver</h3><p>Permission denied: ‘geckodriver.log’ while running selenium webdriver in python</p>
<p>[解决方案(<a href="https://stackoverflow.com/questions/40466809/permission-denied-geckodriver-log-while-running-selenium-webdriver-in-python" target="_blank" rel="external">https://stackoverflow.com/questions/40466809/permission-denied-geckodriver-log-while-running-selenium-webdriver-in-python</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac 系统版本信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS High Sierra &lt;/li&gt;
&lt;li&gt;Version 10.13.4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1、安装-ChromeDriver&quot;&gt;&lt;a href=&quot;#1、安装-ChromeDriver&quot; c
    
    </summary>
    
      <category term="Python" scheme="http://panzeyong.com/categories/Python/"/>
    
    
      <category term="question" scheme="http://panzeyong.com/tags/question/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 问题</title>
    <link href="http://panzeyong.com/2018/03/08/JavaScript-%E9%97%AE%E9%A2%98/"/>
    <id>http://panzeyong.com/2018/03/08/JavaScript-问题/</id>
    <published>2018-03-08T09:25:35.000Z</published>
    <updated>2018-03-09T05:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、JavaScript-数组（包括元素和对象）去重"><a href="#一、JavaScript-数组（包括元素和对象）去重" class="headerlink" title="一、JavaScript 数组（包括元素和对象）去重"></a>一、JavaScript 数组（包括元素和对象）去重</h1><h3 id="1、for-循环"><a href="#1、for-循环" class="headerlink" title="1、for 循环"></a>1、for 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [array[<span class="number">0</span>]];</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len = array.length; i &lt; len; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, resultLen = result.length; j &lt; resultLen; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (array[i] === result[j]) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (j === resultLen) &#123;</div><div class="line">			result.push(array[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、indexOf"><a href="#2、indexOf" class="headerlink" title="2、indexOf"></a>2、indexOf</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> res = [];</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</div><div class="line">		<span class="keyword">var</span> current = array[i];</div><div class="line">		<span class="keyword">if</span> (res.indexOf(current) === <span class="number">-1</span>) &#123;</div><div class="line">			res.push(current);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、排序后去重"><a href="#3、排序后去重" class="headerlink" title="3、排序后去重"></a>3、排序后去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res = [];</div><div class="line">    <span class="keyword">var</span> sortedArray = array.concat().sort();</div><div class="line">    <span class="keyword">var</span> seen;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = sortedArray.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="comment">// 如果是第一个元素或者相邻的元素不相同</span></div><div class="line">        <span class="keyword">if</span> (!i || seen !== sortedArray[i]) &#123;</div><div class="line">            res.push(sortedArray[i])</div><div class="line">        &#125;</div><div class="line">        seen = sortedArray[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、ES6-Set"><a href="#4、ES6-Set" class="headerlink" title="4、ES6 Set"></a>4、ES6 Set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5、根据对象属性的唯一值（针对数组元素是对象）"><a href="#5、根据对象属性的唯一值（针对数组元素是对象）" class="headerlink" title="5、根据对象属性的唯一值（针对数组元素是对象）"></a>5、根据对象属性的唯一值（针对数组元素是对象）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">unique(score: Score) &#123;</div><div class="line">    <span class="keyword">this</span>.changedScore.some((item, index) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (item.questionId === score.questionId) &#123;</div><div class="line">        <span class="keyword">this</span>.changedScore.splice(index, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.changedScore = <span class="keyword">this</span>.changedScore.concat(score);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="二、如何防止频繁操作"><a href="#二、如何防止频繁操作" class="headerlink" title="二、如何防止频繁操作"></a>二、如何防止频繁操作</h1><h3 id="1、防抖动"><a href="#1、防抖动" class="headerlink" title="1、防抖动"></a>1、防抖动</h3><ul>
<li><p>原理：当触发事件时，事件必须在 n 秒后才执行，但是当在这 n 秒内又触发事件，事件执行是以最新触发事件的事件为起点，直到这 n 秒内不再触发事件为止，事件才在 n 秒后被执行。</p>
</li>
<li><p>代码实现</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</div><div class="line">	    <span class="keyword">var</span> timeout;</div><div class="line">	    </div><div class="line">	    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	        <span class="keyword">var</span> context = <span class="keyword">this</span>;</div><div class="line">	        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">	        </div><div class="line">	        clearTimeout(timeout)</div><div class="line">	        timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	            func.apply(context, args)</div><div class="line">	        &#125;, wait);</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2、节流"><a href="#2、节流" class="headerlink" title="2、节流"></a>2、节流</h3><p>允许一个函数在规定的时间内只执行一次。</p>
<p>实现方法：</p>
<ul>
<li><p>时间戳</p>
</li>
<li><p>定时器</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、JavaScript-数组（包括元素和对象）去重&quot;&gt;&lt;a href=&quot;#一、JavaScript-数组（包括元素和对象）去重&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript 数组（包括元素和对象）去重&quot;&gt;&lt;/a&gt;一、JavaSc
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>插入排序：直接插入排序</title>
    <link href="http://panzeyong.com/2018/01/22/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%9A%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://panzeyong.com/2018/01/22/插入排序：直接插入排序/</id>
    <published>2018-01-22T14:23:30.000Z</published>
    <updated>2018-01-22T15:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发工作中，不管是前端开发还是后端开发，在处理数据时，有时根据业务需求需要对数据进行排序，这就涉及到排序算法的选择。然而排序算法有很多种，对于算法的选择需要根据业务的需求，除此之外，还需要扎实的基本功。最近刚好在学习排序算法，把它记录下来，当作学习笔记。这篇文章要讲的是插入排序中一种：直接插入排序。</p>
<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>排序，简单来说就是把一组无序的元素以正序或者逆序的方式排序，那么至于采取什么方式排序，即是接下来要讲的。<strong>插入排序</strong>的主要思想是将一组元素的第一个元素看作是有序序列，从第二个元素起将待排序的元素插入到有序序列中，使有序序列逐渐扩大，直至所有元素都插入到有序序列中。<strong>直接插入排序</strong>是插入排序的一种，也是比较简单的一种排序方法，以下通过类比的例子来说明直接插入排序的思想。</p>
<p>这里小学上体育课为例子。回想下我们当时上第一节体育课的情景，老师会说：“同学们，先排好队伍，我们再开始上课”。那么此时老师会根据同学们的身高来排队伍，先按身高从低到高排成一排（从左到右站队），再分成 n 行 n 列。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常开发工作中，不管是前端开发还是后端开发，在处理数据时，有时根据业务需求需要对数据进行排序，这就涉及到排序算法的选择。然而排序算法有很多种，对于算法的选择需要根据业务的需求，除此之外，还需要扎实的基本功。最近刚好在学习排序算法，把它记录下来，当作学习笔记。这篇文章要讲的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第五章 初始化与清理</title>
    <link href="http://panzeyong.com/2017/12/18/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/"/>
    <id>http://panzeyong.com/2017/12/18/第五章-初始化与清理/</id>
    <published>2017-12-18T13:34:19.000Z</published>
    <updated>2018-01-02T23:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、构造器"><a href="#一、构造器" class="headerlink" title="一、构造器"></a>一、构造器</h1><h3 id="1、要点"><a href="#1、要点" class="headerlink" title="1、要点"></a>1、要点</h3><ul>
<li><p>构造器的名称必须与类名完全相同；</p>
</li>
<li><p>构造器是一种特殊类型的方法，没有返回值；</p>
</li>
<li><p>构造器可以重载；</p>
</li>
<li><p>若无构造器则会默认创建无参构造器；否则不会；</p>
</li>
<li><p>构造器有助于减少错误，并使代码更易于阅读。</p>
</li>
</ul>
<h3 id="2、构造器中调用构造器"><a href="#2、构造器中调用构造器" class="headerlink" title="2、构造器中调用构造器"></a>2、构造器中调用构造器</h3><ul>
<li><p>必须将构造器调用置于最起始处，否则编译器会报错；</p>
</li>
<li><p>使用 this 调用构造器时，不能调用多次；</p>
</li>
<li><p>除构造器外，编译器禁止在其它任何方法中调用构造器。</p>
</li>
</ul>
<h1 id="二、方法重载"><a href="#二、方法重载" class="headerlink" title="二、方法重载"></a>二、方法重载</h1><ul>
<li><p>方法名相同</p>
</li>
<li><p>必须有独一无二的参数类型列表</p>
</li>
<li><p>参数顺序不同也能区分（不推荐）</p>
</li>
<li><p>传入的数据类型（实际参数类型）小于方法中声明的形式参数类型，实际数据类型就会被提升；反之，如果传入的数据类型（实际参数类型）大于方法中声明的形式参数类型，实际数据类型就得通过类型转换执行窄化操作，否则编译器会报错。</p>
</li>
<li><p>不能通过方法返回值区分</p>
</li>
</ul>
<h1 id="三、关键字"><a href="#三、关键字" class="headerlink" title="三、关键字"></a>三、关键字</h1><h3 id="1、this"><a href="#1、this" class="headerlink" title="1、this"></a>1、this</h3><ul>
<li><p>对当前对象的引用；</p>
</li>
<li><p>只能在方法内部使用</p>
</li>
</ul>
<h3 id="2、static"><a href="#2、static" class="headerlink" title="2、static"></a>2、static</h3><ul>
<li><p>static 方法里不能使用关键字 this；</p>
</li>
<li><p>static 方法内部不能调用非静态方法；</p>
</li>
<li><p>非静态方法内部可以调用静态方法；</p>
</li>
</ul>
<h1 id="成员初始化"><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h1><ul>
<li><p>类的数据成员（即字段）若未初始化，系统则会指定默认值；局部变量若未初始化，编译器则会报错；</p>
</li>
<li><p>无法阻止自动初始化的进行，它将在构造器被调用之前发生；</p>
</li>
</ul>
<h3 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h3><ul>
<li><p>在类的内部，变量定义的先后顺序决定了初始化的顺序。即使变量定义散布于方法定义之间，它们仍旧会在任何方法（包括构造器）被调用之前得到初始化；（变量优先于构造器和方法初始化）</p>
</li>
<li><p>静态变量优先于非静态变量初始化；</p>
</li>
<li><p>创建一个类的多个实例时，静态变量只初始化一次，非静态变量每次被初始化；</p>
</li>
<li><p>对于静态块，首次创建该类对象或首次访问静态块成员才会被初始化；</p>
</li>
</ul>
<h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><ul>
<li>编译器不允许指定数组的大小</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、构造器&quot;&gt;&lt;a href=&quot;#一、构造器&quot; class=&quot;headerlink&quot; title=&quot;一、构造器&quot;&gt;&lt;/a&gt;一、构造器&lt;/h1&gt;&lt;h3 id=&quot;1、要点&quot;&gt;&lt;a href=&quot;#1、要点&quot; class=&quot;headerlink&quot; title=&quot;1、要点&quot;
    
    </summary>
    
      <category term="Java" scheme="http://panzeyong.com/categories/Java/"/>
    
    
      <category term="《Java Thinking》学习笔记" scheme="http://panzeyong.com/tags/%E3%80%8AJava-Thinking%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架：Vector（JDK 8）</title>
    <link href="http://panzeyong.com/2017/12/15/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9AVector%EF%BC%88JDK-8%EF%BC%89/"/>
    <id>http://panzeyong.com/2017/12/15/Java-集合框架：Vector（JDK-8）/</id>
    <published>2017-12-15T00:54:05.000Z</published>
    <updated>2017-12-23T08:23:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Vector 底层是由<strong>数组</strong>实现，是一个<strong>动态数组</strong>，其容量能自动增长或者减少。Vector 继承 AbstractList<e> 抽象类，实现 List<e>、RandomAccess、Clone、java.io.Serializable 接口。其实现原理与 ArrayList 类似。</e></e></p>
<ul>
<li><p>Vector 继承 AbstractList<e> 抽象类，实现 List<e> 接口。它是一个数组队列，提供了增删改查以及遍历等功能。</e></e></p>
</li>
<li><p>Vector 实现 RandomAccess 接口，提供快速随机访问功能。RandomAccess 接口被 List 实现主要用来支持快速随机访问，通过数组下标随机访问元素。</p>
</li>
<li><p>Vector 实现 Clone 接口，重写 Object clone() 方法可以克隆对象。</p>
</li>
<li><p>Vector 实现 java.io.Serializable 接口，可以进行序列化和反序列化，方便数据在网络进行传输。</p>
</li>
</ul>
<p>Vector 允许添加所有元素，包括 null 元素。</p>
<p>与 ArrayList 一样，Vector 支持容量自动增长，但是增长方式与 ArrayList 略有不同。Vector 通过维护 <strong>capacity</strong> 和 <strong>capacityIncrement</strong> 这两个属性来优化其内存管理，而 capacityIncrement 是容量增长的系数，当 Vector 容量不足时，如果 capacityIncrement 为 0 的话，那么 Vector 容量扩容为原先的 2 倍（newCapacity = 2 * oldCapacity）；如果 capacityIncrement 大于 0，那么扩容后的容量为 oldCapacity + capacityIncrement。扩容的原理其实是对数组进行复制，对需要移动的元素进行移动，相当消耗性能的。如果可能的话，在实例化 Vector 的时候指定其容量。</p>
<p>与 ArrayList 不一样的是，Vector 是线程安全，方法实现加上 synchronized 关键字。正因为其线程安全，这就导致其在单线程下性能不如 ArrayList。如果不在多线程下使用，推荐使用 ArrayList。</p>
<p>Vector 是在 Java 1.2 实现 List 接口，使其成为 Java 集合框架的一员，而并不是一开始就存在的。</p>
<h1 id="二、Vector-继承关系图"><a href="#二、Vector-继承关系图" class="headerlink" title="二、Vector 继承关系图"></a>二、Vector 继承关系图</h1><p><img src="/images/java/collection/vector/vector.png" alt=""></p>
<h1 id="三、Vector-源码分析"><a href="#三、Vector-源码分析" class="headerlink" title="三、Vector 源码分析"></a>三、Vector 源码分析</h1><h3 id="1、属性"><a href="#1、属性" class="headerlink" title="1、属性"></a>1、属性</h3><p>从源码可以看出，Vector 提供的属性如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 存储 Vector 包含所有元素的数组</span></div><div class="line"><span class="keyword">protected</span> Object[] elementData;</div><div class="line"></div><div class="line"><span class="comment">// Vector 所包含的元素个数</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</div><div class="line"></div><div class="line"><span class="comment">// Vector 容量自动增长的增量，如果小于等于 0，那么增量为原先容量的一倍</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</div><div class="line"></div><div class="line"><span class="comment">// 序列号版本号</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2767605614048989439L</span>;</div></pre></td></tr></table></figure>
<p>Vector 底层是由数组实现，所有元素都存储在 elementData 数组中，当 Vector 容量大于 elementData 的容量时，则需要扩容；那么到底如何扩容取决于属性 capacityIncrement 的值，如果 capacityIncrement 不为 0，那么扩容的增量就是它，即 oldCapacity + capacityIncrement；如果 capacityIncrement 小于等于 0，那么扩容的增量即为原先的一倍，即 oldCapacity + oldCapacity。至于 capacityIncrement 这个属性，则是 Vector 所包含元素的个数。</p>
<h3 id="2、构造函数"><a href="#2、构造函数" class="headerlink" title="2、构造函数"></a>2、构造函数</h3><p>Vector 提供 4 个不同版本的构造函数，它们之间有着一定的联系，具体实现看下面的分析。</p>
<p>无参构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 构造空的 Vector，默认大小为 10，容量的增量系数为 0</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在无参构造函数里，调用了传一个参数的构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用指定的初始容量和容量增量系数为 0 构造空 Vector</div><div class="line"> * </div><div class="line"> * <span class="doctag">@initialCapacity</span> vector 初始容量</div><div class="line"> * <span class="doctag">@throws</span> 如果 initialCapacity 为负数，则抛出异常 java.lang.IllegalArgumentException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>紧接着调用带两个参数的构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="comment">// 检查 initialCapacity 是否小于 0，是的话则抛出异常</span></div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> + initialCapacity);</div><div class="line">    <span class="comment">// 实例化数组对象，数组大小为 initialCapacity</span></div><div class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">    <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，才真正创建初始容量为 initialCapacity 的数组对象以及指定容量增长系统 this.capacityIncrement。</p>
<p>构造包含指定集合所有元素的 Vector 的构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 构造一个包含指定集合元素的 Vector</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> c 集合 c 中的元素添加到 Vector</div><div class="line"> * <span class="doctag">@throws</span> NullPointerException 如果指定集合为 null ，则抛出空指针</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="comment">// 集合 c 转换为数组赋值给数组 elementData</span></div><div class="line">    elementData = c.toArray();</div><div class="line">    <span class="comment">// 数组的长度</span></div><div class="line">    elementCount = elementData.length;</div><div class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">    <span class="comment">// 转换数组返回值可能不是 Object[]，如果是这样的话，则执行下面的语句</span></div><div class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">        elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果看过 <a href="http://panzeyong.com/2017/11/07/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9AArrayList/">ArrayList</a> 这篇文章对 ArrayList 的分析的话，那么对该方法的逻辑实现应该不陌生，而且基本一模一样，所以这里就不再做分析了。</p>
<h3 id="3、添加元素"><a href="#3、添加元素" class="headerlink" title="3、添加元素"></a>3、添加元素</h3><p>Vector 提供多个添加元素版本，有将元素添加到 Vector，也有将元素添加到 Vector 指定位置，至于是怎么实现的，见下面分析。</p>
<h4 id="（1）、add-Object"><a href="#（1）、add-Object" class="headerlink" title="（1）、add(Object)"></a>（1）、add(Object)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 把指定元素添加到 Vector 末尾</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> e 添加到 Vector 元素</div><div class="line"> * <span class="doctag">@returns</span> true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 在添加元素到数组 elementData 之前检测 elementData 容量是否满足</span></div><div class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</div><div class="line">    <span class="comment">// 将元素 e 添加到数组 elementData</span></div><div class="line">    elementData[elementCount++] = e;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看第 10 行代码方法 ensureCapacityHelper(elementCount + 1) 的具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 这实现了 ensureCapacity 的非同步语义。此类中的同步方法可以在内部调用</div><div class="line"> * 此方法来确保容量，而不会产生额外同步的代价。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里假设数组 elementData 已经添加了 10 个元素，容量等于初始容量，现在要再添加 1 一个新元素，也就是说，传给方法 ensureCapacityHelper(int minCapacity) 的参数 minCapacity 值为 11，那么来第 3 行代码，显示条件是成立的，第 4 行代码被执行，看下具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="comment">// 保存扩容前数组的容量</span></div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="comment">// 根据 capacityIncrement 的值来决定扩容。这里假设 capacityIncrement 为 0，那么增加的容量是原来的一倍，即 newCapacity = 2 * oldCapacity</span></div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?capacityIncrement : oldCapacity);</div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    <span class="comment">// 复制源数组到目标数组，实现扩容</span></div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，应该终于知道前面为何一直扩容取决于属性 capacityIncrement，答案在第 6 行代码。第 12 行代码实现扩容操作，最终调用 <code>System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength));</code>，而该方法是 native 方法，在底层实现对数组复制操作，对需要移动的元素进行移动，从而实现了扩容操作。</p>
<h4 id="（2）、add-int-index-E-element"><a href="#（2）、add-int-index-E-element" class="headerlink" title="（2）、add(int index, E element)"></a>（2）、add(int index, E element)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在 Vector 指定的位置插入指定的元素，将当前位置的元素（如果有的话）和任何随后的元素移动到右侧（在其索引中增加 1）</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> index 指定的元素将被插入的索引</div><div class="line"> * <span class="doctag">@params</span> element 将被插入的元素</div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    insertElementAt(element, index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看第 9 行代码的具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定的对象作为 Vector 的组件插入到 Vector 指定的索引；此 Vector</div><div class="line"> * 每个具有大于或者等于指定索引的索引的组件都需要向右移动，以使其大于先前</div><div class="line"> * 的索引值。</div><div class="line"> * </div><div class="line"> * 索引必须是大于 0 并且小于或等于当前 Vector 的大小（如果索引等于当前</div><div class="line"> * Vector 的大小，那么则将新元素插入到 Vector 尾）。</div><div class="line"> * </div><div class="line"> * 此方法与 add(int，E) 方法（它是 List 接口的一部分）的功能相同。</div><div class="line"> * 请注意，add 方法颠倒了参数的顺序，以更贴近地匹配数组的用法。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> obj 插入组件</div><div class="line"> * <span class="doctag">@params</span> index 插入新组件的索引</div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insertElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">// Vector 结构发生改变，插入属性 modCount 会加 1</span></div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 检查 index 是否越界</span></div><div class="line">    <span class="keyword">if</span> (index &gt; elementCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt; "</span> + elementCount);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 在添加元素之前检查容量，不满足的话则扩容</span></div><div class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</div><div class="line">    <span class="comment">// 将源数组需要移动的元素移到目标数组</span></div><div class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, elementCount - index);</div><div class="line">    <span class="comment">// 在指定索引插入元素</span></div><div class="line">    elementData[index] = obj;</div><div class="line">    <span class="comment">// 数组大小加 1</span></div><div class="line">    elementCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现逻辑不是很复杂，将指定的对象作为 Vector 的组件插入到 Vector 指定的索引。第 20 ~ 22 行代码检查数组是否越界；第 24 行代码检查容量是否满足，具体分析上面已经分析过；第 25 行代码实现对数组的复制，换句话说，即对需要的移动的元素进行移动。那么至于是如何移动元素的，看下面图解</p>
<p><img src="/images/java/collection/vector/add_by_index.png" alt=""></p>
<h4 id="（3）、addAll-Collection"><a href="#（3）、addAll-Collection" class="headerlink" title="（3）、addAll(Collection)"></a>（3）、addAll(Collection)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定集合中包含的所有元素插入到 Vector 尾</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> 插入到 Vector 的元素</div><div class="line"> * <span class="doctag">@returns</span> true</div><div class="line"> * <span class="doctag">@throws</span> 如果指定的集合 c 是 null，则抛出异常 java.lang.NullPointerException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 指定集合转换为数组</span></div><div class="line">    Object[] a = c.toArray();</div><div class="line">    <span class="keyword">int</span> numNew = a.length;</div><div class="line">    <span class="comment">// 在插入元素之前检查容量是否满足</span></div><div class="line">    ensureCapacityHelper(elementCount + numNew);</div><div class="line">    <span class="comment">// 把指定集合 c 包含的元素插入到 Vector 尾</span></div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, elementCount, numNew);</div><div class="line">    <span class="comment">// 更新 elementData 数组的大小</span></div><div class="line">    elementCount += numNew;</div><div class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法实现逻辑与 add(Object) 类似，区别只在于 allAll(Collection) 往 Vector 添加多个元素，而 add(Object) 值添加一个元素。至于具体分析细节可参考 add(Object) 方法。</p>
<h4 id="（4）、addAll-int-Collection"><a href="#（4）、addAll-int-Collection" class="headerlink" title="（4）、addAll(int, Collection)"></a>（4）、addAll(int, Collection)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定集合中的所有元素插入到指定位置 Vector 中。将当前位置的元素（如果有的话）和随后的元素移动到右侧（增加它们的索引）</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> index 在 index 插入指定集合的第一个元素</div><div class="line"> * <span class="doctag">@params</span> c 插入到 Vector 的元素</div><div class="line"> * <span class="doctag">@returns</span> true</div><div class="line"> * <span class="doctag">@throws</span> 如果指定的集合 c 是 null，则抛出异常 java.lang.NullPointerException</div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 检查 index 是否越界</span></div><div class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line">    <span class="comment">// 指定集合转换为数组</span></div><div class="line">    Object[] a = c.toArray();</div><div class="line">    <span class="keyword">int</span> numNew = a.length;</div><div class="line">    <span class="comment">// 在插入元素之前检查容量是否满足</span></div><div class="line">    ensureCapacityHelper(elementCount + numNew);</div><div class="line">    <span class="comment">// 需要移动元素个数</span></div><div class="line">    <span class="keyword">int</span> numMoved = elementCount - index;</div><div class="line">    <span class="comment">// 对需要移动的元素进行移动，即复制到目标数组</span></div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index, elementData, index + numNew, numMoved);</div><div class="line">    <span class="comment">// 将指定集合包含的元素插入到 Vector</span></div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</div><div class="line">    elementCount += numNew;</div><div class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的功能是在 Vector 指定位置插入指定集合包含的所有元素，这就需要对元素进行移动，即将源数组的元素复制到目标数组，那么至于是怎么移动的呢，来看下图解</p>
<p><img src="/images/java/collection/vector/add_collection.png" alt=""></p>
<h4 id="（5）、addElement-E-obj"><a href="#（5）、addElement-E-obj" class="headerlink" title="（5）、addElement(E obj)"></a>（5）、addElement(E obj)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定组件添加到 Vector 尾，其大小增加 1。如果 Vector 的大小大于其容量，那么它的容量就会增加。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> obj 添加组件</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</div><div class="line">    elementData[elementCount++] = obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法等价于方法 add(Object)，实现逻辑基本相同，可参考以上分析。</p>
<h3 id="4、删除元素"><a href="#4、删除元素" class="headerlink" title="4、删除元素"></a>4、删除元素</h3><p>同样，Vector 也提供多个版本删除元素，开发者可以根据自己的需求调用不同的 API，那么来看下它们的具体实现。</p>
<h4 id="1-、remove-Object"><a href="#1-、remove-Object" class="headerlink" title="(1)、remove(Object)"></a>(1)、remove(Object)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除 Vector 第一个与指定元素 o 相同的元素，如果 Vector 不包含指定元</div><div class="line"> * 素 o，则不发生改变。换句话说，移除最小索引 i 的元素 </div><div class="line"> * (o==null ? get(i)==null : o.equals(get(i)))（指定元素存在的情况下）</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> 从 Vector 移除的元素（指定元素存在的情况下） </div><div class="line"> * <span class="doctag">@returns</span> 如果 Vector 包含指定元素的话，则返回 true </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeElement(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看第 10 行代码的源码实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 从 Vector 移除与参数匹配的第一个元素，如果 Vector 包含该对象，</div><div class="line"> * 则 Vector 索引大于或等于该对象索引的元素都需要向左移动，</div><div class="line"> * 使其索引比之前小。该方法等价于 remove(Object)</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> obj 被移除组件</div><div class="line"> * <span class="doctag">@returns</span> 如果 Vector 包含指定组件，返回 true；否则返回 false</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 搜索指定元素在 Vector 出现的索引，存在的返回大于等于 0 的数；否则返回 -1</span></div><div class="line">    <span class="keyword">int</span> i = indexOf(obj);</div><div class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">        removeElementAt(i);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先调用方法 indexOf(Object) 遍历指定元素在 Vector 中第一次出现的索引，如果存在的话的返回指定元素在 Vector 的索引，否则返回 -1；那么接下来看下是如何遍历的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回 Vector 指定元素第一次出现的索引，如果 Vector 不包含该指定元素，</div><div class="line"> * 则返回 -1。更通常地来说，返回最低索引 i，使得 (o==null ? </div><div class="line"> * get(i)==null : o.equals(get(i)))，如果不存在的话则返回 -1。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> o 搜索的元素</div><div class="line"> * <span class="doctag">@returns</span> 返回 Vector 指定元素第一次出现的索引，如果 Vector 不包含该指定元素，则返回 -1。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>紧接着又调用方法 indexOf(Object, int)，源码实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回 Vector 指定元素第一次出现的索引，如果 Vector 不包含该指定元素，</div><div class="line"> * 则返回 -1。更通常地来说，返回最低索引 i，使得 (i &gt;= index &amp;&amp; </div><div class="line"> * (o==null ? get(i)==null : o.equals(get(i))))，</div><div class="line"> * 如果不存在的话则返回 -1。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> o 搜索的元素</div><div class="line"> * <span class="doctag">@params</span> index 从 Vector 开始搜索的索引</div><div class="line"> * <span class="doctag">@returns</span> 返回 Vector 指定元素第一次出现的索引，如果 Vector 不包含该指定元素，则返回 -1。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@throws</span> 如果指定索引是负数的话，则抛出 java.lang.IndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先判断指定搜索元素 o 是否为 null，如果为 null 的话，则执行第 14 - 16 行代码，即遍历数组 elementData 是否存在 null 元素，存在的话返回其索引，否则返回 -1；如果 o 不为 null 的话，则执行第 18 - 20 行代码，即遍历数组 elementData 是否存在该元素，存在的话则返回其索引，否则返回 -1。</p>
<p>回到方法 removeElement(Object)，假设 Vector 包含指定元素，调用方法 indexOf(Object) 的索引大于等于 0，那么将会执行第 13 - 16 行，即执行移除指定元素操作，真正执行该操作的方法是 removeElementAt(int)，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 删除指定索引的组件。此时 Vector 中每个大于或等于指定索引的索引的组件</div><div class="line"> * 需要向左移动，以使其索引小于先前的值。Vector 的大小减 1。</div><div class="line"> * 索引值必须是大于等于 0，并且小于当前 Vector 的大小。</div><div class="line"> * 该方法功能与 remvoe(int) 一样，但是需要注意的一点是 remove(int) 返回存储在指定位置的旧值。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> index 删除对象的索引</div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 检查 index 是否越界</span></div><div class="line">    <span class="keyword">if</span> (index &gt;= elementCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> + elementCount);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 需要移动元素的个数</span></div><div class="line">    <span class="keyword">int</span> j = elementCount - index - <span class="number">1</span>;</div><div class="line">    <span class="comment">// 对需要移动的元素进行移动，即从源数组复制到指定位置的目标数组</span></div><div class="line">    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</div><div class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// elementData 大小减少 1</span></div><div class="line">    elementCount--;</div><div class="line">    <span class="comment">// 将被移除元素腾出来的空间置 null，释放资源</span></div><div class="line">    elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>理解了如何在 Vector 指定位置添加元素后，再来理解如何在 Vector 指定位置删除元素应该很容易的，同样是需要对部分元素进行移动的，其实就是从源数组复制到指定位置的目标数组，通过图解加深理解</p>
<p><img src="/images/java/collection/vector/remove_by_index.png" alt=""></p>
<h4 id="2-、remove-int"><a href="#2-、remove-int" class="headerlink" title="(2)、remove(int)"></a>(2)、remove(int)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除 Vector 指定位置的元素，将指定元素随后的元素向左移动，</div><div class="line"> * 返回从 Vector 删除的元素。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> index 删除元素索引</div><div class="line"> * <span class="doctag">@returns</span> 被删除的元素 </div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line">        </div><div class="line">    E oldValue = elementData(index);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> numMoved = elementCount - index - <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</div><div class="line">    </div><div class="line">    elementData[--elementCount] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法基本与 removeElementAt(int) 等价，但是有点区别的是该方法有返回值，即返回被删除的元素；而 removeElementAt(int) 没有返回值。</p>
<h4 id="（3）、removeAllElements"><a href="#（3）、removeAllElements" class="headerlink" title="（3）、removeAllElements()"></a>（3）、removeAllElements()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除 Vector 所有组件以及设置其 size 为 0。</div><div class="line"> * 功能等价于方法 clear()</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeAllElements</span><span class="params">()</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// Let gc do its work</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elementCount; i++)</div><div class="line">        elementData[i] = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">    elementCount = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现逻辑很简单，就不再分析了。</p>
<h4 id="（4）、removeRange-int-fromIndex-int-toIndex"><a href="#（4）、removeRange-int-fromIndex-int-toIndex" class="headerlink" title="（4）、removeRange(int fromIndex, int toIndex)"></a>（4）、removeRange(int fromIndex, int toIndex)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 从 Vector 删除所用介于 fromIndex（包括）和 toIndex（不包括）之间的所有元素。</div><div class="line"> * 将任何后续的元素向左移动（索引减 1）。通过调用 （toIndex - fromIndex）来缩短 Vector（如果 toIndex == fromIndex），此操作无效。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 需要移动元素个数</span></div><div class="line">    <span class="keyword">int</span> numMoved = elementCount - toIndex;</div><div class="line">    <span class="comment">// 将源数组复制到指定位置的目标数组</span></div><div class="line">    System.arraycopy(elementData, toIndex, elementData, fromIndex, numMoved);</div><div class="line">    </div><div class="line">    <span class="comment">// Let gc do its work</span></div><div class="line">    <span class="comment">// 释放资源</span></div><div class="line">    <span class="keyword">int</span> newElementCount = elementCount - (toIndex-fromIndex);</div><div class="line">    <span class="keyword">while</span> (elementCount != newElementCount)</div><div class="line">        elementData[--elementCount] = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信理解了以上方法之后，对该方法也不难理解。在这里只是列出来而已，让大家知道有这个方法。</p>
<h3 id="5、修改元素"><a href="#5、修改元素" class="headerlink" title="5、修改元素"></a>5、修改元素</h3><p>对于修改元素，Vector 提供两个版本，区别在于是否有返回值。</p>
<h4 id="（1）、set-int-E"><a href="#（1）、set-int-E" class="headerlink" title="（1）、set(int, E)"></a>（1）、set(int, E)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用指定的元素替换 Vector 指定位置的元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> index 要替换元素的索引</div><div class="line"> * <span class="doctag">@params</span> element 元素存储在指定的位置</div><div class="line"> * <span class="doctag">@returns</span> 之前在指定位置的元素 </div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），</div><div class="line"> * 则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line">    </div><div class="line">    E oldValue = elementData(index);</div><div class="line">    elementData[index] = element;</div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先检查 index 是否越界，是的话就抛出异常；否则继续执行。保存 Vector 指定位置元素的值作为返回值返回，接着修改指定位置 index 的值。</p>
<h4 id="2-、setElementAt-E-obj-int-index"><a href="#2-、setElementAt-E-obj-int-index" class="headerlink" title="(2)、setElementAt(E obj, int index)"></a>(2)、setElementAt(E obj, int index)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 将 Vector 指定索引的组件设置为指定的对象，该位置原先的组件被丢弃。</div><div class="line"> * 索引必须是大于或等于0的值，并且小于矢量的当前大小。</div><div class="line"> * 此方法功能与 set(int, E) 相同。注意 set 方法颠倒参数顺序，以更接近数组的使用。还有一点区别的是 set 方法返回存储在指定位置的旧值。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> obj 替换 Vector 指定位置的新值</div><div class="line"> * <span class="doctag">@params</span> index 指定索引 </div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），</div><div class="line"> * 则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= elementCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> + elementCount);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    elementData[index] = obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6、查询元素"><a href="#6、查询元素" class="headerlink" title="6、查询元素"></a>6、查询元素</h3><p>对于查询元素，Vector 提供多个版本，由于实现 RandomAccess 接口，因此具有随机快速访问元素功能，即通过索引快速访问元素，Vector 查询元素都是通过索引访问元素实现的。</p>
<h4 id="（1）、elementAt-int"><a href="#（1）、elementAt-int" class="headerlink" title="（1）、elementAt(int)"></a>（1）、elementAt(int)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 返回指定索引的组件。</div><div class="line"> * 该方法功能与 get(int) 相同</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> index Vector 索引</div><div class="line"> * <span class="doctag">@returns</span> 指定索引的组件 </div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），</div><div class="line"> * 则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= elementCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> + elementCount);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> elementData(index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-、elementData-int"><a href="#2-、elementData-int" class="headerlink" title="(2)、elementData(int)"></a>(2)、elementData(int)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (E) elementData[index];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-、get-int"><a href="#3-、get-int" class="headerlink" title="(3)、get(int)"></a>(3)、get(int)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回 Vector 指定位置的元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> index 返回元素的索引</div><div class="line"> * <span class="doctag">@returns</span> 指定索引的对象</div><div class="line"> * <span class="doctag">@throws</span> 如果索引越界（index &lt; 0 || index &gt; size），</div><div class="line"> * 则抛出 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= elementCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line">    <span class="keyword">return</span> elementData(index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（4）、firstElement"><a href="#（4）、firstElement" class="headerlink" title="（4）、firstElement()"></a>（4）、firstElement()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 返回 Vector 第一个组件</div><div class="line"> * </div><div class="line"> * <span class="doctag">@returns</span> 返回 Vector 第一个组件</div><div class="line"> * <span class="doctag">@thorws</span> 如果 Vector 没有组件，则抛出异常 NoSuchElementException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">firstElement</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (elementCount == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> elementData(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（5）、lastElement"><a href="#（5）、lastElement" class="headerlink" title="（5）、lastElement()"></a>（5）、lastElement()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回 Vector 最后一个组件</div><div class="line"> * </div><div class="line"> * <span class="doctag">@returns</span> Vector 最后一个组件</div><div class="line"> * <span class="doctag">@thorws</span> 如果 Vector 没有组件，则抛出异常 NoSuchElementException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">lastElement</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (elementCount == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> elementData(elementCount - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7、遍历元素"><a href="#7、遍历元素" class="headerlink" title="7、遍历元素"></a>7、遍历元素</h3><p>对于遍历元素，Vector 提供多个版本，每个版本执行的效率有所差别。我们先来理解源码实现，然后再通过例子加以说明。</p>
<h4 id="1-、elements"><a href="#1-、elements" class="headerlink" title="(1)、elements()"></a>(1)、elements()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 返回 Vector 中所有组件对应的 Enumeration。被返回的 Enumeration 生成 Vector 中所有的组件。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@returns</span> Vector 中组件的枚举</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;E&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Enumeration&lt;E&gt;() &#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> count &lt; elementCount;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (count &lt; elementCount) &#123;</div><div class="line">                    <span class="keyword">return</span> elementData(count++);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Vector Enumeration"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>elements() 方法返回一个 Enumeration<e> 对象，而 Enumeration<e> 是一个接口，在方法 elements() 实现 Enumeration<e> 两个方法：hasMoreElements() 和 nextElement()。对于方法 hasMoreElements() 是判断是否还有下一个元素；而 nextElement() 遍历整个 Vector，返回下一个元素。</e></e></e></p>
<h4 id="（2）、iterator"><a href="#（2）、iterator" class="headerlink" title="（2）、iterator()"></a>（2）、iterator()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 以合适的顺序返回 Vector 中元素的迭代器。</div><div class="line"> * 返回的迭代器是 fail-fast（“快速失败”机制）。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建类 Itr 对象并返回，即返回 Iterator<e> 对象，类 Itr 实现 Iterator<e> 接口，并实现该接口中的方法 hasNext()、next()、remove()、forEachRemaining(Consumer)，以下给出该类的源码，以供理解。</e></e></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">    </div><div class="line">    <span class="comment">// 判断是否还有下一个元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Racy but within spec, since modifications are checked</span></div><div class="line">        <span class="comment">// within or after synchronization in next/previous</span></div><div class="line">        <span class="keyword">return</span> cursor != elementCount;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 返回下一个元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            cursor = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> elementData(lastRet = i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">            checkForComodification();</div><div class="line">            Vector.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">            expectedModCount = modCount;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        cursor = lastRet;</div><div class="line">        lastRet = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(action);</div><div class="line">        <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = elementCount;</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            <span class="keyword">final</span> E[] elementData = (E[]) Vector.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</div><div class="line">                action.accept(elementData[i++]);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></div><div class="line">            cursor = i;</div><div class="line">            lastRet = i - <span class="number">1</span>;</div><div class="line">            checkForComodification();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（3）、通过索引随机快速访问"><a href="#（3）、通过索引随机快速访问" class="headerlink" title="（3）、通过索引随机快速访问"></a>（3）、通过索引随机快速访问</h4><h4 id="（4）、foreach-增强循环遍历访问"><a href="#（4）、foreach-增强循环遍历访问" class="headerlink" title="（4）、foreach 增强循环遍历访问"></a>（4）、foreach 增强循环遍历访问</h4><h4 id="（5）、例子"><a href="#（5）、例子" class="headerlink" title="（5）、例子"></a>（5）、例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Enumeration;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Vector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorTraverseDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">999</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span> </span>&#123;</div><div class="line">        vector = <span class="keyword">new</span> Vector();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</div><div class="line">            vector.add(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 调用方法 elements() 遍历 Vector 元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">elementsAccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        </div><div class="line">        Enumeration enumeration = vector.elements();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(enumeration.hasMoreElements()) &#123;</div><div class="line">            enumeration.nextElement();        </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">long</span> time = endTime - startTime;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Elements() Method Access Time: "</span> + time + <span class="string">"ms"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 调用 iterator() 方法遍历 Vector 元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorAccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        </div><div class="line">        Iterator iterator = vector.iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</div><div class="line">            iterator.next();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">long</span> time = endTime - startTime;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Iterator() Method Access Time: "</span> + time + <span class="string">"ms"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * foreach 增强循环遍历 Vector 元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foreachAccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : vector) &#123;</div><div class="line">            <span class="keyword">int</span> i = item;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">long</span> time = endTime - startTime;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Foreach Access Time: "</span> + time + <span class="string">"ms"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">randomAccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</div><div class="line">            vector.get(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">long</span> time = endTime - startTime;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Random Access Time: "</span> + time + <span class="string">"ms"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        init();</div><div class="line">        elementsAccess();</div><div class="line">        iteratorAccess();</div><div class="line">        foreachAccess();</div><div class="line">        randomAccess();</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">MAX = <span class="number">999</span></div><div class="line">Elements() Method Access Time: <span class="number">0</span> <span class="function">ms</span></div><div class="line"><span class="title">Iterator</span><span class="params">()</span> Method Access Time: 0 ms</div><div class="line">Foreach Access Time: 0 ms</div><div class="line">Random Access Time: 1 ms</div><div class="line">-----------------------------------</div><div class="line"></div><div class="line">MAX = <span class="number">9999</span></div><div class="line">Elements() Method Access Time: <span class="number">1</span> <span class="function">ms</span></div><div class="line"><span class="title">Iterator</span><span class="params">()</span> Method Access Time: 1 ms</div><div class="line">Foreach Access Time: 1 ms</div><div class="line">Random Access Time: 0 ms</div><div class="line">-----------------------------------</div><div class="line"></div><div class="line">MAX = <span class="number">99999</span></div><div class="line">Elements() Method Access Time: <span class="number">5</span> <span class="function">ms</span></div><div class="line"><span class="title">Iterator</span><span class="params">()</span> Method Access Time: 6 ms</div><div class="line">Foreach Access Time: 7 ms</div><div class="line">Random Access Time: 7 ms</div><div class="line">-----------------------------------</div><div class="line"></div><div class="line">MAX = <span class="number">999999</span></div><div class="line">Elements() Method Access Time: <span class="number">28</span> <span class="function">ms</span></div><div class="line"><span class="title">Iterator</span><span class="params">()</span> Method Access Time: 29 ms</div><div class="line">Foreach Access Time: 31 ms</div><div class="line">Random Access Time: 50 ms</div><div class="line">-----------------------------------</div><div class="line"></div><div class="line">MAX = <span class="number">9999999</span></div><div class="line">Elements() Method Access Time: <span class="number">270</span> <span class="function">ms</span></div><div class="line"><span class="title">Iterator</span><span class="params">()</span> Method Access Time: 266 ms</div><div class="line">Foreach Access Time: 265 ms</div><div class="line">Random Access Time: 513 ms</div></pre></td></tr></table></figure>
<p>从运行结果可以看出，随着数据量不断递增，不同的遍历方式的效率渐趋明显；而对于数量小的话，遍历效率基本相同。</p>
<h3 id="8、判断-Vector-是否包含指定元素"><a href="#8、判断-Vector-是否包含指定元素" class="headerlink" title="8、判断 Vector 是否包含指定元素"></a>8、判断 Vector 是否包含指定元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 如果 Vector 包含指定元素，那么返回 true。换句话说，</div><div class="line"> * 当且仅当 Vector 至少包含一个元素 e，使得 (o==null ? e==null : o.equals(e))。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> o 搜索的元素</div><div class="line"> * <span class="doctag">@returns</span> 如果 Vector 包含指定元素，那么返回 true。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> indexOf(o, <span class="number">0</span>) &gt;= <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到第 9 行代码，应该很熟悉吧，见上面分析。</p>
<h3 id="9、判断-Vector-的大小是否-0"><a href="#9、判断-Vector-的大小是否-0" class="headerlink" title="9、判断 Vector 的大小是否 0"></a>9、判断 Vector 的大小是否 0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 判断 Vector 是否不包含任何组件。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@returns</span> 有且仅当 Vector 不包含任何组件时返回 true，换句话说，size 为 0；否则返回 false。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> elementCount == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="10、获取-Vector-大小"><a href="#10、获取-Vector-大小" class="headerlink" title="10、获取 Vector 大小"></a>10、获取 Vector 大小</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回 Vector 包含组件的数量</div><div class="line"> * </div><div class="line"> * <span class="doctag">@returns</span> 返回 Vector 包含组件的数量</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> elementCount;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="11、改变-Vector-大小"><a href="#11、改变-Vector-大小" class="headerlink" title="11、改变 Vector 大小"></a>11、改变 Vector 大小</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置 Vector 的大小。如果新的大小比当前大小大的话，那么将创建 null 添加到 Vector 末尾；如果新的大小比当前大小小的话，那么 Vector 索引为 newSize 以及之后的索引将被置为 null。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@params</span> newSize Vector 新大小</div><div class="line"> * <span class="doctag">@throws</span> 如果 newSize 是负数，那么抛出异常 java.lang.ArrayIndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">if</span> (newSize &gt; elementCount) &#123;</div><div class="line">        ensureCapacityHelper(newSize);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize ; i &lt; elementCount ; i++) &#123;</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    elementCount = newSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 newSize 当前数组 elementData 容量大的话，那么执行第 10 行代码，很眼熟吧，即对 Vector 进行扩容，在Vector 尾添加 （newSize - elementCount） null 元素；如果小的话，那么执行第 12 - 14 行代码，即将Vector 索引为 newSize 及之后索引的元素置 null。</p>
<h3 id="12、获取-Vector-容量"><a href="#12、获取-Vector-容量" class="headerlink" title="12、获取 Vector 容量"></a>12、获取 Vector 容量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回 Vector 当前容量</div><div class="line"> * </div><div class="line"> * <span class="doctag">@returns</span> 当前容量（内部数组 elementData 的长度）</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> elementData.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><ul>
<li><p>Vector 底层是基于数组实现的，是一个动态数组；</p>
</li>
<li><p>Vector 允许添加所有元素，包括 null 元素；</p>
</li>
<li><p>Vector 是线程安全；</p>
</li>
<li><p>Vector 实现 RandomAccess 接口，支持通过索引随机快速访问元素；</p>
</li>
<li><p>Vector 支持容量自增长，通过 capacity 和 capacityIncrement 这两个属性来维护。容量增长的机制如下：当增长系数 capacityIncrement 大于 0 时，那么 Vector 增加的容量为增长系数 capacityIncrement，扩容后的容量为 oldCapacity + capacityIncrement；如果增长系数 capacityIncrement 等于 0，那么 Vector 增加的容量为原来的一倍，扩容后的容量为 oldCapacity * 2。</p>
</li>
</ul>
<h1 id="五、Vector-与-ArrayList-区别"><a href="#五、Vector-与-ArrayList-区别" class="headerlink" title="五、Vector 与 ArrayList 区别"></a>五、Vector 与 ArrayList 区别</h1><table><tr><th></th><th style="text-align:center">不同点</th><th style="text-align:center">相同点</th></tr><tr><td rowspan="4" style="text-align:center">Vector</td><td style="text-align:center">同步、线程安全</td><td rowspan="8">1、底层基于数组实现，是一个动态数组；<br> 2、继承抽象类 AbstractList，实现 List 接口，提供增删改查以及遍历功能；<br>3、实现 RandomAccess 接口，支持随机快速访问元素功能；<br> 4、实现接口 java.io.Serializable，支持序列化和反序列化；<br> 5、实现接口 Clone，支持克隆对象；<br> 6、允许添加任何元素，包括 null 元素</td></tr><tr><td style="text-align:center">容量扩容根据增长系数 capacityIncrement </td></tr><tr><td style="text-align:center">支持 Enumeration、foreach、iterator、for 遍历</td></tr><tr><td style="text-align:center">需要额外开销来维护同步锁，性能慢</td></tr><tr><td rowspan="4" style="text-align:center">ArrayList</td><td style="text-align:center">异步、线程不安全</td></tr><tr><td style="text-align:center">容量扩容为旧容量的 1.5 倍</td></tr><tr><td style="text-align:center">支持 foreach、iterator、for 遍历</td></tr><tr><td style="text-align:center">不需要额外开销来维护同步锁，性能快</td></tr></table>

<p>以上是自己对 Vector 的初始，由于水平有限，如果文中有错误的，欢迎指出！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;Vector 底层是由&lt;strong&gt;数组&lt;/strong&gt;实现，是一个&lt;strong&gt;动态数组&lt;/strong&gt;，其容量能
    
    </summary>
    
      <category term="Java" scheme="http://panzeyong.com/categories/Java/"/>
    
    
      <category term="Java 集合框架" scheme="http://panzeyong.com/tags/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架：LinkedList（JDK 8）</title>
    <link href="http://panzeyong.com/2017/12/06/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9ALinkedList/"/>
    <id>http://panzeyong.com/2017/12/06/Java-集合框架：LinkedList/</id>
    <published>2017-12-06T00:41:35.000Z</published>
    <updated>2017-12-12T01:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>LinkedList 底层实现基于<strong>双向链表</strong>，除了可以当作链表使用外，LinkedList 还可以当作栈、队列和双端队列使用，其原因是实现 List 和 Deque 接口。LinkedList 继承于抽象类 AbstractSequentialList，实现 List、Deque、Cloneable、java.io.Serializable 接口。</p>
<ul>
<li><p>LinkedList 继承于抽象类 AbstractSequentialList，实现 List 接口，可以对队列进行基本操作，提供了增删改查以及遍历等功能。</p>
</li>
<li><p>LinkedList 实现 Clone 接口，重写 Object clone() 方法可以克隆对象。</p>
</li>
<li><p>LinkedList 实现 java.io.Serializable 接口，可以进行序列化和反序列化，方便数据传输。</p>
</li>
<li><p>LinkedList 实现 Deque 接口，而 Deque 接口是一个线性集合，支持元素在两端进行插入和移除，它有个名称叫作<strong>双端队列</strong>。Deque 实现既支持限制容量又支持不限制容量；提供的方法都可以从两端对元素进行操作，被提供的方法主要用于 <strong>insert</strong>、<strong>remove</strong> 和 <strong>examine</strong> 元素。这些方法存在两种形式：一种是操作失败时抛出异常；一种是返回一个特定值（null 或者 false，取决于具体操作）。对于这些操作，Deque 提供 12 个方法，具体如下表：</p>
  <table><tr style="text-align:center"><th></th><th style="text-align:center" colspan="2">First Element (Head)</th><th style="text-align:center" colspan="2">Last Element (Tail)</th></tr><tr><td></td><td>Throws exception</td><td>Special Value</td><td>Throws exception</td><td>Special Value</td></tr><tr><th>Insert</th><td>addFirst(e)</td><td>offerFirst(e)</td><td>addLast(e)</td><td>offerLast(e)</td></tr><tr><th>Remove</th><td>removeFirst()</td><td>pollFirst()</td><td>removeLast()</td><td>pollLast</td></tr><tr><th>Examine</th><td>getFirst()</td><td>peekFirst()</td><td>getLast()</td><td>peekLast()</td></tr><table><br>  Deque 接口继承 Queue，可以当作队列使用，而队列是一种先进先出（FIFO）的数据结构，即元素可以从队列的一端插入，从另一端移除。从 Queue 继承的方法与 Deque 实现的方法完全等价，如下表：<br>  <table><tr><th style="text-align:center">Queue Method</th><th style="text-align:center">Equivalent Deque Method</th></tr><tr><td style="text-align:center">add(e)</td><td style="text-align:center">addLast(e)</td></tr><tr><td style="text-align:center">offer(e)</td><td style="text-align:center">offerLast(e)</td></tr><tr><td style="text-align:center">remove()</td><td style="text-align:center">removeFirst()</td></tr><tr><td style="text-align:center">poll()</td><td style="text-align:center">pollFirst()</td></tr><tr><td style="text-align:center">element()</td><td style="text-align:center">getFirst()</td></tr><tr><td style="text-align:center">peek()</td><td style="text-align:center">peekFirst()</td></tr></table><br>  Deque 也可以当作栈使用，而栈是一种后进先出（LIFO）的数据结构，即元素只能从 Deque 一端插入，并且从这端移除。从 Stack 继承的方法与 Deque 实现的方法完全等价，如下表：<br>  <table><tr><th style="text-align:center">Stack Method</th><th style="text-align:center">Equivalent Deque Method</th></tr><tr><td style="text-align:center">push(e)</td><td style="text-align:center">addFirst(e)</td></tr><tr><td style="text-align:center">pop()</td><td style="text-align:center">removeFirst()</td></tr><tr><td style="text-align:center">peek()</td><td style="text-align:center">peekFirst()</td></tr></table>

</table></table></li>
</ul>
<p>LinkedList 允许添加所有元素，包括 null 元素。</p>
<p>LinkedList 是线程不安全，只能在单线程环境下工作；如果要在多线程环境下工作，则可以使用 Collections.synchronizedList 创建 List，返回线程安全 LinkedList 实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> LinkedList(...));</div></pre></td></tr></table></figure>
<p>从上面对 LinkedList 的介绍可知，LinkedList 的底层实现涉及到双向链表、栈、队列、双端队列这四种数据结构；为了能更好地理解其原理，简单来介绍链表、栈、队列、双端队列这四种数据结构。</p>
<h1 id="二、链表、栈、队列和双端队列（补充知识点）"><a href="#二、链表、栈、队列和双端队列（补充知识点）" class="headerlink" title="二、链表、栈、队列和双端队列（补充知识点）"></a>二、链表、栈、队列和双端队列（补充知识点）</h1><h3 id="1、链表（来源）"><a href="#1、链表（来源）" class="headerlink" title="1、链表（来源）"></a>1、链表（<a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8" target="_blank" rel="external">来源</a>）</h3><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p>
<p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。</p>
<p>链表有很多种不同类型：<strong>单向链表、单向循环链表、双向链表、双向循环链表</strong>。下面通过图解加深理解。</p>
<ul>
<li><p><strong>单向链表</strong>：单向链表是链表中最简单的一种。链表是由各个节点串起来而组成的，不同种类型链表的节点所包含的域不同。对于单向链表而言，每个节点包含两个域：数据域和指针域。数据域所要存放的是这个节点的内容，比如基本数据类型、引用类型以及自定义类型；而指针域存放的是下一个节点的内存地址。一般来说，在一个固定的位置保存着指向第一个节点的指针；最后一个节点的指针域保存着一个特殊的标记。</p>
<p>  <img src="images/java/collection/linkedlist/one_way_linked_list.png" alt=""></p>
</li>
<li><p><strong>单向循环链表</strong>：单向循环链表是在单向链表的基础上，将最后一个节点的指针域指向第一个节点，就构成了单向循环链表。</p>
<p>  <img src="images/java/collection/linkedlist/one_way_circular_linked_list.png" alt=""></p>
</li>
<li><p><strong>双向链表</strong>：与单向链表相比，双向链表更复杂些。双向链表包含三个域：两个指针域和一个数据域。在这两个指针域中，一个指针域（pre）存放的是前一个节点的内存地址，被指向的节点称为前驱节点；另一个指针域（next）存放的是后一个节点的内存地址，被指向的节点称为后继节点；而数据域存放的是该节点的内容。一般来说，第一个节点的 pre 指针指向 null，最后一个节点的 next 指针指向 null。</p>
<p>  <img src="images/java/collection/linkedlist/doubly_linked_list.png" alt=""></p>
</li>
<li><p><strong>双向循环链表</strong>：双向循环链表是在双向链表的基础上，将第一个节点的 pre 指针指向最后一个节点，最后一个节点的 next 指向第一个节点，形成一个环，构成双向循环链表。</p>
<p>  <img src="images/java/collection/linkedlist/doubly_circular_linked_list.png" alt=""></p>
</li>
</ul>
<h3 id="2、栈"><a href="#2、栈" class="headerlink" title="2、栈"></a>2、栈</h3><p>栈是一种简单的数据结构，在计算机科学中有着广泛的应用。栈（stack）是限定仅在表尾进行插入和删除操作的线性表。因此，对于栈来说，表尾端有其特殊含义，称为<strong>栈顶</strong>（top）；相应地，表头端称为<strong>栈底</strong>（bottom）。不含元素的空表称为<strong>空栈</strong>。</p>
<p>由于栈只局限于在一端进行操作，因此使它具有后进先出（Last In First Out）的特点。这特点在生活中是很常见的，比如往一个箱子装书，当把箱子装满时，这时如果要取最后一本书或者倒数第二本书，都必须得把前面的书拿出来，才能拿到自己想要的书。除此之外，除了头尾节点外，每一个节点都有一个前驱节点和一个后继节点。</p>
<p><img src="images/java/collection/linkedlist/stack.png" alt=""></p>
<h3 id="3、队列（来源）"><a href="#3、队列（来源）" class="headerlink" title="3、队列（来源）"></a>3、队列（<a href="https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97" target="_blank" rel="external">来源</a>）</h3><p>队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（队尾，称为 rear）进行插入操作，在前端（队头，称为 front）进行删除操作。</p>
<p><img src="images/java/collection/linkedlist/queue.png" alt=""></p>
<h3 id="4、双端队列"><a href="#4、双端队列" class="headerlink" title="4、双端队列"></a>4、双端队列</h3><p>双端队列是限定插入和删除操作在表的两端进行的线性表。这两端分别称作端点 1 和端点 2。</p>
<p><img src="images/java/collection/linkedlist/deque.png" alt=""></p>
<p>基础知识简单介绍完了，可以开始源码分析之旅了。</p>
<h1 id="三、LinkedList-继承关系图"><a href="#三、LinkedList-继承关系图" class="headerlink" title="三、LinkedList 继承关系图"></a>三、LinkedList 继承关系图</h1><p><img src="images/java/collection/linkedlist/linked_list.png" alt=""></p>
<h1 id="四、LinkedList-源码分析"><a href="#四、LinkedList-源码分析" class="headerlink" title="四、LinkedList 源码分析"></a>四、LinkedList 源码分析</h1><p>由于 LinkedList 底层实现的灵活性，既可以当作双向链表使用，也可以当作栈、队列和双端队列使用，因此对于源码的分析将分开讲解。</p>
<h2 id="（一）、LinkedList-基于双向链表实现"><a href="#（一）、LinkedList-基于双向链表实现" class="headerlink" title="（一）、LinkedList 基于双向链表实现"></a>（一）、LinkedList 基于双向链表实现</h2><h3 id="1、属性"><a href="#1、属性" class="headerlink" title="1、属性"></a>1、属性</h3><p>从 LinkedList 源码实现来看，就提供 3 个属性，分别如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</div><div class="line"> </div><div class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</div></pre></td></tr></table></figure>
<p>很明显可以注意到，这三个属性前面都有 <strong>transient</strong> 修饰，那么 <strong>transient</strong> 是什么呢？有什么作用呢？其实 <strong>transient</strong> 是 Java 中的一个关键字，只能用来修饰变量，不能修饰类和方法；作用是被修饰的变量不是对象持久化的一部分，换句话说，被 <strong>transient</strong> 修饰的变量不能被序列化。由于 LinkedList 实现 java.io.Serializable 接口，对象可以被序列化，但是对于属性 <strong>size</strong>、<strong>first</strong>、<strong>last</strong> 不想被序列化，就在前面加了关键字 <strong>transient</strong>。</p>
<p>接下来简单说下这三个属性的具体作用。属性 <strong>size</strong> 表示 list 的长度，即节点的个数；属性 <strong>first</strong> 表示指向链表第一个节点；<strong>last</strong> 表示指向链表最后一个节点。</p>
<h3 id="2、构造函数"><a href="#2、构造函数" class="headerlink" title="2、构造函数"></a>2、构造函数</h3><p>LinkedList 提供两个构造函数，一个无参构造函数和一个有参构造函数，分别如下：</p>
<p>无惨构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 构造空列表</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有参构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将包含指定元素的集合 c 添加到 list</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> c 包含指定元素的集合</div><div class="line"> * <span class="doctag">@throws</span> 如果指定的集合是 null，那么将抛出 NullPointerException</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="comment">// 调用无惨构造方法</span></div><div class="line">    <span class="keyword">this</span>();</div><div class="line">    </div><div class="line">    <span class="comment">// 将集合的所有元素添加到 list，具体分析见下面</span></div><div class="line">    addAll(c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、静态内部类-Node-lt-E-gt"><a href="#3、静态内部类-Node-lt-E-gt" class="headerlink" title="3、静态内部类 Node &lt;E&gt;"></a>3、静态内部类 Node &lt;E&gt;</h3><p>本来是要直接分析如何添加元素的，但是看了源码后，发现 Node<e> 这个类贯穿 LinkedList 的整个实现，所以有必要先讲下。源码实现如下：</e></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    E item;</div><div class="line">    Node&lt;E&gt; next;</div><div class="line">    Node&lt;E&gt; prev;</div><div class="line">    </div><div class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.item = element;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">        <span class="keyword">this</span>.prev = prev;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Node<e> 是一个静态内部类，采用泛型，表示的是双向链表中每个节点的数据结构。也就是说，每个节点包含三个域，一个数据域和两个指针域，数据域存储的是当前节点的内容（item），而指针域一个存放的是当前节点的前一个节点（前驱节点 prev）的内存地址，另一个指针域存放的是当前节点的后一个节点（后继节点 next）的内存地址。</e></p>
<h3 id="4、添加元素"><a href="#4、添加元素" class="headerlink" title="4、添加元素"></a>4、添加元素</h3><p>LinkedList 提供多个版本添加元素，有添加单个元素的，在指定位置添加元素或者添加集合包含的元素。至于具体如何实现，下面一一分析。</p>
<h4 id="1-、添加单个元素"><a href="#1-、添加单个元素" class="headerlink" title="(1)、添加单个元素"></a>(1)、添加单个元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定元素添加到 list 末尾</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> 被添加到 list 元素</div><div class="line"> * <span class="doctag">@return</span> true</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">     linkLast(e);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着看 linkLast(e) 的具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加元素到链表末尾</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">// 将最后一个节点 last 保存到变量 l</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="comment">// 创建新节点 newNode，l 作为新节点的前驱节点（前一个节点）</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">// last 指向新节点 newNode，即新节点 newNode 作为最后一个节点 last</span></div><div class="line">    last = newNode;</div><div class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 链表是空表，新节点 newNode 既是第一个节点又是最后一个节点</span></div><div class="line">        first = newNode;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 链表不为空表，将新节点 newNode 插入到链表末尾，l 的下一个节点指向新节点 newNode</span></div><div class="line">        l.next = newNode;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 链表节点数加 1  </span></div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上给出了详细的注释，其余就不多说了。接下来通过图解来理解链表不为空表时是如何将指定元素添加到链表末尾，如下图：</p>
<p><img src="images/java/collection/linkedlist/link_last.png" alt=""></p>
<h4 id="（2）、在双向链表指定位置添加新元素"><a href="#（2）、在双向链表指定位置添加新元素" class="headerlink" title="（2）、在双向链表指定位置添加新元素"></a>（2）、在双向链表指定位置添加新元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查 index 是否越界，注意 index 是从 0 开始的</span></div><div class="line">    checkPositionIndex(index);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (index == size) &#123;</div><div class="line">        <span class="comment">// 双向链表是空表或者在双向链表末尾添加新元素，linkLast(element) 方法分析见上</span></div><div class="line">        linkLast(element);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 在双向链表指定的位置添加新元素</span></div><div class="line">        linkBefore(element, node(index));</div><div class="line">    &#125;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第 10 行代码将指定的元素添加到双向链表指定的位置，在添加新元素之前必须找到index 所指向的节点，即方法 node(index)。具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert isElementIndex(index);</span></div><div class="line">    </div><div class="line">    <span class="comment">// 采用一次二分法查找元素，size &gt;&gt; 1 相当于 size / 2</span></div><div class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</div><div class="line">        Node&lt;E&gt; x = first;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</div><div class="line">            x = x.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Node&lt;E&gt; x = last;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</div><div class="line">            x = x.prev;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从方法 node(int) 源代码可以看出，LinkedList 通过索引 index 访问元素是遍历整个链表，不像 ArrayList 可以随机访问元素。在这里采用一次二分法查找元素，同样也要遍历元素，只不过是遍历元素的个数为原先的一半。如果 index 在前半部分，则从头开始遍历；如果 index 在后半部分，则从尾开始遍历；最后将查找的节点返回。</p>
<p>回到方法 add(int, E)，再看第 10 行代码，将参数 index 和调用方法 node(int) 返回的节点传给方法 linkBefore(int, Node<e>)，该方法的具体实现如下：</e></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert succ != null;</span></div><div class="line">    <span class="comment">// 将通过 index 遍历查找到的节点 succ 的前驱节点（前一个节点）prev 赋值给 pred</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</div><div class="line">    <span class="comment">// 创建新节点 newNode，pred 作为 newNode 前驱节点，succ 作为 newNode 的后继节点</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</div><div class="line">    <span class="comment">// succ 的 prev 指向新节点 newNode</span></div><div class="line">    succ.prev = newNode;</div><div class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 链表是空表，新节点 newNode 既是第一个节点又是最后一个节点</span></div><div class="line">        first = newNode;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// pred 的 next 指向新节点 newNode</span></div><div class="line">        pred.next = newNode;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 双向链表的个数加 1</span></div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过注释不难理解该方法的实现逻辑，下面通过图解加深对该方法的理解，如下图：</p>
<p><img src="images/java/collection/linkedlist/link_before.png" alt=""></p>
<h4 id="3-、将集合包含的元素添加到双向列表中"><a href="#3-、将集合包含的元素添加到双向列表中" class="headerlink" title="(3)、将集合包含的元素添加到双向列表中"></a>(3)、将集合包含的元素添加到双向列表中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将集合包含指定的所有元素添加到双向列表末尾</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> c 包含指定元素的集合</div><div class="line"> * <span class="doctag">@return</span> 添加成功返回 true</div><div class="line"> * <span class="doctag">@throws</span> c 为 null 抛出异常 NullPointerException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> addAll(size, c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就一行代码，调用 add(int, Collection&lt;? extends E&gt;)，看下具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定集合中的所有元素插入到列表中，从指定的位置开始。将当前在该位置的</div><div class="line"> * 元素（如果有的话）和随后的元素移到右侧（增加它们的索引）。新元素将按照</div><div class="line"> * 指定集合的​​迭代器返回的顺序出现在列表中。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> index 插入到列表起始位置</div><div class="line"> * <span class="doctag">@return</span> 成功插入时返回 true</div><div class="line"> * <span class="doctag">@throws</span> IndexOutOfBoundsException</div><div class="line"> * <span class="doctag">@throws</span> c 为 null 抛出异常 NullPointerException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查 index 是否越界</span></div><div class="line">    checkPositionIndex(index);</div><div class="line">    </div><div class="line">    <span class="comment">// 将集合 c 转换为数组</span></div><div class="line">    Object[] a = c.toArray();</div><div class="line">    </div><div class="line">    <span class="comment">// 集合元素的个数</span></div><div class="line">    <span class="keyword">int</span> numNew = a.length;</div><div class="line">    </div><div class="line">    <span class="comment">// 集合元素个数为 0，返回 false</span></div><div class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 定义前驱节点 pred 和后继节点 succ</span></div><div class="line">    Node&lt;E&gt; pred, succ;</div><div class="line">    </div><div class="line">    <span class="comment">// 判断是从列表的末尾插入还是某个位置</span></div><div class="line">    <span class="keyword">if</span> (index == size) &#123;</div><div class="line">        succ = <span class="keyword">null</span>;</div><div class="line">        pred = last;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        succ = node(index);</div><div class="line">        pred = succ.prev;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 遍历数组中元素，创建新节点，并指定新节点的前驱节点和后继节点，然后插入到列表</span></div><div class="line">    <span class="keyword">for</span> (Object o : a) &#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</div><div class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</div><div class="line">            first = newNode;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            pred.next = newNode;</div><div class="line">        pred = newNode;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</div><div class="line">        last = pred;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        pred.next = succ;</div><div class="line">        succ.prev = pred;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    size += numNew;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信通过以上注释不难理解该方法的实现逻辑。该方法实现逻辑将集合中指定的元素插入到列表有种情况：一种是从列表的末尾插入，另一种是从列表的某个位置插入，这与上面所讲解两个添加元素的方法的原理是一样的，区别只在于是添加单个元素还是添加多个元素，如何插入到链表中参考以上两个方法的图解。</p>
<h3 id="5、删除元素"><a href="#5、删除元素" class="headerlink" title="5、删除元素"></a>5、删除元素</h3><p>LinkedList 也提供好多个版本删除元素，下面一一来看具体实现。</p>
<h4 id="（1）、删除元素"><a href="#（1）、删除元素" class="headerlink" title="（1）、删除元素"></a>（1）、删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索和删除列表第一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回 list 第一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表是空的抛出 NoSuchElementException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着看 removeFirst() 具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除并返回列表第一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 从列表返回的第一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表是空的抛出 NoSuchElementException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 保存 list 第一个节点到变量 f，并作为参数传给 unlinkFirst(Node&lt;E&gt;)</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> unlinkFirst(f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看方法 unlinkFirst(Node<e>) 具体实现</e></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></div><div class="line">    <span class="comment">// 保存 f 的 item 到变量 element，并作为返回值返回</span></div><div class="line">    <span class="keyword">final</span> E element = f.item;</div><div class="line">    <span class="comment">// 保存 f 的下一个节点到变量 next</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</div><div class="line">    <span class="comment">// 释放资源，f 的 item 和 next 置 null</span></div><div class="line">    f.item = <span class="keyword">null</span>;</div><div class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">    <span class="comment">// first 指针指向被删除第一个节点的下一个节点 next</span></div><div class="line">    first = next;</div><div class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 列表只有一个元素的情况下</span></div><div class="line">        last = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// list 第一个节点的 prev 指向 null</span></div><div class="line">        next.prev = <span class="keyword">null</span>;</div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// 列表的节点数加 1 </span></div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于删除 list 第一个节点的实现逻辑也挺简单的。简单来说就是先把第一个节点 first 的数据域和指针域保存起来，然后置空，释放资源；如果列表元素个数大于 1 的话，将 first 指针移动到下一个元素，并重新对 first 节点的 prev 进行设置。</p>
<h4 id="（2）、删除列表中指定位置的元素"><a href="#（2）、删除列表中指定位置的元素" class="headerlink" title="（2）、删除列表中指定位置的元素"></a>（2）、删除列表中指定位置的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除列表中指定位置的元素，返回从列表被删除的元素</div><div class="line"> * </div><div class="line"> *  <span class="doctag">@param</span> index 被移除元素的索引</div><div class="line"> *  <span class="doctag">@return</span> 返回指定位置的元素</div><div class="line"> *  <span class="doctag">@throws</span> IndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查 index 是否越界</span></div><div class="line">    checkElementIndex(index);</div><div class="line">    <span class="comment">// 调用 node(int) 方法查找要删除的元素</span></div><div class="line">    <span class="keyword">return</span> unlink(node(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法的实现也挺简单的，核心实现是第 2 行代码，看方法 unlink(Node<e>) 具体实现：</e></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert x != null;</span></div><div class="line">    <span class="comment">// 保存被删除元素的数据域 item 和指针域 next、prev</span></div><div class="line">    <span class="keyword">final</span> E element = x.item;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</div><div class="line">    </div><div class="line">    <span class="comment">// 判断被删除节点是否是第一个节点，然后作出相应的实现</span></div><div class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</div><div class="line">        first = next;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        prev.next = next;</div><div class="line">        <span class="comment">// 释放资源，将被删除节点 x 的 prev 置 null</span></div><div class="line">        x.prev = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 判断被删除节点是否是最后一个节点，然后作出相应的实现</span></div><div class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">        last = prev;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        next.prev = prev;</div><div class="line">        <span class="comment">// 释放资源，将被删除节点 x 的 next 置 null</span></div><div class="line">        x.next = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 释放资源，将被删除节点 x 的 item 置 null</span></div><div class="line">    x.item = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 列表的节点数减 1</span></div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的实现同样也先保存被删除节点的数据域和指针域，然后判断该节点时列表的第一个节点还是最后一个节点或者是在列表个数之间的节点，作出相应的处理。对于删除第一个节点或者最后一个节点稍微比较简单，不再作出分析。对于删除位于列表之间的节点，通过图解加深理解，如下图：</p>
<p><img src="images/java/collection/linkedlist/unlink.png" alt=""></p>
<h4 id="（3）、检索并删除元素"><a href="#（3）、检索并删除元素" class="headerlink" title="（3）、检索并删除元素"></a>（3）、检索并删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</div><div class="line">                unlink(x);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</div><div class="line">                unlink(x);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从源码可以看出，首先判断要删除的元素 o 是否为 null，如果为 null 的话，遍历列表是否存在空元素，存在的则调用 unlink(Node<e>) 方法删除元素并返回 true；不为 null 的话也是遍历列表是否存在该元素，存在的话则调用 unlink(Node<e>) 方法删除元素并返回 true。至于 unlink(Node<e>) 是如何实现的看上面分析。</e></e></e></p>
<h3 id="6、修改元素"><a href="#6、修改元素" class="headerlink" title="6、修改元素"></a>6、修改元素</h3><p>LinkedList 提供修改列表元素的方法，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用指定的元素替换此列表中指定位置的元素。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> index 要替换的元素的索引</div><div class="line"> * <span class="doctag">@param</span> element 元素存储子在的指定位置</div><div class="line"> * <span class="doctag">@return</span> 返回被替换的元素</div><div class="line"> * <span class="doctag">@throws</span> IndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查 index 是否越界</span></div><div class="line">    checkElementIndex(index);</div><div class="line">    <span class="comment">// 遍历列表查找索引为 index 的节点</span></div><div class="line">    Node&lt;E&gt; x = node(index);</div><div class="line">    <span class="comment">// 保存被替换元素到变量 oldVal，并作为返回值返回</span></div><div class="line">    E oldVal = x.item;</div><div class="line">    <span class="comment">// 修改元素的值</span></div><div class="line">    x.item = element;</div><div class="line">    <span class="keyword">return</span> oldVal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现逻辑挺简单的，就不再作分析了。</p>
<h3 id="7、查询元素"><a href="#7、查询元素" class="headerlink" title="7、查询元素"></a>7、查询元素</h3><p>对于查询列表元素，LinkedList 提供通过索引检索元素的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回列表中指定位置的元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> index 要返回的元素的索引</div><div class="line"> * <span class="doctag">@return</span> 返回列表中指定位置的元素</div><div class="line"> * <span class="doctag">@throws</span> IndexOutOfBoundsException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查 index 是否越界</span></div><div class="line">    checkElementIndex(index);</div><div class="line">    <span class="comment">// 遍历列表查找索引为 index 的节点并获取其 item 作为返回值返回</span></div><div class="line">    <span class="keyword">return</span> node(index).item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8、清空列表"><a href="#8、清空列表" class="headerlink" title="8、清空列表"></a>8、清空列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Clearing all of the links between nodes is "unnecessary", but:</span></div><div class="line">    <span class="comment">// - helps a generational GC if the discarded nodes inhabit</span></div><div class="line">    <span class="comment">//   more than one generation</span></div><div class="line">    <span class="comment">// - is sure to free memory even if there is a reachable Iterator</span></div><div class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</div><div class="line">        Node&lt;E&gt; next = x.next;</div><div class="line">        x.item = <span class="keyword">null</span>;</div><div class="line">        x.next = <span class="keyword">null</span>;</div><div class="line">        x.prev = <span class="keyword">null</span>;</div><div class="line">        x = next;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    first = last = <span class="keyword">null</span>;</div><div class="line">    size = <span class="number">0</span>;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>清空整个列表，简单来说就是遍历整个列表，把每个节点的三个域：数据域和两个指针域置 null，并且将 first 和 last 置 null，列表长度 size 为 0。</p>
<h3 id="9、判断列表是否包含指定的元素"><a href="#9、判断列表是否包含指定的元素" class="headerlink" title="9、判断列表是否包含指定的元素"></a>9、判断列表是否包含指定的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 如果列表包含指定元素，则返回 true</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> o 检查元素是否存在于列表</div><div class="line"> * <span class="doctag">@return</span> 如果列表包含指定元素，则返回 true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 indexOf(Object) 方法不返回 -1，则表示要查找的元素存在于列表，那么该方法是怎么实现的，来看下源码实现就知道了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回此列表中指定元素第一次出现的索引;如果此列表不包含元素，则返回-1。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> o 检索的元素</div><div class="line"> * <span class="doctag">@return</span> 返回此列表中指定元素第一次出现的索引;如果此列表不包含元素，则返回-1。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (o.equals(x.item))</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从源码可以看出，首先判断要查找的元素 o 是否为 null，如果为 null 的话，遍历列表是否存在空元素，存在的则返回该元素在列表的位置 index，否则继续遍历；不为 null 的话也是遍历列表是否存在该元素，存在的则返回该元素在列表的位置 index，否则继续遍历；如果最后搜索不到该元素的话直接返回 -1。</p>
<h3 id="10、从列表末尾开始检索指定元素是否存在列表"><a href="#10、从列表末尾开始检索指定元素是否存在列表" class="headerlink" title="10、从列表末尾开始检索指定元素是否存在列表"></a>10、从列表末尾开始检索指定元素是否存在列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回指定元素的最后一次出现的索引在此列表中，如果此列表不包含元素，</div><div class="line"> * 则为-1。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> o 检索的元素</div><div class="line"> * <span class="doctag">@return</span> 返回指定元素的最后一次出现的索引在此列表中，</div><div class="line"> * 如果此列表不包含元素，则为-1。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index = size;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">            index--;</div><div class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">            index--;</div><div class="line">            <span class="keyword">if</span> (o.equals(x.item))</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>lastIndexOf(Object) 方法与 indexOf(Object) 的区别在于该方法是从列表末尾开始查找指定的元素是否存在。</p>
<h3 id="11、获取列表元素个数"><a href="#11、获取列表元素个数" class="headerlink" title="11、获取列表元素个数"></a>11、获取列表元素个数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回列表元素个数</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表元素个数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="（二）、LinkedList-实现-Deque-双端队列"><a href="#（二）、LinkedList-实现-Deque-双端队列" class="headerlink" title="（二）、LinkedList 实现 Deque 双端队列"></a>（二）、LinkedList 实现 Deque 双端队列</h2><p>LinkedList 实现 Deque 接口，因此可以把它当作双端队列使用。理解了双向链表的原理后，再来理解双端队列的基本操作操作应该很容易了。Deque 实现基本操作可以分为三种：插入元素、删除元素和查询元素。每种操作的实现方法都有两种形式，一种是如果操作失败时抛出异常；一种是如果操作失败返回 null 或者 false。以下对这三种操作分别作出解析。</p>
<h3 id="1、插入元素"><a href="#1、插入元素" class="headerlink" title="1、插入元素"></a>1、插入元素</h3><h4 id="（1）、在列表的开始处插入指定元素（第一种形式：抛出异常）"><a href="#（1）、在列表的开始处插入指定元素（第一种形式：抛出异常）" class="headerlink" title="（1）、在列表的开始处插入指定元素（第一种形式：抛出异常）"></a>（1）、在列表的开始处插入指定元素（第一种形式：抛出异常）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在列表的开始处插入指定元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> 添加的元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    linkFirst(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着看 linkFirst(E) 的具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 链接元素 e，作为列表第一个元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">// 将第一个节点 first 保存到变量 f</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="comment">// 创建新节点 newNode，f 作为新节点 newNode 的后继节点（后一个节点）</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</div><div class="line">    <span class="comment">// first 指向新节点 newNode，即新节点 newNode 作为第一个节点 first    </span></div><div class="line">    first = newNode;</div><div class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 链表是空表，新节点 newNode 既是第一个节点又是最后一个节点</span></div><div class="line">        last = newNode;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 链表不为空表，将新节点 newNode 插入到表头，f 的上一个节点指向新节点 newNode</span></div><div class="line">        f.prev = newNode;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 链表节点数加 1  </span></div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上给出了详细的注释，其余就不多说了。接下来通过图解来理解链表不为空表时是如何将指定元素插入表头，如下图：</p>
<p><img src="images/java/collection/linkedlist/link_first.png" alt=""></p>
<h4 id="（2）、在列表的前面插入指定的元素（第二种形式：返回特定值）"><a href="#（2）、在列表的前面插入指定的元素（第二种形式：返回特定值）" class="headerlink" title="（2）、在列表的前面插入指定的元素（第二种形式：返回特定值）"></a>（2）、在列表的前面插入指定的元素（第二种形式：返回特定值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在列表的前面插入指定的元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> e 插入元素</div><div class="line"> * <span class="doctag">@return</span> true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addFirst(e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法最终是调用 addFirst(E)，并且返回 true，至于方法的分析见上面的分析。</p>
<h4 id="（3）、将指定的元素添加到列表末尾（第一种形式：抛出异常）"><a href="#（3）、将指定的元素添加到列表末尾（第一种形式：抛出异常）" class="headerlink" title="（3）、将指定的元素添加到列表末尾（第一种形式：抛出异常）"></a>（3）、将指定的元素添加到列表末尾（第一种形式：抛出异常）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定的元素添加到列表末尾，该方法与  add(java.lang.Object) 等价</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> e 添加的元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    linkLast(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到第 2 行代码很熟悉吧，具体分析看上面。</p>
<h4 id="（4）、在列表的末尾插入指定的元素（第二种形式：返回特定值）"><a href="#（4）、在列表的末尾插入指定的元素（第二种形式：返回特定值）" class="headerlink" title="（4）、在列表的末尾插入指定的元素（第二种形式：返回特定值）"></a>（4）、在列表的末尾插入指定的元素（第二种形式：返回特定值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在列表的末尾插入指定的元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> e 添加的元素</div><div class="line"> * <span class="doctag">@return</span> true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addLast(e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法实现逻辑很简单，调用方法 addLast(E) 并返回 true。</p>
<h3 id="2、删除元素"><a href="#2、删除元素" class="headerlink" title="2、删除元素"></a>2、删除元素</h3><h4 id="（1）、从列表中删除并返回第一个元素（第一种形式：抛出异常）"><a href="#（1）、从列表中删除并返回第一个元素（第一种形式：抛出异常）" class="headerlink" title="（1）、从列表中删除并返回第一个元素（第一种形式：抛出异常）"></a>（1）、从列表中删除并返回第一个元素（第一种形式：抛出异常）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除并返回列表第一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 从列表返回的第一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表是空的抛出 NoSuchElementException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 保存 list 第一个节点到变量 f，并作为参数传给 unlinkFirst(Node&lt;E&gt;)</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> unlinkFirst(f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-、从列表中删除并返回第一个元素（第二种形式：返回特定值）"><a href="#2-、从列表中删除并返回第一个元素（第二种形式：返回特定值）" class="headerlink" title="(2)、从列表中删除并返回第一个元素（第二种形式：返回特定值）"></a>(2)、从列表中删除并返回第一个元素（第二种形式：返回特定值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索并删除此列表的第一个元素，如果此列表为空，则返回null。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表第一个元素或者如果列表是空，则返回 null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（3）、从列表中删除并返回最后一个元素（第一种形式：抛出异常）"><a href="#（3）、从列表中删除并返回最后一个元素（第一种形式：抛出异常）" class="headerlink" title="（3）、从列表中删除并返回最后一个元素（第一种形式：抛出异常）"></a>（3）、从列表中删除并返回最后一个元素（第一种形式：抛出异常）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除并返回列表最后一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表最后一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表为空抛出异常 NoSuchElementException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 保存 list 最后一个节点到变量 l，并作为参数传给 unlinkLast(Node&lt;E&gt;)</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> unlinkLast(l);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看方法 unlinkLast(Node<e>) 具体实现</e></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></div><div class="line">    <span class="comment">// 保存 l 的 item 到变量 element，并作为返回值返回</span></div><div class="line">    <span class="keyword">final</span> E element = l.item;</div><div class="line">    <span class="comment">// 保存 l 的 prev 到变量 prev</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</div><div class="line">    <span class="comment">// 释放资源，将 l 的 item 和 prev 置 null</span></div><div class="line">    l.item = <span class="keyword">null</span>;</div><div class="line">    l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">    <span class="comment">// 移动 last 指针，指向被删除节点的前驱节点 prev</span></div><div class="line">    last = prev;</div><div class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</div><div class="line">        first = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 由于 prev 是列表最后一个节点，因此 prev 的 next 指向 null</span></div><div class="line">        prev.next = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 列表节点数减 1    </span></div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与方法 unlinkFirst(Node<e>) 实现逻辑类似的，只不过一个是删除头节点，一个是删除尾节点。简单来说就是先把最后一个节点 last 的数据域和指针域保存起来，然后置空，释放资源；如果列表元素个数大于 1 的话，将 last 指针移动到上一个节点，并重新对 last 节点的 next 进行设置。</e></p>
<h4 id="（4）、从列表中删除并返回最后一个元素（第二种形式：返回特定值）"><a href="#（4）、从列表中删除并返回最后一个元素（第二种形式：返回特定值）" class="headerlink" title="（4）、从列表中删除并返回最后一个元素（第二种形式：返回特定值）"></a>（4）、从列表中删除并返回最后一个元素（第二种形式：返回特定值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索并删除此列表的最后一个元素，如果此列表为空，则返回null。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表第一个元素或者如果列表是空，则返回 null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、查询元素"><a href="#3、查询元素" class="headerlink" title="3、查询元素"></a>3、查询元素</h3><h4 id="（1）、查询列表第一个元素（第一种形式：抛出异常）"><a href="#（1）、查询列表第一个元素（第一种形式：抛出异常）" class="headerlink" title="（1）、查询列表第一个元素（第一种形式：抛出异常）"></a>（1）、查询列表第一个元素（第一种形式：抛出异常）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回列表第一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 列表第一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表是空的，抛出异常 NoSuchElementException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> f.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（2）、查询列表第一个元素（第二种形式：返回特定值）"><a href="#（2）、查询列表第一个元素（第二种形式：返回特定值）" class="headerlink" title="（2）、查询列表第一个元素（第二种形式：返回特定值）"></a>（2）、查询列表第一个元素（第二种形式：返回特定值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索但不移除此列表的第一个元素，如果此列表为空，则返回null。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表第一个元素，如果列表为空，则返回 null。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（3）、查询列表最后一个元素（第一种形式：抛出异常）"><a href="#（3）、查询列表最后一个元素（第一种形式：抛出异常）" class="headerlink" title="（3）、查询列表最后一个元素（第一种形式：抛出异常）"></a>（3）、查询列表最后一个元素（第一种形式：抛出异常）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回列表最后一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 列表最后一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表是空的，抛出异常 NoSuchElementException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> l.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（3）、查询列表最后一个元素（第二种形式：返回特定值）"><a href="#（3）、查询列表最后一个元素（第二种形式：返回特定值）" class="headerlink" title="（3）、查询列表最后一个元素（第二种形式：返回特定值）"></a>（3）、查询列表最后一个元素（第二种形式：返回特定值）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索但不移除此列表的最后一个元素，如果此列表为空，则返回null。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表最后一个元素，如果列表为空，则返回 null。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="（三）、LinkedList-实现队列-Queue"><a href="#（三）、LinkedList-实现队列-Queue" class="headerlink" title="（三）、LinkedList 实现队列 Queue"></a>（三）、LinkedList 实现队列 Queue</h2><p>Deque 接口继承 Queue 接口，可以当作队列使用，那么 LinkedList 也就实现队列的基本操作，具体实现如下。</p>
<h3 id="1、add-E"><a href="#1、add-E" class="headerlink" title="1、add(E)"></a>1、add(E)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定元素添加到 list 末尾</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> 被添加到 list 元素</div><div class="line"> * <span class="doctag">@return</span> true</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">     linkLast(e);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、off-E"><a href="#2、off-E" class="headerlink" title="2、off(E)"></a>2、off(E)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加指定元素到列表尾</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> e 添加的元素</div><div class="line"> * <span class="doctag">@return</span> true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> add(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、remove"><a href="#3、remove" class="headerlink" title="3、remove()"></a>3、remove()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索和删除列表第一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回 list 第一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表是空的抛出 NoSuchElementException </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、poll"><a href="#4、poll" class="headerlink" title="4、poll()"></a>4、poll()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索并删除此列表的头（第一个元素）。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表的表头，如果列表为空，则返回 null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5、element"><a href="#5、element" class="headerlink" title="5、element()"></a>5、element()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回列表第一个元素</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 列表第一个元素</div><div class="line"> * <span class="doctag">@throws</span> 如果列表是空的，抛出异常 NoSuchElementException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6、peek"><a href="#6、peek" class="headerlink" title="6、peek()"></a>6、peek()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索但不移除此列表的第一个元素，如果此列表为空，则返回null。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表第一个元素，如果列表为空，则返回 null。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="（四）、LinkedList-实现栈-Stack"><a href="#（四）、LinkedList-实现栈-Stack" class="headerlink" title="（四）、LinkedList 实现栈 Stack"></a>（四）、LinkedList 实现栈 Stack</h2><p>由于 Deque 接口可以当作栈（Stack）使用，那么 LinkedList 也实现栈的基本操作，来看下是怎么实现的吧。</p>
<h3 id="1、入栈"><a href="#1、入栈" class="headerlink" title="1、入栈"></a>1、入栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定元素压入到列表所表示的栈；换句话说，将元素插入到列表表头。</div><div class="line"> * </div><div class="line"> * 该方法与 addFirst(E) 等价</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> 入栈元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addFirst(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、出栈"><a href="#2、出栈" class="headerlink" title="2、出栈"></a>2、出栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 从列表所表示的栈弹出元素；换句话说，删除并返回此列表的第一个元素。</div><div class="line"> * </div><div class="line"> * 该方法与 removeFirst() 等价</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、查询元素-1"><a href="#3、查询元素-1" class="headerlink" title="3、查询元素"></a>3、查询元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检索但不移除此列表的第一个元素，如果此列表为空，则返回null。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@return</span> 返回列表第一个元素，如果列表为空，则返回 null。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从以上可以看出，不管 LinkedList 是当作双端队列使用，还是当作队列或者栈使用，其底层实现是通过链表实现的。</p>
<h1 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h1><ul>
<li><p>LinkedList 是基于双向链表实现的。</p>
</li>
<li><p>对于插入或者删除元素，如果从列表两端插入或者删除元素的时，执行效率是高效的；如果是在列表指定的位置插入或者删除元素的话，需要先通过索引遍历查找指定的元素，再执行相关操作，效率明显降低了。</p>
</li>
<li><p>LinkedList 不存在容量这个问题，也就不存在扩容之说，这是与 ArrayList 不同的，ArrayList 当容量不满足的话，需要进行扩容的。</p>
</li>
<li><p>LinkedList 是线程不同步的。</p>
</li>
<li><p>由于 LinkedList 实现 Deque 接口，因此 LinkedList 既可以当作双端队列使用，又可以当作队列或者栈，但是底层都是由双向链表实现。</p>
</li>
</ul>
<h1 id="六、LinkedList-与-ArrayList-异同"><a href="#六、LinkedList-与-ArrayList-异同" class="headerlink" title="六、LinkedList 与 ArrayList 异同"></a>六、LinkedList 与 ArrayList 异同</h1><h3 id="1、LinkedList-与-ArrayList-的区别"><a href="#1、LinkedList-与-ArrayList-的区别" class="headerlink" title="1、LinkedList 与 ArrayList 的区别"></a>1、LinkedList 与 ArrayList 的区别</h3><ul>
<li><p>LinkedList 是基于双向链表实现；而 ArrayList 是基于数组实现，可以理解为动态数组。</p>
</li>
<li><p>LinkedList 没有实现 RandomAccess 接口，不具有随机访问元素的功能，对于访问元素需要遍历整个列表，效率显然很低；而 ArrayList 实现了RandomAccess 接口，可以通过索引快速随机访问元素，效率高。</p>
</li>
<li><p>LinkedList 是基于双向链表实现的，在插入或删除元素时效率相对较高，只需要记录当前节点的前驱节点和后继节点；而 ArrayList 在插入或者删除元素时，需要移动数组里的元素，即复制数组。</p>
</li>
<li><p>LinkedList 不用预先分配内存空间，不存在容量问题；而 ArrayList 在创建数组时需要指定其容量，存在容量问题。当容量不足时，需要扩容，为原来的 1.5 倍，扩容是很消耗性能的，因此有可能的话在创建数组时预先指定其容量。</p>
</li>
</ul>
<h3 id="2、LinkedList-与-ArrayList-相同点"><a href="#2、LinkedList-与-ArrayList-相同点" class="headerlink" title="2、LinkedList 与 ArrayList 相同点"></a>2、LinkedList 与 ArrayList 相同点</h3><ul>
<li><p>允许存储所有元素，包括 null 元素；</p>
</li>
<li><p>线程不同步；</p>
</li>
<li><p>存储的元素允许重复。</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.jianshu.com/p/d5ec2ff72b33" target="_blank" rel="external">Java集合干货系列-（二）LinkedList源码解析</a>    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;LinkedList 底层实现基于&lt;strong&gt;双向链表&lt;/strong&gt;，除了可以当作链表使用外，LinkedList 
    
    </summary>
    
      <category term="Java" scheme="http://panzeyong.com/categories/Java/"/>
    
    
      <category term="Java 集合框架" scheme="http://panzeyong.com/tags/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架：ArrayList（JDK 8）</title>
    <link href="http://panzeyong.com/2017/11/07/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9AArrayList/"/>
    <id>http://panzeyong.com/2017/11/07/Java-集合框架：ArrayList/</id>
    <published>2017-11-07T00:43:33.000Z</published>
    <updated>2017-12-12T01:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>ArrayList 是<strong>数组队列</strong>，相当于<strong>动态数组</strong>，其底层结构是由<strong>数组</strong>实现。ArrayList 继承 AbstractList 抽象类，实现 List、RandomAccess、Clone、java.io.Serializable 接口。</p>
<ul>
<li><p>ArrayList 继承 AbstractList 抽象类，实现 List 接口。它是一个数组队列，提供了增删改查以及遍历等功能。</p>
</li>
<li><p>ArrayList 实现 RandomAccess 接口，提供快速随机访问功能。RandomAccess 接口被 List 实现主要用来支持快速随机访问，通过数组下标随机访问元素。</p>
</li>
<li><p>ArrayList 实现 Clone 接口，重写 Object <code>clone()</code> 方法可以克隆对象。</p>
</li>
<li><p>ArrayList 实现 java.io.Serializable 接口，可以进行序列化和反序列化，方便数据传输。</p>
</li>
</ul>
<p>ArrayList 允许添加所有元素，包括 null 元素。</p>
<p>与 Java 数组相比，ArrayList 实现容量动态增长。简单来说，当向 ArrayList 添加新元素时，会将 ArrayList 实际元素个数加 1（size + 1）与底层数组（elementData）的长度进行比较，如果大于底层数组长度时，则会自动进行扩容（newValue = oldValue + oldValue &gt;&gt; 1，即为原先的 1.5 倍），扩容是对原先数组复制到新数组，相当消耗性能。如果可能的话，提前预估数据规模，调用 ArrayList(init initialCapacity) 构造方法初始化，做到减少扩容，提高效率。</p>
<p>与 Vector 相比，ArrayList 是线程不安全，只能在单线程环境下工作；如果要在多线程环境下工作，则可以使用 <code>Collections.synchronizedList</code> 创建 List，返回线程安全 ArrayList 实例；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList(...));</div></pre></td></tr></table></figure>
<h2 id="二、ArrayList-继承关系图"><a href="#二、ArrayList-继承关系图" class="headerlink" title="二、ArrayList 继承关系图"></a>二、ArrayList 继承关系图</h2><p><img src="/images/java/collection/ArrayList.png" alt=""></p>
<h2 id="三、ArrayList-源码解析"><a href="#三、ArrayList-源码解析" class="headerlink" title="三、ArrayList 源码解析"></a>三、ArrayList 源码解析</h2><h3 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><p>ArrayList 提供三个构造函数，分别如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 用初始容量构造空列表</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span>  initialCapacity 列表初始容量</div><div class="line">* <span class="doctag">@throws</span> IllegalArgumentException 如果指定初始容量为负数，则抛出异常 </div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+ initialCapacity);</div><div class="line">        <span class="comment">// 创建数组（elementData 是 ArrayList 底层实现数组，用于存储 ArrayList 列表中所有元素）</span></div><div class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 构造空数组（默认初始容量 10）</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    </div><div class="line">    <span class="comment">// 把空数组赋值给 elementData（elementData 是 ArrayList 底层实现数组，用于存储 ArrayList 列表中所有元素）</span></div><div class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 构造指定集合元素列表</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> c 集合 c 中的元素复制到 ArrayList</div><div class="line"> * <span class="doctag">@throws</span> NullPointerException 如果指定集合为 null ，则抛出空指针</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="comment">// 集合 c 转换为数组赋值给数组 elementData</span></div><div class="line">    elementData = c.toArray();</div><div class="line">    size = elementData.length; <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">    <span class="comment">// 转换数组返回值可能不正确，如果是这样的话，则执行下面的语句</span></div><div class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">        elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上源码已经给出了详细的注释，这里就不再解释了。不过从第 3 个构造函数可以看出，对数组的复制是调用了 <code>Arrays.copyOf(elementData, size, Object[].class)</code> 方法，那么该方法具体是什么呢，先来看下它的源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</div><div class="line">    T[] copy = ((Object)newType == (Object)Object[].class) ? (T[]) <span class="keyword">new</span> Object[newLength] : (T[]) Array.newInstance(newType.getComponentType(), newLength);</div><div class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,Math.min(original.length, newLength));</div><div class="line">    <span class="keyword">return</span> copy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法采用泛型，<strong>T</strong> 是方法返回值数组类型，而 <strong>U</strong> 是原始数组类型；第 2 行代码是根据传入参数 <strong>newType</strong> 类型创建数组实例。真正对数组执行复制的是第 3 行代码，那么来看它的具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</div></pre></td></tr></table></figure>
<p>该方法是 native 方法，接收 5 个参数：</p>
<ul>
<li><p><strong>src</strong>：源数组；</p>
</li>
<li><p><strong>srcPos</strong>：源数组起始位置；</p>
</li>
<li><p><strong>dest</strong>：目标数组；</p>
</li>
<li><p><strong>destPos</strong>：目标数组起始位置；</p>
</li>
<li><p><strong>length</strong>：复制源数组元素个数。</p>
</li>
</ul>
<p>从指定的源数组复制指定位置的数组到目标数组指定的位置。</p>
<h3 id="2、增加元素"><a href="#2、增加元素" class="headerlink" title="2、增加元素"></a>2、增加元素</h3><p>ArrayList 提供多个添加元素的方法，既有添加单个元素也有添加整个集合，具体方法实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将指定的元素添加到 ArrayList 末尾</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> e 被添加到列表的元素</div><div class="line"> * <span class="doctag">@return</span> true </div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">     <span class="comment">// 检查内部数组 elementData 容量是否满足，不满足的话则扩容</span></div><div class="line">     ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">     elementData[size++] = e;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的主要功能是往列表的末尾添加元素，实现逻辑挺简单的，短短的 3 行代码，但是每行代码又包含着相应的逻辑，那么就来看下具体是怎么实现的。这里假设一开始创建 ArrayList 实例是调用无参构造函数创建的，也就是说 <strong>elementData</strong> 这个内部数组被赋值<strong>空数组</strong>。第 9 行代码是在添加元素之前对内部数组 elementData 容量进行检查，<strong>ensureCapacityInternal()</strong> 方法传入的参数是原先数组的长度加 1（size + 1），具体实现如下：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// 判断 elementData 是否为空数组，是的话执行 if 语句里的代码，取 DEFAULT_CAPACITY 与 minCapacity 的最大值作为最小容量</span></div><div class="line">    <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</div><div class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由以上可知，minCapacity 的值为 DEFAULT_CAPACITY，即默认容量 10。再来看 <strong>ensureExplicitCapacity(minCapacity)</strong> 的逻辑实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// 这个字段主要用于记录列表结构被修改的次数，所谓的列表结构可理解为列表长度的改变</span></div><div class="line">    modCount++;</div><div class="line">    </div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第 6 行代码的条件满足，执行 if 语句里的代码，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="comment">// 添加新元素之前 elementData 的容量（旧长度）</span></div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="comment">// 新容量为旧容量的 1.5 倍</span></div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加容量，以确保至少能容纳最小容量参数指定的元素数量。第 12 代码主要功能是实现对数组的复制，由以上对构造函数分析可知，真正实现对数组复制的函数是 <code>System.arraycopy(original, 0, copy, 0,Math.min(original.length, newLength));</code> 即将源数组里的元素拷贝到新数组，然后返回赋值给 elementData。可见，扩容是相当于耗性能的。</p>
<p>扩容完成后，就可以往数组添加元素。回到方法 <code>add(E)</code> 第 10 行代码，将要添加的新元素添加到底层数组 elementData 末尾。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  向列表中指定中位置添加指定的元素</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> index 指定元素被插入到列表的索引</div><div class="line"> * <span class="doctag">@param</span> element 被插入的元素</div><div class="line"> * <span class="doctag">@throws</span> IndexOutOfBoundsException 数组越界抛出异常</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查数组是否越界</span></div><div class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">        <span class="comment">// 检查内部数组 elementData 容量是否满足，不满足的话则扩容</span></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        <span class="comment">// 移动数组中元素，目的为了插入新元素</span></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</div><div class="line">        elementData[index] = element;</div><div class="line">        size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的主要功能是往列表指定位置添加新元素，实现逻辑与上一个方法有所不同。第 10 ~ 11 行代码检查是否数组是否越界；第 13 行代码检查容量是否满足，具体分析上面已经分析过；第 15 行代码实现对数组的复制，那么是如何复制的呢，具体分析见下图：</p>
<p><img src="/images/java/collection/add_by_index.png" alt=""></p>
<p>相信通过上图的讲解可以更好地理解。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 把集合中所有的元素添加到列表中，添加顺序与元素在集合中的顺序一致</div><div class="line"> * </div><div class="line"> * @param c 包含被添加到列表中的元素的集合</div><div class="line"> * @return true</div><div class="line"> * @throws NullPointerException 指定集合为 null 时抛出异常</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    Object[] a = c.toArray();</div><div class="line">    <span class="keyword">int</span> numNew = a.length;</div><div class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments</span></div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</div><div class="line">    size += numNew;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的功能是把集合中的所有元素添加到列表末尾，与 <strong>add(E)</strong> 方法的区别是前者是添加集合所包含的元素；而后者则添加单个元素，其它基本差不多，就不再作分析。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 把集合中所有的元素添加到列表指定的位置，添加顺序与元素在集合中的顺序一致</div><div class="line"> * <span class="doctag">@param</span> index 集合插入到列表的起始位置</div><div class="line"> * <span class="doctag">@param</span> c 包含被添加到列表中的元素的集合 </div><div class="line"> * <span class="doctag">@return</span> true </div><div class="line"> * <span class="doctag">@throws</span> IndexOutOfBoundsException 数组越界抛出异常</div><div class="line"> * <span class="doctag">@throws</span> NullPointerException 指定集合为 null 时抛出异常</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    </div><div class="line">    Object[] a = c.toArray();</div><div class="line">    <span class="keyword">int</span> numNew = a.length;</div><div class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> numMoved = size - index;</div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index, elementData, index + numNew, numMoved);</div><div class="line">        </div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</div><div class="line">    size += numNew;</div><div class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的功能是向列表指定位置插入多个新元素（集合中所有元素），那么在实现移动源数组元素与 <strong>add(int, E)</strong> 方法的实现基本相同，同样也通过图进行解析：</p>
<p><img src="/images/java/collection/add_collection_by_index.png" alt=""></p>
<h3 id="3、删除元素"><a href="#3、删除元素" class="headerlink" title="3、删除元素"></a>3、删除元素</h3><p>Arraylist 提供多个删除元素方法，既有通过索引删除元素，又有通过 Object 以及删除指定集合包含的元素，具体方法实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 删除列表指定位置的元素</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> 被删除元素索引</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">// 检查要删除元素索引是否在源数组范围内（数组是否越界）</span></div><div class="line">    rangeCheck(index);</div><div class="line">    </div><div class="line">    modCount++;</div><div class="line">    </div><div class="line">    <span class="comment">// 存储被删除元素作为返回值返回</span></div><div class="line">    E oldValue = elementData(index);</div><div class="line">    </div><div class="line">    <span class="comment">// 移动元素个数</span></div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 移动元素</span></div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的功能是通过索引删除列表指定位置的元素，源码中给出详细的注释，再结合下图加深对该方法的理解：</p>
<p><img src="/images/java/collection/remove_by_index.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line">                fastRemove(index);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                fastRemove(index);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从以上源码可以看出，不管 <strong>o</strong> 是否为 null，都需要遍历整个数组 elementData，看该元素是否存在于数组里，存在的话通过调用 <strong>fastRemove(int)</strong> 方法移除并返回 true；不存在的话则返回 false。那么方法 <strong>fastRemove(int)</strong> 是怎么移除元素的呢？具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</div><div class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">该方法的实现逻辑与 **remove(<span class="keyword">int</span>)** 差不多，具体分析看 **remove(<span class="keyword">int</span>)** 的图解。</div><div class="line"></div><div class="line">```java</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 从列表中删除指定集合中包含的所有元素</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">    Objects.requireNonNull(c);</div><div class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的功能是移除指定集合中包含的所有元素。第 5 行代码是检查集合 c 是否为空，第 6 行代码是批量移除元素，那么来看下具体是如何实现的？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</div><div class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</div><div class="line">                elementData[w++] = elementData[r];</div><div class="line">            &#125; </div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></div><div class="line">    <span class="comment">// even if c.contains() throws.</span></div><div class="line">        <span class="keyword">if</span> (r != size) &#123;</div><div class="line">            System.arraycopy(elementData, r, elementData, w, size - r);</div><div class="line">            w += size - r;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (w != size) &#123;</div><div class="line">            <span class="comment">// clear to let GC do its work</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</div><div class="line">                elementData[i] = <span class="keyword">null</span>;</div><div class="line">            modCount += size - w;</div><div class="line">            size = w;</div><div class="line">            modified = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> modified;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的功能是批量移除元素，实现逻辑也不是很复杂。大致是先遍历源数组 elementData 中元素是否被包含在集合 c 中，被包含的话直接跳过；不被包含的话则将元素复制另一个数组（目标数组），最后目标数组空出来的位置置 null，完成移除元素操作。下面通过图解加深对该方法的理解：</p>
<p><img src="/images/java/collection/batch_remove.png" alt=""></p>
<p>ArrayList 还提供 <strong>removeRange(int fromIndex, int toIndex)</strong> 方法，移除指定范围元素，实现思路与 <strong>batchRemove(Collection&lt;?&gt; c, boolean complement)</strong> 类似，具体分析参考该方法。</p>
<h3 id="4、修改元素"><a href="#4、修改元素" class="headerlink" title="4、修改元素"></a>4、修改元素</h3><p>在 ArrayList 提供增删改查的方法中，修改元素和查询元素方法实现逻辑算是最简单的了，那么怎么个简单法呢？来看下源码实现就知道了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    rangeCheck(index);</div><div class="line">    </div><div class="line">    E oldValue = elementData(index);</div><div class="line">    elementData[index] = element;</div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码上看，逻辑实现确实很简单。一开始检查要修改元素的索引是否越界（第 2 行代码）；接着保存被修改元素的原始值并作为返回值返回，最后修改元素。</p>
<h3 id="5、查询元素"><a href="#5、查询元素" class="headerlink" title="5、查询元素"></a>5、查询元素</h3><p>由于 ArrayList 实现 RandomAccess 接口，因此具有随机快速访问元素的功能，该方法的实现逻辑也很简单，具体看下面源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    rangeCheck(index);</div><div class="line">    <span class="keyword">return</span> elementData(index);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是对 ArrayList 源码的初步认识，有时间的话再研究其它，比如遍历、排序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;p&gt;ArrayList 是&lt;strong&gt;数组队列&lt;/strong&gt;，相当于&lt;strong&gt;动态数组&lt;/strong&gt;，其底层结
    
    </summary>
    
      <category term="Java" scheme="http://panzeyong.com/categories/Java/"/>
    
    
      <category term="Java 集合框架" scheme="http://panzeyong.com/tags/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Activity</title>
    <link href="http://panzeyong.com/2017/11/07/Activity/"/>
    <id>http://panzeyong.com/2017/11/07/Activity/</id>
    <published>2017-11-06T23:40:09.000Z</published>
    <updated>2017-11-06T23:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Activity 应用组件，是 Android 程序与用户交互的窗口。通常来说，Activity 呈现给用户的是充满整个窗口，但是也有其它方式，比如悬浮窗口（设置 <strong>windowIsFloating</strong>）或者嵌套在另一个 Activity 里面（<strong>ActivityGroup</strong>）。</p>
<h1 id="二、生命周期"><a href="#二、生命周期" class="headerlink" title="二、生命周期"></a>二、生命周期</h1><p>在 Android 系统中，Android 是由一个叫做任务栈进行管理的；简单来说，当创建新 Activity 时，该 Activity 会压入任务栈里，此时处于前台进程，之前的 Activity 位于新 Activity 下面，直到新 Activity 被 finish 时之前的 Actiivity 才会重新回到前台进程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;Activity 应用组件，是 Android 程序与用户交互的窗口。通常来说，Activity 呈现给用户的是充满整个窗口
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十三章 事件</title>
    <link href="http://panzeyong.com/2017/11/04/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://panzeyong.com/2017/11/04/第十三章-事件/</id>
    <published>2017-11-04T02:40:35.000Z</published>
    <updated>2017-12-05T11:47:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、事件流"><a href="#一、事件流" class="headerlink" title="一、事件流"></a>一、事件流</h1><p>事件流描述的是在页面上点击元素时，从页面中接收事件的顺序。对于事件流的概念有两种说发，一种是事件冒泡流（IE 团队），一种是事件捕获流（Netscape Communicator 团队）。</p>
<h3 id="1、事件冒泡"><a href="#1、事件冒泡" class="headerlink" title="1、事件冒泡"></a>1、事件冒泡</h3><p>IE 的 事件流叫做事件冒泡，即事件开始时由最具体的元素（元素中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。简单来说就是从下往上进行传播。以下面的 HTML 页面为例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Bubbling Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点击元素 &lt;div&gt; 后事件冒泡的过程如下图：</p>
<p><img src="/images/javascript/event/event_bubble.png" alt=""></p>
<p>注：IE5.5 及更早版本中的事件冒泡会跳过 &lt;html&gt; 元素（从 &t;body&gt;直接跳转到 document）。IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 window 对象。</p>
<h3 id="2、事件捕获"><a href="#2、事件捕获" class="headerlink" title="2、事件捕获"></a>2、事件捕获</h3><p>Netscape Communicator 的事件流叫做事件捕获，思想是不太具体的节点应该更早地接收到事件，而最具体的节点应该是最后接收到事件。仍以前面 HTML 页面为例子，点击元素 &lt;div&gt; 后事件捕获的过程如下图：</p>
<p><img src="/images/javascript/event/event_catch.png" alt=""></p>
<h3 id="3、DOM-事件流"><a href="#3、DOM-事件流" class="headerlink" title="3、DOM 事件流"></a>3、DOM 事件流</h3><p>“DOM2 级事件” 规定的事件流包括三个阶段：</p>
<ul>
<li><p>事件捕获阶段</p>
</li>
<li><p>处于目标阶段；</p>
</li>
<li><p>事件冒泡阶段。</p>
</li>
</ul>
<p>仍以上面 HTML 页面为例子，单击 &lt;div&gt; 元素事件触发顺序如下图：</p>
<p><img src="/images/javascript/event/event_stream.png" alt=""></p>
<h1 id="二、事件处理程序"><a href="#二、事件处理程序" class="headerlink" title="二、事件处理程序"></a>二、事件处理程序</h1><p>响应某个事件的函数就叫做事件处理程序（或事件侦听器）。</p>
<h3 id="1、HTML-事件处理程序"><a href="#1、HTML-事件处理程序" class="headerlink" title="1、HTML 事件处理程序"></a>1、HTML 事件处理程序</h3><p>某个元素支持的每种事件，都可以使用一个与相应事件处理程序同名的 HTML 特性来指定。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"Click me"</span> onclick=<span class="string">"alert('Clicked')"</span> /&gt;</div></pre></td></tr></table></figure>
<p>使用这种方式缺点：</p>
<ul>
<li><p>时差问题。用户可能会在 HTML 元素一出现在页面上就触发相应的事件，但当时的事件处理程序有可能尚不具备执行条件；</p>
</li>
<li><p>这样扩展事件处理程序的作用域链在不同浏览器中会导致不同结果；</p>
</li>
<li><p>HTML 与 JavaScript 代码紧密耦合。</p>
</li>
</ul>
<h3 id="2、DOM0-级事件处理程序"><a href="#2、DOM0-级事件处理程序" class="headerlink" title="2、DOM0 级事件处理程序"></a>2、DOM0 级事件处理程序</h3><p>通过 JavaScript 指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = <span class="built_in">document</span>.getElementById(<span class="string">"click"</span>);</div><div class="line">    click.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用这种方式的优点：</p>
<ul>
<li><p>简单；</p>
</li>
<li><p>具有跨浏览器的优势。</p>
</li>
</ul>
<h3 id="3、DOM2-级事件处理程序"><a href="#3、DOM2-级事件处理程序" class="headerlink" title="3、DOM2 级事件处理程序"></a>3、DOM2 级事件处理程序</h3><p>用于处理指定和删除事件处理程序的操作：<strong>addEventListener()</strong> 和 <strong>removeEventListener()</strong>。这两个方法都接受 3 个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后一个参数如果是 true，表示在捕获阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = <span class="built_in">document</span>.getElementById(<span class="string">"click"</span>);</div><div class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.id);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">click.addEventListener(<span class="string">"click"</span>, handler, <span class="literal">false</span>);</div><div class="line"></div><div class="line">click.removeEventListener(<span class="string">"click"</span>, handler, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h3 id="4、IE-事件处理程序"><a href="#4、IE-事件处理程序" class="headerlink" title="4、IE 事件处理程序"></a>4、IE 事件处理程序</h3><p>IE 实现了与 DOM 中类似的两个方法：<strong>attachEvent()</strong> 和 <strong>detachEvent()</strong>。这两个方法接受相同的两个参数：事件处理程序名称和事件处理程序函数，事件被添加到冒泡阶段。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = <span class="built_in">document</span>.getElementById(<span class="string">"click"</span>);</div><div class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.id);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">click.addachEvent(<span class="string">"onclick"</span>, handler);</div></pre></td></tr></table></figure>
<p>这两个方法的使用与 DOM0 级方法使用的区别在于事件处理程序的作用域：</p>
<ul>
<li><p>在使用 DOM0 级方法的情况下，事件处理程序会在其所属元素的作用域内运行；</p>
</li>
<li><p>在使用 <strong>attachEvent()</strong> 方法的情况下，事件处理程序会在全局作用域中运行，此时 this 等于 window。</p>
</li>
</ul>
<h3 id="5、跨浏览器的事件处理程序"><a href="#5、跨浏览器的事件处理程序" class="headerlink" title="5、跨浏览器的事件处理程序"></a>5、跨浏览器的事件处理程序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"addEventListener"</span>);</div><div class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.addachEvent) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"addachEvent"</span>);</div><div class="line">            element.addachEvent(<span class="string">"on"</span> + type, handler);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">"on"</span> + type] + handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">	removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">			element.removeEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</div><div class="line">			element.detachEvent(<span class="string">"on"</span> + type, handler);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="三、事件对象"><a href="#三、事件对象" class="headerlink" title="三、事件对象"></a>三、事件对象</h1><p>在触发 DOM 上的某个事件时，会产生一个事件对象 event，这个对象中包含着所有与事件有关的信息。包括导致事件的元素、事件的类型以及其他特定事件相关信息。</p>
<h3 id="1、DOM-中的事件对象"><a href="#1、DOM-中的事件对象" class="headerlink" title="1、DOM 中的事件对象"></a>1、DOM 中的事件对象</h3><p>DOM 事件对象 event 包含着相关的属性和方法，如下表格：</p>
<table><tr style="text-align: center"><td>属性/方法</td><td>类型</td><td>读/写</td><td>说明</td></tr><tr style="text-align: center"><td>bubbles</td><td>Boolean</td><td>只读</td><td>表示事件是否冒泡</td></tr><tr style="text-align: center"><td>cancelable</td><td>Boolean</td><td>只读</td><td>表明是否可以取消事件的默认行为</td></tr><tr style="text-align: center"><td>currentTarget</td><td>Element</td><td>只读</td><td>其事件处理程序当前正在处理事件的那个元素</td></tr><tr style="text-align: center"><td>defaultPrevented</td><td>Boolean</td><td>只读</td><td>为 true 表示已经调用了 preventDefault() （DOM3 级事件中新增）</td></tr><tr style="text-align: center"><td>detail</td><td>Integer</td><td>只读</td><td>与事件相关的细节信息</td></tr><tr style="text-align: center"><td>eventPhase</td><td>Integer</td><td>只读</td><td>调用事件处理程序的阶段：1 表示捕获阶段，2 表示 “处于目标”， 3 表示冒泡阶段</td></tr><tr style="text-align: center"><td>preventDefault()</td><td>Function</td><td>只读</td><td>取消事件的默认行为。如果是 cancelable 是 true，则可以使用这个方法</td></tr><tr style="text-align: center"><td>stopImmediate<br>Propagation()</td><td>Function</td><td>只读</td><td>取消事件的进一步捕获或冒泡，同时阻止任何事件处理程序被调用（DOM3 级事件中新增）</td></tr><tr style="text-align: center"><td>stopPropagation()</td><td>Function</td><td>只读/td&gt;</td><td>取消事件的进一步捕获或冒泡。如果 bubbles 为 true，则可以使用这个方法</td></tr><tr style="text-align: center"><td>target</td><td>Element</td><td>只读</td><td>事件的目标</td></tr><tr style="text-align: center"><td>trusted</td><td>Boolean</td><td>只读</td><td>为 true 表示事件时浏览器生产的。为 false 表示事件时由开发人员通过 JavaScript 创建的（DOM3 级事件新增）</td></tr><tr style="text-align: center"><td>type</td><td>String</td><td>只读</td><td>被触发的事件的类型</td></tr><tr style="text-align: center"><td>view</td><td>AbstractView</td><td>只读</td><td>与事件关联的抽象视图。等同于发送事件的 window 对象</td> </tr></table>

<h3 id="2、IE-中的事件对象"><a href="#2、IE-中的事件对象" class="headerlink" title="2、IE 中的事件对象"></a>2、IE 中的事件对象</h3><p>IE 的 event 对象同样也包含着与创建它的事件相关属性和方法，如下表：</p>
<table><tr><td>属性/方法</td><td>类型</td><td>读/写</td><td>说明</td></tr><tr><td>cancelBubble</td><td>Boolean</td><td>读/写</td><td>默认值为 false，但将其设置为 true 就可以取消事件冒泡（与 DOM 中的 stopPropagation() 方法的作用相同）</td></tr><tr><td>returnValue</td><td>Boolean</td><td>读/写</td><td>默认值为 true，当将其设置为 false 就可以取消事件的默认行为（与 DOM 中的 preventDefault() 方法的作用相同）</td></tr><tr><td>srcElement</td><td>Element</td><td>只读</td><td>事件的目标（与 DOM 中的 target 属性相同）</td></tr><tr><td>type</td><td>String</td><td>只读</td><td>被触发的事件类型</td></tr></table>

<h3 id="3、跨浏览器的事件对象"><a href="#3、跨浏览器的事件对象" class="headerlink" title="3、跨浏览器的事件对象"></a>3、跨浏览器的事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    priventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.priventDefault) &#123;</div><div class="line">            event.priventDefault();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            event.returnValue = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.stopPropagation) &#123;</div><div class="line">            event.stopPropagation();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            event.cancelBubble = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="四、事件类型"><a href="#四、事件类型" class="headerlink" title="四、事件类型"></a>四、事件类型</h1><p>DOM3 级事件规定了以下几类事件：</p>
<ul>
<li><p>UI（User Interface，用户界面）事件，当用户与页面上的元素交互时触发；</p>
</li>
<li><p>焦点事件，当元素获得或失去焦点时触发；</p>
</li>
<li><p>鼠标事件，当用户通过鼠标在页面上执行操作时触发；</p>
</li>
<li><p>滚轮事件，当使用鼠标滚轮（或类似设备）时触发；</p>
</li>
<li><p>文本事件，当在文档中输入文本时触发；</p>
</li>
<li><p>键盘事件，当用户通过键盘在页面上执行操作时触发；</p>
</li>
<li><p>合成事件，当为 IME（Input Method Editor，输入法编辑器）输入字符时触发；</p>
</li>
<li><p>变动（mutation）事件，当底层 DOM 结构发生变化时触发。</p>
</li>
</ul>
<h3 id="1、UI-事件"><a href="#1、UI-事件" class="headerlink" title="1、UI 事件"></a>1、UI 事件</h3><ul>
<li><p><strong>load</strong>：当页面完全加载后在 window 上触发，当所有框架都加载完毕时在框架集上触发，当图像加载完毕时在 &lt;img&gt; 元素上面触发，或者当嵌入内容加载完毕时在 &lt;object&gt; 元素上面触发。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line"> alert(<span class="string">"Loaded!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>unload</strong>：当页面完全卸载后在 window 上面触发，当所有框架都卸载后在框架集上面触发，或者当嵌入的内容卸载完毕后在 &lt;object&gt; 元素上面发。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"unload"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line"> alert(<span class="string">"Unloaded"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>abort</strong>：在用户停止下载过程时，如果嵌入的内容没有加载完，则在 &lt;object&gt; 元素上面触发。</p>
</li>
<li><p><strong>error</strong>：当发生 JavaScript 错误时在 window 上面触发，当无法加载图像时在 &lt;img&gt; 元素上面触发，当无法加载嵌入内容时在 &lt;object&gt; 元素上面触发，或者当有一或多个框架无法加载时在框架集上面触发。</p>
</li>
<li><p><strong>select</strong>：当用户选择文本框（&lt;input&gt; 或 &lt;texterea&gt;）中的一或多个字符时触发。</p>
</li>
<li><p><strong>resize</strong>：当窗口或框架的大小变化时在 window 或框架上面触发。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line"> alert(<span class="string">"Resized"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>scroll</strong>：当用户滚动带滚动条的元素中的内容时，在该元素上面触发。&lt;body&gt; 元素中包含所加载页面的滚动条。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(<span class="built_in">window</span>, <span class="string">"scroll"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line"> <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) &#123;</div><div class="line">  alert(<span class="built_in">document</span>.documentElement.scrollTop);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">  alert(<span class="built_in">document</span>.body.scrollTop);</div><div class="line"> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2、焦点事件"><a href="#2、焦点事件" class="headerlink" title="2、焦点事件"></a>2、焦点事件</h3><p>焦点事件会在页面元素获得或失去焦点时触发。利用这些事件并与 document.hasFeature() 方法及 document.activeElement 属性配合，可以知晓用户在页面上的行踪。有以下 6 个焦点事件：</p>
<ul>
<li><p><strong>blur</strong>：在元素失去焦点时触发。这个事件<strong>不会冒泡</strong>；所有浏览器都支持它。</p>
</li>
<li><p><strong>DOMFocusIn</strong>：在元素获得焦点时触发。这个事件与 HTML 事件 focus 等价，但它<strong>冒泡</strong>。只有 <strong>Opera支持这个事件</strong>。DOM3 级事件废弃了 DOMFocusIn，选择了 focusin。</p>
</li>
<li><p><strong>DOMFocusOut</strong>：在元素失去焦点时触发。这个事件是 HTML 事件 blur 的通用版。只有 <strong>Opera支持这个事件</strong>。DOM3 级事件废弃了 DOMFocusOut，选择了 focusout。</p>
</li>
<li><p><strong>focus</strong>：在元素获得焦点时触发。这个事件不会冒泡；所有浏览器都支持它。</p>
</li>
<li><p><strong>focusin</strong>：在元素获得焦点时触发。这个事件与 HTML 事件 focus 等价，但它<strong>冒泡</strong>。</p>
</li>
<li><p><strong>focusout</strong>：在元素失去焦点时触发。这个事件时 HTML 事件 blur 的通用版本。</p>
</li>
</ul>
<p>当焦点从页面中的一个元素移动到另一个元素，会依次触发下列事件：</p>
<ul>
<li><p>focusout 在失去焦点的元素上触发；</p>
</li>
<li><p>focusin 在获得焦点的元素上触发；</p>
</li>
<li><p>blur 在失去焦点的元素上触发；</p>
</li>
<li><p>DOMFocusOut 在失去焦点的元素上触发；</p>
</li>
<li><p>focus 子啊获得焦点的元素上触发；</p>
</li>
<li><p>DOMFocusIn 在获得焦点的元素上触发。</p>
</li>
</ul>
<h3 id="3、鼠标与滚轮事件"><a href="#3、鼠标与滚轮事件" class="headerlink" title="3、鼠标与滚轮事件"></a>3、鼠标与滚轮事件</h3><p>DOM3 级事件中定义了 9 个鼠标事件，如下：</p>
<ul>
<li><p><strong>click</strong>：在用户单击主鼠标按钮（一般是左边的按钮）或者按下回车键时触发。</p>
</li>
<li><p><strong>dblclick</strong>：在用户双击主鼠标按钮（一般是左边的按钮）时触发。</p>
</li>
<li><p><strong>mousedown</strong>：在用户按下了任意鼠标按钮时触发。不能通过键盘触发这个事件。</p>
</li>
<li><p><strong>mouseenter</strong>：在鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件<strong>不冒泡</strong>，而且在光标移动到后代元素上不会触发。</p>
</li>
<li><p><strong>mouseleave</strong>：在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。</p>
</li>
<li><p><strong>mousemove</strong>：当鼠标指针在元素内部移动时重复第触发。不能通过键盘触发这个事件。</p>
</li>
<li><p><strong>mouseout</strong>：在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发。又移入的另一个元素可能位于前一个元素的外部，也可能是这个元素的子元素。不能通过键盘触发这个事件。</p>
</li>
<li><p><strong>mouseover</strong>：在鼠标指针位于一个元素外部，然后用户将其首次移入另一个元素边界之内时触发。不能通过键盘触发这个事件。</p>
</li>
<li><p><strong>mouseup</strong>：在用户释放鼠标按钮时触发。不能通过键盘触发这个事件。</p>
</li>
</ul>
<p>事件触发顺序：</p>
<ul>
<li><p>mousedown</p>
</li>
<li><p>mouseup</p>
</li>
<li><p>click</p>
</li>
<li><p>mousedown</p>
</li>
<li><p>mouseup</p>
</li>
<li><p>click</p>
</li>
<li><p>dblclick</p>
</li>
</ul>
<p>相关细节如下：</p>
<ul>
<li><p><strong>客户区坐标位置</strong>：事件发生时鼠标指针子啊视口中的水平和垂直坐标。这些值中不包括页面滚动的距离，因此这个位置并不表示鼠标在页面上的位置。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line"> event = EventUtil.getEvent(event);</div><div class="line"> alert(<span class="string">"Client coordinates: "</span> + event.clientX + <span class="string">","</span> + event.clientY);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>页面坐标位置</strong>：表示鼠标光标在页面中的位置，因此坐标是从页面本身而非视口的左边和顶边计算的。在页面没有滚动的情况下，pageX 和 pageY 的值与 clientX 和 clientY 的值相等。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    event = EventUtil.getEvent(event);</div><div class="line">    alert(<span class="string">"Page coordinates: "</span> + event.pageX + <span class="string">","</span> + event.pageY);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>屏幕坐标位置</strong>：鼠标事件发生时鼠标指针相对于整个屏幕的坐标信息。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    event = EventUtil.getEvent(event);</div><div class="line">    alert(<span class="string">"Screen coordinates: "</span> + event.screenX + <span class="string">","</span> + event.screenY);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>修改键</strong>：DOM 规定了 4 个属性，表示这些修改键的状态：shiftKey、ctrlKey、altKey 和 metaKey。这些属性中包含的都是布尔值，如果相应的键被按下了，则值为 true，否则值为 false。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    event = EventUtil.getEvent(event);</div><div class="line">    <span class="keyword">var</span> keys = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (event.shiftKey) &#123;</div><div class="line">        keys.push(<span class="string">"shift"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (event.ctrlKey) &#123;</div><div class="line">        keys.push(<span class="string">"ctrl"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (event.altKey) &#123;</div><div class="line">        keys.push(<span class="string">"alt"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (event.metaKey) &#123;</div><div class="line">        keys.push(<span class="string">"meta"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    alert(<span class="string">"Keys: "</span> + keys.join(<span class="string">","</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>相关元素</strong>：DOM 通过 event 对象的 relatedTarget 属性提供了相关元素信息。这个属性只对 mouseover 和 mouseout 事件才包含值；对于其它事件，这个属性的值是 null。IE8 及之前版本不支持 relatedTarget 属性，但是提供了保存着同样信息的不同属性。在 mouseover 事件触发时，IE 的 fromElement 属性中保存了相关元素；在 mouseout 事件触发时，IE 的 toElement 属性中保存着相关元素。那么跨浏览器取得相关元素的方法实现如下：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    getRelatedTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.relatedTarget) &#123;</div><div class="line">            <span class="keyword">return</span> event.relatedTarget;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.toElement) &#123;</div><div class="line">            <span class="keyword">return</span> event.toElement;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.fromElement) &#123;</div><div class="line">            <span class="keyword">return</span> event.fromElement;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>鼠标按钮</strong>：对于 mousedown 和 mosueup 事件来说，则在其 event 对象存在一个 button 属性，表示按下或释放的按钮。DOM 的 button 属性可能有如下 3 个值：</p>
<ul>
<li><p>0 表示主鼠标按钮；（鼠标左键）</p>
</li>
<li><p>1 表示中间的鼠标按钮（鼠标滚轮按钮）；</p>
</li>
<li><p>2 表示次鼠标按钮。（鼠标右键）</p>
</li>
</ul>
<p>IE8 及之前版本也提供了 button 属性，但这个属性的值与 DOM 的 button 属性有很大差异。</p>
<ul>
<li><p>0：表示没有按下按钮。</p>
</li>
<li><p>1：表示按下了主鼠标按钮。</p>
</li>
<li><p>2：表示按下了次鼠标按钮。</p>
</li>
<li><p>3：表示同时按下主、次鼠标按钮。</p>
</li>
<li><p>4：表示按下了中间的鼠标按钮。</p>
</li>
<li><p>5：表示同时按下了主鼠标按钮和中间的鼠标按钮。</p>
</li>
<li><p>6：表示同时按下了次鼠标按钮和中间的鼠标按钮。</p>
</li>
<li><p>7：表示同时按下了三个鼠标按钮。</p>
<p> 跨浏览器鼠标按钮属性实现方法：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    getButton: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> event.button;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">switch</span>(event.button) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                </div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">                </div><div class="line">                <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>更多的事件信息</strong>：”DOM2级事件” 规范在 event 对象中还提供了 detail 属性，用于给出有关事件的更多信息。对于鼠标事件来说，detail 中包含了一个数值，表示在给定位置上发生了多少次单击。</p>
</li>
<li><p><strong>鼠标滚轮事件</strong></p>
</li>
<li><p><strong>触摸设备</strong></p>
</li>
<li><p><strong>无障碍性问题</strong></p>
</li>
</ul>
<h3 id="4、键盘与文本事件"><a href="#4、键盘与文本事件" class="headerlink" title="4、键盘与文本事件"></a>4、键盘与文本事件</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、事件流&quot;&gt;&lt;a href=&quot;#一、事件流&quot; class=&quot;headerlink&quot; title=&quot;一、事件流&quot;&gt;&lt;/a&gt;一、事件流&lt;/h1&gt;&lt;p&gt;事件流描述的是在页面上点击元素时，从页面中接收事件的顺序。对于事件流的概念有两种说发，一种是事件冒泡流（IE 团队）
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第十二章DOM2 和 DOM3</title>
    <link href="http://panzeyong.com/2017/10/17/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0DOM2-%E5%92%8C-DOM3/"/>
    <id>http://panzeyong.com/2017/10/17/第十二章DOM2-和-DOM3/</id>
    <published>2017-10-16T23:30:31.000Z</published>
    <updated>2017-10-31T11:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、DOM-发展史"><a href="#一、DOM-发展史" class="headerlink" title="一、DOM 发展史"></a>一、DOM 发展史</h1><h3 id="1、DOM-1：支持-XML-1-0"><a href="#1、DOM-1：支持-XML-1-0" class="headerlink" title="1、DOM 1：支持 XML 1.0"></a>1、DOM 1：支持 XML 1.0</h3><h3 id="2、DOM-2"><a href="#2、DOM-2" class="headerlink" title="2、DOM 2"></a>2、DOM 2</h3><ul>
<li><p>DOM 2 级核心（DOM Level 2 Core）：在 DOM 1 基础上构建，为节点添加了更多方法和属性。支持 XML 1.0 和命名空间。</p>
</li>
<li><p>DOM 2 级 HTML（DOM Level 2 HTML）：在 DOM 1 级基础上构建，添加了更多属性、方法和新接口。</p>
</li>
<li><p>DOM 2 级视图（DOM Level 2 Views）：为文档定义了基于样式信息的不同视图。</p>
</li>
<li><p>DOM 2 级样式（DOM Level 2 Style）：定义了如何以编程方式来访问和改变 CSS 样式信息。</p>
</li>
<li><p>DOM 2 级事件（DOM Level 2 Events）：说明如何使用事件与 DOM 文档交互。</p>
</li>
<li><p>DOM 2 级遍历和范围（DOM Level 2 Traversal and Range）：引入了遍历 DOM 文档和选择其特定部分的新接口。</p>
</li>
</ul>
<h3 id="3、DOM-3"><a href="#3、DOM-3" class="headerlink" title="3、DOM 3"></a>3、DOM 3</h3><ul>
<li><p>DOM 3 级核心（DOM Level 3 Core）</p>
</li>
<li><p>DOM 3 级加载与保存（DOM Level 3 Load and Save）</p>
</li>
<li><p>DOM 3 级验证（DOM Level 3 Validation）</p>
</li>
</ul>
<h1 id="二、DOM-变化"><a href="#二、DOM-变化" class="headerlink" title="二、DOM 变化"></a>二、DOM 变化</h1><h3 id="（一）、XML-命名空间变化"><a href="#（一）、XML-命名空间变化" class="headerlink" title="（一）、XML 命名空间变化"></a>（一）、XML 命名空间变化</h3><p>使用 xmlns 来指定命名空间特性</p>
<h3 id="（二）、Node-类型变化"><a href="#（二）、Node-类型变化" class="headerlink" title="（二）、Node 类型变化"></a>（二）、Node 类型变化</h3><h4 id="1、在-DOM2-级中，Node-类型包含下列特定于命名空间的属性"><a href="#1、在-DOM2-级中，Node-类型包含下列特定于命名空间的属性" class="headerlink" title="1、在 DOM2 级中，Node 类型包含下列特定于命名空间的属性"></a>1、在 DOM2 级中，Node 类型包含下列特定于命名空间的属性</h4><ul>
<li><p><strong>localName</strong>：不带命名空间前缀的节点名称。</p>
</li>
<li><p><strong>namespaceURI</strong>：命名空间 URI 或者（在未指定的情况下是）null.</p>
</li>
<li><p><strong>prefix</strong>：命名空间前缀或者（在未指定的情况下是）null。</p>
</li>
</ul>
<h4 id="2、DOM3"><a href="#2、DOM3" class="headerlink" title="2、DOM3"></a>2、DOM3</h4><ul>
<li><p><strong>isDefaultNamespace(namespaceURI)</strong>：在指定的 namespaceURI 是当前节点的默认命名空间的情况下返回 true；</p>
</li>
<li><p><strong>lookupNamespaceURI(prefix)</strong>：返回给定 prefix 的命名空间。</p>
</li>
<li><p><strong>lookupPrefix(namespaceURI)</strong>：返回给定 namespaceURI 的前缀。</p>
</li>
</ul>
<h3 id="三-、Document-类型的变化"><a href="#三-、Document-类型的变化" class="headerlink" title="(三)、Document 类型的变化"></a>(三)、Document 类型的变化</h3><ul>
<li><p><strong>createElementNS(namespaceURI, tagName)</strong>：使用给定的 tagName 创建一个属性命名空间 namespaceURI 新元素。</p>
</li>
<li><p><strong>createAttributeNS(namespaceURI, attributeName)</strong>：使用给定的 attributeName 创建一个属于命名空间 namespaceURI 的新特性。</p>
</li>
<li><p><strong>getElementsByTagNameNS(namespaceURI, tagName)</strong>：返回属于命名空间 namespaceURI 的 tagName 元素的 NodeList.</p>
</li>
</ul>
<h3 id="（四）、Element-类型的变化"><a href="#（四）、Element-类型的变化" class="headerlink" title="（四）、Element 类型的变化"></a>（四）、Element 类型的变化</h3><ul>
<li><p><strong>getAttributeNS(namespaceURI, localName)</strong>：取得属于命名空间 namespaceURI 且名为 localName 的特性。</p>
</li>
<li><p><strong>getAttributeNodeNS(namespaceURI, localName)</strong>：取得属于命名空间 namespaceURI 且名为 localName 的特性节点。</p>
</li>
<li><p><strong>getElementsByTagNameNS(namespaceURI, tagName)</strong>：返回属于命名空间 namespaceURI 的 tagName 元素的 NodeList。</p>
</li>
<li><p><strong>hasAttributeNS(namespaceURI, localName)</strong>：确定当前元素是否有一个名为  localName 的特性，而且该特性的命名空间是 namespaceURI。</p>
</li>
<li><p><strong>removeAttributeNS(namespaceURI, localName)</strong>：删除属于命名空间 namespaceURI 且名为 localName 的特性。</p>
</li>
<li><p><strong>setAttributeNS(namespaceURI, qualifiedName, value)</strong>：设置属于命名空间 namespaceURI 且名为 qualifiedName 的特性的值为 value。</p>
</li>
<li><p><strong>setAttributeNodeNS(attNode)</strong>：设置属于命名空间 namespaceURI 的特性节点。</p>
</li>
</ul>
<h3 id="（五）、NamedNodeMap-类型变化"><a href="#（五）、NamedNodeMap-类型变化" class="headerlink" title="（五）、NamedNodeMap 类型变化"></a>（五）、NamedNodeMap 类型变化</h3><ul>
<li><p><strong>getNamedItemNS(namespaceURI, localName)</strong>：取得属于命名空间 namespaceURI 且名为 localName 的项。</p>
</li>
<li><p><strong>removeNamedItemNS(namespaceURI, localName)</strong>：移除属于命名空间 namespaceURI 且名为 localName 的项。</p>
</li>
<li><p><strong>setNamedItemNS(node)</strong>：添加 node，这个节点已经事先指定了命名空间信息。</p>
</li>
</ul>
<h3 id="（六）、DocumentType-类型变化"><a href="#（六）、DocumentType-类型变化" class="headerlink" title="（六）、DocumentType 类型变化"></a>（六）、DocumentType 类型变化</h3><ul>
<li><p><strong>publicId、systemId</strong>：文档类型声明中的信息段。</p>
</li>
<li><p><strong>internalSubset</strong>：用于访问包含在文档类型声明中的额外定义。</p>
</li>
</ul>
<h3 id="（七）、Document-类型变化"><a href="#（七）、Document-类型变化" class="headerlink" title="（七）、Document 类型变化"></a>（七）、Document 类型变化</h3><ul>
<li><p><strong>importNode()</strong>：从一个文档中取得一个节点，然后将其导入到另外一个文档，使其成为这个文档结构的一部分。接收两个参数：要复制的节点和一个表示是否复制子节点的布尔值。</p>
</li>
<li><p><strong>document.implementation</strong> 新方法</p>
<ul>
<li><p><strong>createDocumentType()</strong>：创建新的 DocumentType 节点。接收 3 个参数：文档类型名称、publicId、systemId。（DOM 级核心）</p>
</li>
<li><p><strong>createDocument()</strong>：创建新文档。接收 3 个参数：文档元素中的 namespaceURI、文档元素的标签名、新文档的文档类型。（DOM 级核心）</p>
</li>
<li><p><strong>createHTMLDocument()</strong>：创建一个完整的 HTML 文档，包括 <html>、<head>、<title> 和 <body> 元素。接收一个参数：新创建文档的标题。返回新的 HTML 文档。（DOM 级 HTML ）。</body></title></head></html></p>
</li>
<li><p><strong>defaultView</strong>：保存着一个指针，指向拥有给定文档的窗口（或框架）。（DOM 级视图）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> parentWindow = <span class="built_in">document</span>.defaultView || <span class="built_in">document</span>.parentWindow;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="（八）、Node-类型的变化"><a href="#（八）、Node-类型的变化" class="headerlink" title="（八）、Node 类型的变化"></a>（八）、Node 类型的变化</h3><ul>
<li><p><strong>isSupported()</strong>：用于确定当前节点具有的能力。接收两个参数：特性名和特性版本号。</p>
</li>
<li><p><strong>isSameNode()</strong>：接收一个节点参数，并在传入节点与引用节点相同时返回 true。所谓相同，是指两个节点引用的是同一个对象。</p>
</li>
<li><p><strong>isEqualNode()</strong>：接收一个节点参数，并在传入节点与引用的节点相等时返回 true。所谓相等，指的是两个节点是相同的类型,具有相同的属性，而且它们的 attributes 和 childNodes 属性也相等。</p>
</li>
<li><p><strong>setUserData()</strong>：将数据指定给节点，接收 3 个参数：要设置的键、实际的数据（可以是任何数据）和处理函数。函数作用：在带有数据的节点被复制、删除、重命名或者引入一个文档时调用。接收 5 个参数：表示操作类型的数值（1 数据键、数据值、源节点和目标节点。在删除节点时，源节点是 null；除在复制节点时，目标节点均为 null。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">div.setUserData(<span class="string">"name"</span>, <span class="string">"Nicholas"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">operation,key, value, src, dest</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (operation == <span class="number">1</span>) &#123;</div><div class="line">        dest.setUserData(key, value, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>contentDocument</strong>:表示框架内容的文档对象。</li>
</ul>
<h1 id="三、DOM2-级样式"><a href="#三、DOM2-级样式" class="headerlink" title="三、DOM2 级样式"></a>三、DOM2 级样式</h1><h3 id="1、定义样式三种方法："><a href="#1、定义样式三种方法：" class="headerlink" title="1、定义样式三种方法："></a>1、定义样式三种方法：</h3><ul>
<li><p>通过 &lt;link/&gt; 元素包含外部样式表文件；</p>
</li>
<li><p>使用 &lt;style/&gt; 元素定义嵌入式样式；</p>
</li>
<li><p>使用 style 特性定义针对特定元素的样式。</p>
</li>
</ul>
<h3 id="2、style（CSSStyleDeclaration）对象属性和方法"><a href="#2、style（CSSStyleDeclaration）对象属性和方法" class="headerlink" title="2、style（CSSStyleDeclaration）对象属性和方法"></a>2、style（CSSStyleDeclaration）对象属性和方法</h3><ul>
<li><p><strong>cssText</strong>：可以访问到 style 特性中的 CSS 代码。</p>
</li>
<li><p><strong>length</strong>：元素设置 CSS 属性的数量。</p>
</li>
<li><p><strong>parentRule</strong>：表示 CSS 信息的 CSSRule 对象。</p>
<ul>
<li><p><strong>getPropertyCSSValue(propertyName)</strong>：返回包含给定值的 CSSValue 对象。</p>
</li>
<li><p><strong>CSSValue：cssText 和 cssValueType</strong>。cssText 表示属性值；cssValueType 表示类型值：0 表示继承值；1 表示基本的值；2 表示值列表；3 表示自定义的值。</p>
</li>
<li><p><strong>getPropertyPriority(propertyName)</strong>：如果给定的属性使用了 !important 设置，则返回 “important”；否则，返回空字符串。</p>
</li>
<li><p><strong>getPropertyValue(propertyName)</strong>：返回给定属性的字符串值。</p>
</li>
<li><p><strong>item(index)</strong>：返回给定位置的 CSS 属性的名称。</p>
</li>
<li><p><strong>removeProperty(propertyName)</strong>：从样式中删除给定属性。</p>
</li>
<li><p><strong>setProperty(propertyName, value, priority)</strong>：将给定属性设置为相应的值，并加上优先权标志（“important” 或者一个空字符串）</p>
</li>
<li><p><strong>document.defaultView</strong> 提供方法</p>
<ul>
<li><strong>getComputedStyle()</strong>：接收两个参数：取得技术样式的元素和一个伪元素字符串。返回 CSSStyleDeclaration 对象。IE 不支持该方法，与之类似的是 currentStyle 属性，用法类似。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sheet = <span class="built_in">document</span>.styleSheets[<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> rules = sheet.cssRules || sheet.rules;</div><div class="line"><span class="keyword">var</span> rule = rules[<span class="number">0</span>];</div><div class="line">alert(rule.cssText);</div><div class="line">alert(rule.parentRule);</div><div class="line">alert(rule.parentStyleSheet);</div><div class="line">alert(rule.selectorText);</div><div class="line">alert(rule.style.cssText);</div><div class="line">alert(rule.type);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3、操作样式表"><a href="#3、操作样式表" class="headerlink" title="3、操作样式表"></a>3、操作样式表</h3><p>CSSStyleSheet，表示样式表，继承 StyleSheet， document.styleSheets。CSSStyleSheet 对象属性是 sheet（IE 则是 styleSheet）。</p>
<ul>
<li><p>StyleSheet 接口继承属性</p>
<ul>
<li><p><strong>disabled</strong>：表示样式表是否被禁用；这个属性是可读/可写。true 表示禁用样式表。</p>
</li>
<li><p><strong>href</strong>：如果样式表是通过 <link> 包含的，则是样式表的 URL；否则，是 null。</p>
</li>
<li><p><strong>media</strong>：当前样式表支持的所有媒体类型的集合。（MediaList）</p>
</li>
<li><p><strong>ownerNode</strong>：指向拥有当前样式表的节点的指针。如果当前样式表是其他样式表通过 @import 导入的，则这个属性值为 null。IE 不支持这个属性。(HTMLLinkElement 和 HTMLStyleElement)</p>
</li>
<li><p><strong>parentStyleSheet</strong>：在当前样式表是通过 @import 导入的情况下，这是属性是一个指向导入它的样式表的指针。</p>
</li>
<li><p><strong>title：ownerNode</strong> 中 title 属性的值。</p>
</li>
<li><p><strong>type</strong>：表示样式表类型的字符串。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>CSSStyleSheet 支持属性</p>
<ul>
<li><p><strong>cssRules</strong>：样式表中包含的样式规则的集合。IE 不支持这个属性，但是有一个类似的属性 rules。类型是 CSSRuleList。</p>
</li>
<li><p><strong>ownerRule</strong>：如果样式表是通过 @import 导入的，这个属性就是一个指针，指向表示导入的规则；否则，值为 null。IE 不支持这个属性。</p>
</li>
<li><p><strong>deleteRule(index)</strong>：删除 cssRules 集合中指定位置的规则。IE 不支持这个方法，但是支持 removeRule() 方法。</p>
</li>
<li><p><strong>insertRule(index)</strong>：向 cssRules 集合中指定的位置插入 rule 字符串。IE 不支持这个方法，但是支持一个类似 addRule() 方法。</p>
</li>
</ul>
</li>
<li><p>CSS 规则</p>
<ul>
<li><p><strong>cssText</strong>：返回整条规则对应的文本。IE 不支持这个属性。</p>
</li>
<li><p><strong>parentRule</strong>：如果当前规则是导入的规则，这个属性引用的就是导入规则；否则，这个值为 null。IE 不支持这个属性。</p>
</li>
<li><p><strong>parentStyleSheet</strong>：当前规则所属的样式表。IE 不支持这个属性。</p>
</li>
<li><p><strong>selectorText</strong>：返回当前规则的选择符文本。只有 Opera 浏览器可读可写。</p>
</li>
<li><p><strong>style</strong>：一个 CSSStyleDeclaration 对象，可以通过它设置和取得规则中特定的样式值。</p>
</li>
<li><p><strong>type</strong>：表示规则类型的常量值。IE 不支持这个属性。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertRule</span>(<span class="params">sheet, selectorText, cssText, position</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sheet.insertRule) &#123;</div><div class="line">        sheet.insertRule(selectorText + <span class="string">"&#123;"</span> + cssText + <span class="string">"&#125;"</span>, position);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sheet.addRule) &#123;</div><div class="line">        sheet.addRule(selectorText, cssText, position);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteRule</span>(<span class="params">sheet, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sheet.deleteRule) &#123;</div><div class="line">        sheet.deleteRule(index);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sheet.removeRule) &#123;</div><div class="line">        sheet.removeRule(index);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、元素大小"><a href="#4、元素大小" class="headerlink" title="4、元素大小"></a>4、元素大小</h3><ul>
<li><p>偏移量</p>
<ul>
<li><p><strong>offsetHeight</strong>：元素在垂直方向上占用的空间大小，以像素计。包括元素的高度、（可见的）水平滚动条的高度、上边框的高度和下边框的高度。</p>
</li>
<li><p><strong>offsetWidth</strong>：元素在水平方向上占用的空间大小，以像素计。包括元素的宽度、（可见的）垂直滚动条的宽度、左边框宽度和右边框宽度。</p>
</li>
<li><p><strong>offsetLeft</strong>：元素的左外边框至包含元素的左内边框之间的像素距离。（类似 Android 中 marginLeft）</p>
</li>
<li><p><strong>offsetTop</strong>：元素的上外边框至包含元素的上内边框之间的像素距离。类似 Android 中 marginTop）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> actualLeft = element.offsetLeft;</div><div class="line">    <span class="keyword">var</span> current = element.offsetParent;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</div><div class="line">	    actualLeft += current.offsetLeft;</div><div class="line">	    current = current.offsetParent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> actualLeft;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> actualTop = element.offsetTop;</div><div class="line">    <span class="keyword">var</span> current = element.offsetParent;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</div><div class="line">        actualTop += current.offsetTop;</div><div class="line">        current = current.offsetParent;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> actualTop;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>客户区大小（内容 + 内边距）</p>
<ul>
<li><p><strong>clientWidth</strong>：元素内容区宽度加上左右内边距宽度。</p>
</li>
<li><p><strong>clientHeight</strong>：元素内容区高度加上上下内边距高度。</p>
</li>
</ul>
</li>
<li><p>滚动大小</p>
<ul>
<li><p><strong>scrollHeight</strong>：在没有滚动条的情况下，元素内容的总高度。</p>
</li>
<li><p><strong>scrollWidth</strong>：在没有滚动条的情况下，元素内容的总宽度。</p>
</li>
<li><p><strong>scrollLeft</strong>：被隐藏在内容区域左侧的像素数。</p>
</li>
<li><p><strong>scrollTop</strong>：被隐藏在内容区域上方的像素数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBoundingClientRect</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</div><div class="line">    <span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (element.getBoundingClientRect) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.offset != <span class="string">"number"</span>) &#123;</div><div class="line">            <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">            temp.style.cssText = <span class="string">"position:absolute;left:0;top:0;"</span></div><div class="line">            <span class="built_in">document</span>.body.appendChild(temp);</div><div class="line">            <span class="built_in">arguments</span>.callee.offset = -temp.getBoundingClientRect().top - scrollTop;</div><div class="line">            temp = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> rect = element.getBoundingClientRect();</div><div class="line">        <span class="keyword">var</span> offset = <span class="built_in">arguments</span>.callee.offset;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            left: rect.left + offset,</div><div class="line">            right: rect.right + offset,</div><div class="line">            top: rect.top + offset,</div><div class="line">            bottom: rect.bottom + offset</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> actualLeft = getElementLeft(element);</div><div class="line">        <span class="keyword">var</span> actualTop = getElementTop(element);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            left: actualLeft - scrollLeft,</div><div class="line">            right: actualLeft + element.offsetWidth - scrollLeft,</div><div class="line">            top: actualTop - scrollTop,</div><div class="line">            bottom: actualTop + element.offsetHeight - scrollTop</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="四、遍历"><a href="#四、遍历" class="headerlink" title="四、遍历"></a>四、遍历</h1><h3 id="NodeIterator"><a href="#NodeIterator" class="headerlink" title="NodeIterator"></a>NodeIterator</h3><ul>
<li><p><strong>document.createNodeIterator()</strong>：创建 NodeIterator 实例，接收 4 个参数：</p>
<ul>
<li><p><strong>root</strong>：想要作为搜索起点的树中的节点；</p>
</li>
<li><p><strong>whatToShow</strong>：表示要访问哪些节点的数字代码；whatToShow 参数是一个位掩码，以常量的形式在 NodeFilter 类型中定义，可以在 HTML 中使用的有：</p>
<ul>
<li><p>1、NodeFilter.SHOW_ALL：显示所有类型的节点。</p>
</li>
<li><p>2、NodeFilter.SHOW_TEXT：显示文本节点。</p>
</li>
<li><p>3、NodeFilter.SHOW_COMMENT：显示注释节点。</p>
</li>
<li><p>4、NodeFilter.SHOW_DOCUMENT：显示文档节点。</p>
</li>
<li><p>5、NodeFilter.SHOW_DOCUMENT_TYPE：显示文档类型。</p>
</li>
<li><p>6、NodeFilter.SHOW_ELEMENT：显示元素节点。</p>
</li>
</ul>
</li>
<li><p><strong>filter</strong>：是一个 NodeFilter 对象，或者一个表示应该接受还是拒绝某种特定节点的函数；可以通过该参数 filter 来指定自定义的 NodeFilter 对象；每个 NodeFilter 对象只有一个方法，即 acceptNode()，该方法有两个返回值：</p>
<ul>
<li><p>NodeFilter.FILTER_ACCEPT：应该访问给定的节点；</p>
</li>
<li><p>NodeFilter.FILTER_SKIP：不应该访问给定的节点。</p>
</li>
</ul>
</li>
<li><p><strong>entityReferenceExpansion</strong>：布尔值，表示是否要扩展实体引用。（HTML 页面不能扩展实体引用）</p>
</li>
</ul>
</li>
<li><p><strong>nextNode()</strong>：向前前进一步。</p>
</li>
<li><p><strong>previousNode()</strong>：向后后退一步。</p>
</li>
</ul>
<h3 id="TreeWalker-是-NodeIterator-的一个更高级的版本。"><a href="#TreeWalker-是-NodeIterator-的一个更高级的版本。" class="headerlink" title="TreeWalker 是 NodeIterator 的一个更高级的版本。"></a>TreeWalker 是 NodeIterator 的一个更高级的版本。</h3><ul>
<li><p><strong>nextNode()</strong>：向前前进一步。</p>
</li>
<li><p><strong>previousNode()</strong>：向后后退一步。</p>
</li>
<li><p><strong>parentNode()</strong>：遍历到当前节点的父节点。</p>
</li>
<li><p><strong>firstChild(</strong>)：遍历到当前节点的第一个子节点。</p>
</li>
<li><p><strong>lastChild()</strong>：遍历到当前节点的最后一个子节点。</p>
</li>
<li><p><strong>nextSibling()</strong>：遍历到当前节点的下一个同辈节点。</p>
</li>
<li><p><strong>previousSibling()</strong>：遍历到当前节点的上一个同辈节点。</p>
</li>
<li><p><strong>currentNode</strong>：便是任何遍历方法在上一次遍历中返回的节点。</p>
<p>创建 TreeWalk 对象使用 document.createTreeWalk()，接收 4 个参数，与 document.createNodeIterator() 方法类似。</p>
<ul>
<li><p>NodeFilter.FILTER_SKIP：跳过相应节点继续前进到子树中的下一个节点。</p>
</li>
<li><p>NodeFilter.FILTER_REJECT：跳过相应节点及该节点的整个子树。    </p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、DOM-发展史&quot;&gt;&lt;a href=&quot;#一、DOM-发展史&quot; class=&quot;headerlink&quot; title=&quot;一、DOM 发展史&quot;&gt;&lt;/a&gt;一、DOM 发展史&lt;/h1&gt;&lt;h3 id=&quot;1、DOM-1：支持-XML-1-0&quot;&gt;&lt;a href=&quot;#1、DOM-1
    
    </summary>
    
      <category term="JavaScript" scheme="http://panzeyong.com/categories/JavaScript/"/>
    
    
      <category term="《JavaScript 高级程序设计》学习笔记" scheme="http://panzeyong.com/tags/%E3%80%8AJavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 问题整理</title>
    <link href="http://panzeyong.com/2017/10/14/Java-%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://panzeyong.com/2017/10/14/Java-问题整理/</id>
    <published>2017-10-14T09:20:19.000Z</published>
    <updated>2017-11-20T00:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、为什么-Java-byte-类型取值范围是-128-127-？"><a href="#一、为什么-Java-byte-类型取值范围是-128-127-？" class="headerlink" title="一、为什么 Java byte 类型取值范围是 -128 ~ 127 ？"></a>一、为什么 Java byte 类型取值范围是 -128 ~ 127 ？</h1><p>要解决这个问题，必须先来弄清楚几个概念：机器数、真值、原码、反码和补码。</p>
<p><strong>机器数</strong>：数字在计算机中的二进制表示，带符号的，即有正负数之分。在计算机中用一个数的最高位表示符号位，0 表示正数，1 表示负数。例如：</p>
<p>十进制 +10，转换成二进制是 00001010；</p>
<p>如果是 -10，转换成二进制则是 10001010。</p>
<p><strong>真值</strong>：由于符号位的存在，机器数并不能表示真正的数值。比如上面带符号数 10001010，最高位 1 表示负数，其真值是 -10；而其形式值是 138（二进制 10001010 转化为十进制），明显两个值是不相等的。因此，将带符号位的机器数真正的数值称为机器数的真值。例如：</p>
<p>00001010 真值：10；</p>
<p>10001010 真值：-10。</p>
<p><strong>原码</strong>：机器数中最简单的一种表示形式，符号位为 0 表示正数；符号位为 1 表示负数；数值位即真值的绝对值。故原码表示又称为带符号位的绝对值表示。以 8 位二进制为例子：</p>
<p>10 的原码： 00001010</p>
<p>-10 的原码：10001010</p>
<p><strong>反码</strong>：反码通常来作为原码求补码或者补码求原码中间过渡。可以归纳为：</p>
<ul>
<li><p>正数的反码是其本身；</p>
</li>
<li><p>负数的反码是在原码基础上，符号位不变，各位取反。</p>
</li>
</ul>
<p>10 反码： 00001010</p>
<p>-10 反码：11110101</p>
<p><strong>补码</strong>：补码也是一种用二进制表示有符号数的方法。可归纳为下：</p>
<ul>
<li><p>正数的补码是其本身；</p>
</li>
<li><p>负数的补码是在原码基础上，符号位不变，各位取反，末位加 1（即在反码基础上加 1），也可以理解为负数的补码是其绝对值取反末位加 1。</p>
</li>
</ul>
<p>10 补码：00001010；</p>
<p>-10 补码：11110110。</p>
<p>理解了机器数、真值、原码、反码、补码这 5 个概念后，我们就可以来解答这个问题了。</p>
<p>二进制有原码、反码、补码这三种表示方法，但是在计算机内部二进制的表示方法最终是采用补码。（至于为何采用补码，自己 Google 。）</p>
<p>在 Java 中，数据类型 byte 占用的空间是 8 位，最高位是符号位。</p>
<ul>
<li><p>那么最大整数是 0111111，由于正数的补码是其本身，因此二进制 01111111 转换为十进制为 127；</p>
</li>
<li><p>由于有符号之分，其最小负数是 10000000（最大负整数 11111111，即 -1），负数的补码是在原码基础上，符号位不变，各位取反，末位加 1，而且我们又知道二进制是用补码表示，因此我们把计算补码的步骤反过来即可。即 10000000，减 1 得 011111111，各位取反 10000000。由于负数的补码是其绝对值取反加 1，那么 10000000 是最小负数的绝对值，转换成十进制为 128，最小负数是 -128。</p>
</li>
<li><p>因此，byte 的取值范围是 -128 ~ 127。</p>
</li>
</ul>
<p>注：本文主要是记录在复习 Java 知识点时所想到或遇到的问题，持续更新中。</p>
<h1 id="二、Java-中-与-equals-有何区别？"><a href="#二、Java-中-与-equals-有何区别？" class="headerlink" title="二、Java 中 == 与 equals 有何区别？"></a>二、Java 中 == 与 equals 有何区别？</h1><p><strong>==</strong> 是二元操作符，用于比较两个对象的<strong>内存地址</strong>是否相同，如果两个对象的内存地址相同的话，则返回 true；否则返回 false。基本数据类型（int、short、long、char、float、double、boolean、byte）和 复合数据类型。以下通过例子进一步说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsOperator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        String s1 = <span class="string">"Hello World"</span>;</div><div class="line">        String s2 = <span class="string">"Hello World"</span>;        </div><div class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">"Hello World"</span>);</div><div class="line">        </div><div class="line">        System.out.println(s1 == s2);</div><div class="line">        System.out.println(s1 == s3);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">false</span></div></pre></td></tr></table></figure>
<p><strong>equals()</strong> 是 Object 类中方法，默认实现是比较两个对象的内存地址，与 <strong>==</strong> 操作符的作用是一样。不管是 Java 提供的类，还是自己自定义的类，默认继承 Object，如果没有对 <strong>equals()</strong> 方法进行重写时，这时 <strong>equals()</strong> 的作用与操作符 <strong>==</strong> 是一样的；但是 Object 的子类大部分都会根据自己的需求对 <strong>equals()</strong> 方法进行重写，既可以比较两个对象的内存地址，也可以比较两个对象所包含的内容，比如 String、Integer 等。</p>
<p><strong>equals()</strong> 默认实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显可以看出，默认实现是比较两个对象的内存地址。官方文档也给出该方法的具体描述：</p>
<blockquote>
<p>equals 方法在非 null 对象引用上实现等价关系：</p>
<ul>
<li><p>自反性：对于任何非空引用值 x，x.equals(x) 应该返回 true。</p>
</li>
<li><p>对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才返回 true。</p>
</li>
<li><p>传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true 并且 y.equals(z) 也返回 true 时，那么 x.equals(z) 返回 true。</p>
</li>
<li><p>一致性：对于任何非空引用值 x 和 y，如果对象 equals 对象上比较的信息没有被修改，那么多次调用 x.equals(y) 一致返回 true 或者 一致 返回 false。</p>
</li>
<li><p>对于任何非空引用值 x，x.equals(null) 应该返回 false。</p>
</li>
</ul>
<p>Object 类的 equals 方法实现对象上最可能的等价关系;也就是说，对于任何非 null 的引用值 x 和 y，当且仅当 x 和 y 引用同一个对象（x == y 的值为 true）时，此方法返回 true。</p>
<p>注意：无论什么时候重写此方法，都必须重写 hasCode() 方法，以维护 hasCode() 方法一般的约定，该方法声明相等的对象必须具有相同的哈希码。</p>
</blockquote>
<p>那么来看下 String 类是如何重写 equals() 方法的，具体源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</div><div class="line">        String anotherString = (String)anObject;</div><div class="line">        <span class="keyword">int</span> n = value.length;</div><div class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</div><div class="line">            <span class="keyword">char</span> v1[] = value;</div><div class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">                </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第 2 ~ 4 行代码判断两个对象的内存地址是否相同，相同的话返回则返回 true；不同的话执行下面语句。第 5 ~ 20 行代码判断两个对象所包含的内容是否相同，相同的话则返回 true；否则返回 false。当以上两个条件都不满足时，则返回 false。</p>
<p>下面通过例子加深对该知识点的理解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsMethos</span> </span>&#123;</div><div class="line">    Integer n1 = <span class="keyword">new</span> Integer(<span class="number">47</span>);</div><div class="line">    Integer n2 = <span class="keyword">new</span> Integer(<span class="number">47</span>);</div><div class="line">    System.out.println(n1.equals(n2));</div><div class="line">    </div><div class="line">    Value v1 = <span class="keyword">new</span> Value();</div><div class="line">    Value v2 = <span class="keyword">new</span> Value();</div><div class="line">    v1.i = v2.i = <span class="number">100</span>;</div><div class="line">    System.out.println(v1.equals(v2));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">true</span>     <span class="comment">// Integer 类重写 equals() 方法，比较的对象所包含的内容 </span></div><div class="line"><span class="keyword">false</span>    <span class="comment">// 由于 Value 类是自己定义的，没有重写 equals() 方法，继承 Object 类 equals() 方法默认实现，比较的是两个对象的内存地址，这时与 **==** 操作符的作用一样。</span></div></pre></td></tr></table></figure>
<p>对于 <strong>euqals()</strong> 与 <strong>==</strong> 这知识点异同的比较就说到这里，想要继续更深层的了解就 Google 吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、为什么-Java-byte-类型取值范围是-128-127-？&quot;&gt;&lt;a href=&quot;#一、为什么-Java-byte-类型取值范围是-128-127-？&quot; class=&quot;headerlink&quot; title=&quot;一、为什么 Java byte 类型取值范围是 -1
    
    </summary>
    
      <category term="Java" scheme="http://panzeyong.com/categories/Java/"/>
    
    
      <category term="问题" scheme="http://panzeyong.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>第二章 一切都是对象</title>
    <link href="http://panzeyong.com/2017/10/11/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E5%AF%B9%E8%B1%A1/"/>
    <id>http://panzeyong.com/2017/10/11/第二章-一切都是对象/</id>
    <published>2017-10-11T13:48:07.000Z</published>
    <updated>2017-10-31T11:10:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、数据存储位置"><a href="#一、数据存储位置" class="headerlink" title="一、数据存储位置"></a>一、数据存储位置</h1><ol>
<li><p><strong>寄存器</strong>：最快的存储区，位于处理器内部。</p>
</li>
<li><p><strong>堆栈</strong>：位于通用 RAM（随机访问存储区）中，存储速度仅次于寄存器，主要用于存储对象引用。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放内存。有一点不足是 Java 系统必须知道存储在堆栈内的所有项的确切生命周期，方便堆栈指针上下移动。这一约束限制程序的灵活性。</p>
</li>
<li><p><strong>堆</strong>：一种通用的内存池（也位于 RAM 区），用于存放所有 Java 对象。不同于堆栈的好处是：编译器不需要知道存储的数据在堆里存活多长时间，显示提高了灵活性。但是也付出了代价，即用堆进行存储分配和清理可能比用堆栈进行存储分配需要更多的时间。 </p>
</li>
<li><p><strong>常量存储</strong>：常量值通常直接存储在程序代码内部（静态存储区）。</p>
</li>
<li><p><strong>非 RAM 存储</strong>：流对象（对象转化成字节流）和持久化对象（对象存放磁盘）。  </p>
</li>
</ol>
<h1 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h1><p>在 Java 中，每种基本数据类型都占一定的存储空间大小，而且不随平台的改变而改变，即在不同平台上每种数据类型所占的空间是相同。Java 提供 8 中基本数据类型，如下表：</p>
<table><tr align="center"><th>基本类型</th><th>大小（bits）</th><th>最小值</th><th>最大值</th><th>包装器类型</th></tr><tr align="center"><td>boolean</td><td>—</td><td>—</td><td>—</td><td>Boolean</td></tr><tr align="center"><td>byte</td><td>8</td><td>-128</td><td>+127</td><td>Byte</td></tr><br><tr align="center"><td>char</td><td>16</td><td>Unicode 0</td><td>Unicode 2<sup>16</sup> - 1</td><td>Character</td></tr><tr align="center"><td>short</td><td>16</td><td>-2<sup>15</sup></td><td>+2<sup>15</sup> - 1</td><td>Short</td></tr><tr align="center"><td>int</td><td>32</td><td>-2<sup>31</sup></td><td>+2<sup>31</sup> - 1</td><td>Integer</td></tr><tr align="center"><td>float</td><td>32</td><td>IEEE754</td><td>IEEE754</td><td>Float</td></tr><tr align="center"><td>long</td><td>64</td><td>-2<sup>63</sup></td><td>+2<sup>63</sup> - 1</td><td>Long</td></tr><tr align="center"><td>double</td><td>64</td><td>IEEE754</td><td>IEEE754</td><td>Double</td></tr></table>

<p>注：Javs SE5 的自动包装功能将自动地将基本类型转换为包装器类型。</p>
<p>字段（数据成员）会获取默认值，可以不初始化；</p>
<p>局部变量没有默认值，必须初始化，否则会报错。</p>
<p>方法的基本组成部分：名称、参数、返回值和方法体。</p>
<ul>
<li><p>名称：定义方法的名字。</p>
</li>
<li><p>参数：传给方法的信息的类型和名称。</p>
</li>
<li><p>返回值：在调用方法之后从方法返回的值。</p>
</li>
<li><p>方法体：方法所要执行的逻辑。</p>
</li>
</ul>
<p>方法名和参数列表合称为 “方法签名”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、数据存储位置&quot;&gt;&lt;a href=&quot;#一、数据存储位置&quot; class=&quot;headerlink&quot; title=&quot;一、数据存储位置&quot;&gt;&lt;/a&gt;一、数据存储位置&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;寄存器&lt;/strong&gt;：最快的存储区，位于处理器内部。&lt;
    
    </summary>
    
      <category term="Java" scheme="http://panzeyong.com/categories/Java/"/>
    
    
      <category term="《Java Thinking》学习笔记" scheme="http://panzeyong.com/tags/%E3%80%8AJava-Thinking%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第十一章 DOM 扩展</title>
    <link href="http://panzeyong.com/2017/09/15/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0-DOM-%E6%89%A9%E5%B1%95/"/>
    <id>http://panzeyong.com/2017/09/15/第十一章-DOM-扩展/</id>
    <published>2017-09-14T23:50:33.000Z</published>
    <updated>2017-09-16T00:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、选择符-API（Selectors-API）"><a href="#一、选择符-API（Selectors-API）" class="headerlink" title="一、选择符 API（Selectors API）"></a>一、选择符 API（Selectors API）</h2><p>选择符 API，简单地来说，就是根据 CSS 选择符选择与某个模式匹配的 DOM 元素。</p>
<h3 id="1、Selectors-API-1-核心方法"><a href="#1、Selectors-API-1-核心方法" class="headerlink" title="1、Selectors API 1 核心方法"></a>1、Selectors API 1 核心方法</h3><ul>
<li><p><strong>querySelector()</strong>：接收一个参数：CSS 选择符。返回与该模式匹配的第一元素，如果没有找到匹配的元素，返回 null。通过类型 Document 调用 <strong>querySelector()</strong> 方法时，会在文档元素的范围内查找匹配的元素；而通过 Element 类型调用 <strong>querySelector()</strong> 方法时，只会在该元素后代元素的范围内查找匹配的元素。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>querySelectorAll()</strong>：接收一个参数：CSS 选择符。返回的是所有匹配的元素，是一个 NodeList 实例。返回的值实际上是带有所有属性和方法的 NodeList，而其底层实现则类似于一组元素的快照，而非不断对文档进行搜索的动态查询。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2、Selector-API-2-方法"><a href="#2、Selector-API-2-方法" class="headerlink" title="2、Selector API 2 方法"></a>2、Selector API 2 方法</h3><p><strong>matchesSelector()</strong>：接收一个参数：CSS 选择符。如果调用元素与该选择符匹配，返回 true；否则返回 false。Selector API 2 w为 Element 类型新增的方法。</p>
<p>在使用该方法的同时要做到兼容不同浏览器，需要对该方法做处理，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchesSelector</span>(<span class="params">element, selector</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (element.matchesSelector) &#123;</div><div class="line">        <span class="keyword">return</span> element.matchesSelector(selector);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.msMatchesSelector) &#123;</div><div class="line">        <span class="keyword">return</span> element.msMatchesSelector(selector);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.mozMatchesSelector) &#123;</div><div class="line">        <span class="keyword">return</span> element.mozMatchesSelector(selector);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.webkitMatchesSelector) &#123;</div><div class="line">        <span class="keyword">return</span> element.webkitMatchesSelector(selector);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Not Supported."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二、元素遍历"><a href="#二、元素遍历" class="headerlink" title="二、元素遍历"></a>二、元素遍历</h2><p>对于元素间的空格，不同浏览器对空格的处理是不一样的。有的浏览器在对空格处理时则会返回文本节点，而有的不会。为了解决此现象，Element Traversal 为 DOM 元素新定义一组元素。</p>
<p>Element Traversal API 为 DOM 元素添加新属性：</p>
<ul>
<li><p><strong>childElementCount</strong>：返回子元素（不包括文本节点和注释）的个数。</p>
</li>
<li><p><strong>firstElementChild</strong>：指向第一个子元素；firstChild 的元素版。</p>
</li>
<li><p><strong>lastElementChild</strong>：指向最后一个子元素；lastChild 的元素版。</p>
</li>
<li><p><strong>previousElementSibling</strong>：指向前一个同辈元素；previousSibling 的元素版。</p>
</li>
<li><p><strong>nextElementSibling</strong>：指向后一个同辈元素；nextSibling 的元素版。</p>
</li>
</ul>
<h2 id="三、HTML5"><a href="#三、HTML5" class="headerlink" title="三、HTML5"></a>三、HTML5</h2><h3 id="1、方法"><a href="#1、方法" class="headerlink" title="1、方法"></a>1、方法</h3><ul>
<li><p><strong>getElementsByClassName()</strong>：接收一个参数：一个包含一或多个类名的字符串，返回带有指定类的所有元素的 NodeList。通过 document 对象及所有 HTML 元素调用该方法。在 document 对象上调用  <strong>getElementsByClassName()</strong> 始终会返回与类名匹配的所有元素，在元素上调用该方法就会返回后代元素中匹配的元素。(一个元素指定多个类名)</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"title content"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>hasFocus()</strong>：确定文档是否获得了焦点了。</p>
</li>
<li><p><strong>window.toStaticHTML()</strong>：接收一个参数，即一个 HTML 字符串；返回一个经过无害处理后的版本，即从源 HTML 中删除所有脚本节点和事件处理程序属性。</p>
</li>
<li><p><strong>insertAdjacentHTML()</strong>：接收两个参数：插入位置和要插入的文本。第一个参数必须是下列值之一：</p>
<ul>
<li><p><strong>“beforebegin”</strong>：在当前元素之前插入一个紧邻的同辈元素；</p>
</li>
<li><p><strong>“afterbegin”</strong>：在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素。</p>
</li>
<li><p><strong>“beforeend”</strong>：在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素；</p>
</li>
<li><p><strong>“afterend”</strong>：在当前元素之后插入一个紧邻的同辈元素。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>scrollIntoView()</strong>：传入参数 <strong>true</strong> 或者不传入任何参数表示窗口滚动之后会让调用元素的顶部与视口顶部尽可能平齐；传入 <strong>false</strong> 则表示调用元素会尽可能全部出现在视口中。</li>
</ul>
<h3 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h3><ul>
<li><p><strong>classList</strong>：所有 DOM 元素所具有的属性，而且该属性是新集合类型 DOMTokenList 实例，包含 length 属性，并具有以下方法：</p>
<ul>
<li><p><strong>item()</strong>：获取每个元素。</p>
</li>
<li><p><strong>add(value)</strong>：将给定的字符串值添加到列表中。如果值已经存在，就不添加了。</p>
</li>
<li><p><strong>contains(value)</strong>：表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。</p>
</li>
<li><p><strong>remove(value)</strong>：从列表中删除给定的字符串。</p>
</li>
<li><p><strong>toggle(value)</strong>：如果列表中已经存在给定的值，删除它；如果列表中没有给定的值，添加它。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title content user"</span>&gt;</span>JavaScript Practice<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> classList = p.classList;</div><div class="line">classList.remove(<span class="string">"title"</span>);    <span class="comment">// length：2</span></div><div class="line">classList.add(<span class="string">"content"</span>);     <span class="comment">// length：2</span></div><div class="line">classList.toggle(<span class="string">"toggle"</span>);   <span class="comment">// length：3</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>document.activeElement</strong>：始终引用 DOM 中当前获取焦点的元素。文档刚刚加载完成时，<strong>document.activeElement</strong> 中保存的是 document.body 元素的引用。文档加载期间，<strong>document.activeElement </strong>的值为 null。（焦点管理）</p>
</li>
<li><p><strong>document.readyState</strong>：表示文档是否已经加载完成。有两个值：loading（正在加载文档）和 complete（已经加载完文档）</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"complete"</span>) &#123;</div><div class="line">    alert(<span class="string">"Complete"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"Loading"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>document.compatMode</strong>：检测浏览器采用的模式（标准还是混杂）。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) &#123;</div><div class="line">    alert(<span class="string">"Standards mode"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"Quirks mode"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>document.head</strong>：引用文档的 \<head> 元素。</head></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.head ||<span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>document.charset</strong>：表示文档中实际使用的字符集，也可以用来指定新字符集。</p>
</li>
<li><p><strong>document.defaultCharset</strong>：表示根据默认浏览器及操作系统的设置。</p>
</li>
<li><p><strong>dataset</strong>：访问自定义属性（用 data- 作为前缀），是 DOMStringMap 的一个实例，也是一个名值而的映射。</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">data-appId</span>=<span class="string">"12345"</span> <span class="attr">data-username</span>=<span class="string">"panju"</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>);</div><div class="line">alert(<span class="string">"AppId : "</span> + div.dataset.appId);</div><div class="line">alert(<span class="string">"User Name : "</span> + div.dataset.username);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>innerHTML</strong>：在读模式下，innerHTML 属性返回与调用元素的所有子节点（包括元素、注释和文本节点）对应的 HTML 标记。在写模式下，innerHTML 会根据指定的值创建新的 DOM 树，然后用这个 DMO 树完全替换调用元素原先的所有子节点。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"bodys"</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title content user"</span>&gt;</span>JavaScript Practice<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">data-appId</span>=<span class="string">"12345"</span> <span class="attr">data-username</span>=<span class="string">"panju"</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ui"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读模式</span></div><div class="line">alert(<span class="built_in">document</span>.body.innerText);</div><div class="line"></div><div class="line"><span class="comment">// 写模式</span></div><div class="line"><span class="built_in">document</span>.body.innerText = <span class="string">"Hello DOM"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  注：并不是所有元素都支持 <strong>innerHTML</strong> 属性。不支持 <strong>innerHTML</strong> 的元素有：&lt;col&gt;、&lt;colgroup&gt;、&lt;frameset&gt;、&lt;head&gt;、&lt;html&gt;、&lt;style&gt;、&lt;table&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;tfoot&gt;、&lt;tr&gt;。</p>
<ul>
<li><strong>outerHTML</strong>：与 <strong>innerHTML</strong> 属性类似。区别在于读模式下，<strong>outerHTML</strong> 返回结果包括调用该属性的元素本身。</li>
</ul>
<h2 id="四、专有扩展"><a href="#四、专有扩展" class="headerlink" title="四、专有扩展"></a>四、专有扩展</h2><h3 id="1、4-种文档模式"><a href="#1、4-种文档模式" class="headerlink" title="1、4 种文档模式"></a>1、4 种文档模式</h3><ul>
<li><p><strong>IE5</strong>：以<strong>混杂模式</strong>渲染页面（IE5 的默认模式就是混杂模式）。IE8 及更高版本中的功能都无法使用。</p>
</li>
<li><p><strong>IE7</strong>：以 <em>*IE7 标准模式</em>渲染页面。IE8 及更高版本中的功能都无法使用。</p>
</li>
<li><p><strong>IE8</strong>：以 <strong>IE8 标准模式</strong>渲染页面。IE9 中的新功能无法使用。</p>
</li>
<li><p><strong>IE9</strong>：以 <strong>IE9 标准模式</strong>渲染页面。</p>
</li>
</ul>
<p>要设置浏览器文档类型，可以通过 HTTP 头部信息 <strong>X-UA-Compatible</strong> 或者通过标签 <strong>\<meta></strong> 来设置，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=IEVersion"</span> &gt;</div></pre></td></tr></table></figure>
<p>对于 IE 版本（IEVersion）的取值如下：</p>
<ul>
<li><p><strong>Edge</strong>：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于 IE8，始终保持以 IE8 标准模式渲染页面。对于 IE9，则以 IE9 标准模式渲染页面。</p>
</li>
<li><p><strong>EmulateIE9</strong>：如果有文档类型声明，则以 IE9 标准模式渲染页面，否则将文档模式设置为 IE5。</p>
</li>
<li><p><strong>EmulateIE8</strong>：如果有文档类型声明，则以 IE8 标准模式渲染页面，否则将文档模式设置为 IE5。</p>
</li>
<li><p><strong>EmulateIE7</strong>：如果有文档类型声明，则以 IE7 标准模式渲染页面，否则将文档模式设置为 IE5。</p>
</li>
<li><p><strong>9</strong>：强制以 IE9 标准模式渲染页面，忽略文档类型声明。</p>
</li>
<li><p><strong>8</strong>：强制以 IE8 标准模式渲染页面，忽略文档类型声明。</p>
</li>
<li><p><strong>7</strong>：强制以 IE7 标准模式渲染页面，忽略文档类型声明。</p>
</li>
<li><p><strong>5</strong>：强制以 IE5 标准模式渲染页面，忽略文档类型声明。</p>
</li>
</ul>
<h3 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h3><ul>
<li><p><strong>contains()</strong>：检测被测节点是不是参考节点的后代。接收一个参数：即要检测的后代节点。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> contains = <span class="built_in">document</span>.documentElement.contains(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>compareDocumentPosition()</strong>：确定节点之间的关系，返回一个表示该关系的位掩码。（DOM Level 3）</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 模仿 contains() 方法</span></div><div class="line"><span class="keyword">var</span> position = <span class="built_in">document</span>.documentElement.compareDocumentPosition(<span class="built_in">document</span>.body) &amp; <span class="number">16</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>scrollIntoViewIfNeeded(alignCenter)</strong>：只有当前元素在视口中不可见的情况下，才滚动浏览器窗口或容器元素，最终让它可见。参数 alignCenter 设置为 true 表示尽量将元素显示在视口中部（垂直方向）。（Safari 和 Chrome）</p>
</li>
<li><p><strong>scrollByLines(lineCount)</strong>：将元素的内容滚动指定的行高，参数 lineCount 可以为正值或者负值。（Safari 和 Chrome）</p>
</li>
<li><p><strong>scrollByPages()</strong>：将元素的内容滚动指定的页面高度，具体高度由元素的高度决定。（Safari 和 Chrome）</p>
</li>
</ul>
<h3 id="3、属性"><a href="#3、属性" class="headerlink" title="3、属性"></a>3、属性</h3><ul>
<li><p><strong>document.documentMode</strong>：检测文档模式</p>
</li>
<li><p><strong>children</strong>：只包含元素中同样还是元素的子节点，忽略空格。该属性是 HTMLCollection 的实例。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = ui.children.length;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>innerText</strong>：操作元素中包含的所有文本内容，包括子文档树中的文本。在读模式时，它会将子文档树中所有文本拼接起来；在写模式时，会将元素所有子节点删除，并插入包含文本值的文本子节点。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读模式</span></div><div class="line"><span class="keyword">var</span> innerText = <span class="built_in">document</span>.body.innerText;</div><div class="line"></div><div class="line"><span class="comment">// 写模式</span></div><div class="line"><span class="built_in">document</span>.body.innerText = <span class="string">"Hello JavaScript"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>textContent</strong>：作用与 <strong>innerText</strong> 类似，DOMLevel 3 规定的一个属性。</p>
</li>
<li><p><strong>outerText</strong>：作用与 <strong>innerText</strong> 基本类似。区别在于作用范围扩大到调用它的节点。</p>
</li>
</ul>
<h3 id="4、通用函数"><a href="#4、通用函数" class="headerlink" title="4、通用函数"></a>4、通用函数</h3><p>通用 contains() 函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">contains</span>(<span class="params">refNode, otherNode</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> refNode.contains == <span class="string">"function"</span> &amp;&amp; (!client.engine.webkit || client.engine.webkit &gt;= <span class="number">522</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> refNode.contains(otherNode);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> refNode.compareDocumentPosition == <span class="string">"function"</span>) &#123;</div><div class="line">        retrun !!(refNode.compareDocumentPosition(otherNode) &amp; <span class="number">16</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> node = otherNode.parentNode;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="keyword">if</span> (node === refNode) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                node = node.parentNode;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span> (node !== <span class="literal">null</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跨浏览器使用属性 <strong>innerText</strong> 还是 <strong>textContent</strong> 兼容函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> (<span class="keyword">typeof</span> element.textContent == <span class="string">"string"</span> ? element.textContent : element.innerText);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element, text</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> element.textContent == <span class="string">"string"</span>) &#123;</div><div class="line">		element.textContent = text;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		element.innerText = text;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是在学习 《JavaScript 高级程序设计》（第 3 版）这本书第十一章的学习笔记，主要把书中讲到的要点记录下来，方便自己查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、选择符-API（Selectors-API）&quot;&gt;&lt;a href=&quot;#一、选择符-API（Selectors-API）&quot; class=&quot;headerlink&quot; title=&quot;一、选择符 API（Selectors API）&quot;&gt;&lt;/a&gt;一、选择符 API（Sele
    
    </summary>
    
      <category term="JavaScript" scheme="http://panzeyong.com/categories/JavaScript/"/>
    
    
      <category term="《JavaScript 高级程序设计》学习笔记" scheme="http://panzeyong.com/tags/%E3%80%8AJavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第十章 DOM</title>
    <link href="http://panzeyong.com/2017/08/29/%E7%AC%AC%E5%8D%81%E7%AB%A0-DOM/"/>
    <id>http://panzeyong.com/2017/08/29/第十章-DOM/</id>
    <published>2017-08-28T23:26:29.000Z</published>
    <updated>2017-09-16T00:02:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、节点层次"><a href="#一、节点层次" class="headerlink" title="一、节点层次"></a>一、节点层次</h1><p>DOM（文档对象模型）将任何 HTML 或 XML 文档描绘成一个由多层节点构成的结构。节点类型总共有 12 种，每种节点类型分别表示文档中不同的信息及标记。</p>
<h3 id="1、Node-类型"><a href="#1、Node-类型" class="headerlink" title="1、Node 类型"></a>1、Node 类型</h3><p>在 JavaScript 中，Node 类型实现 Node 接口，并且作为 JavaScript 中所有节点类型的基类，因此所有节点类型都共享着相同的基本属性和方法。除了 IE 之外，在其它所有浏览器中都可以访问到 Node 类型。</p>
<h4 id="（1）、在-Node-类型中定义-12-个数值常量表示-12-种节点类型，如下："><a href="#（1）、在-Node-类型中定义-12-个数值常量表示-12-种节点类型，如下：" class="headerlink" title="（1）、在 Node 类型中定义 12 个数值常量表示 12 种节点类型，如下："></a>（1）、在 Node 类型中定义 12 个数值常量表示 12 种节点类型，如下：</h4><ul>
<li><p>Node.ELEMENT_NODE(1)</p>
</li>
<li><p>Node.ATTRIBUTE_NODE(2)</p>
</li>
<li><p>Node.TEXT_NODE(3)</p>
</li>
<li><p>Node.CDATA_SECTION_NODE(4)</p>
</li>
<li><p>Node.ENTITY_REFERENCE_NODE(5)</p>
</li>
<li><p>Node.ENTITY_NODE(6)</p>
</li>
<li><p>Node.PROCESSING_INSTRUCTION_NODE(7)</p>
</li>
<li><p>Node.COMMENT_NODE(8)</p>
</li>
<li><p>Node.DOCUMENT_NODE(9)</p>
</li>
<li><p>Node.DOCUMENT_TYPE_NODE(10)</p>
</li>
<li><p>Node.DOCUMENT_FRAGMENT_NODE(11)</p>
</li>
<li><p>Node.NOTATION_NODE(12)</p>
</li>
</ul>
<h4 id="（2）、属性"><a href="#（2）、属性" class="headerlink" title="（2）、属性"></a>（2）、属性</h4><ul>
<li><p><strong>nodeType</strong>：节点类型；</p>
</li>
<li><p><strong>nodeName</strong>：节点标签名；</p>
</li>
<li><p><strong>nodeValue</strong>：null 值。</p>
</li>
<li><p><strong>childNodes</strong>：一个节点可能有 0 个、1 个 或多个 child 节点，包括各种类型节点。保存在 NodeList 对象（NodeList 是一种类数组对象，用于保存一组有序的节点，可以通过位置来访问这些节点。NodeList 对象的独特之处在于，它实际上是基于 DOM 结构动态执行查询的结果，因此 DOM 结构的变化能够自动反映在 NodeList 对象中。）。</p>
</li>
<li><p><strong>parentNode</strong>：每个节点的父节点。</p>
</li>
<li><p><strong>previousSibling</strong>：childNodes 列表中节点之间的同胞节点。</p>
</li>
<li><p><strong>nextSiblign</strong>：childNodes 列表中节点之间的同胞节点。</p>
</li>
<li><p><strong>firstChild</strong>：childNodes 列表中第一个节点。</p>
</li>
<li><p><strong>lastChild</strong>：childNodes 列表中最后一个节点。</p>
</li>
<li><p><strong>ownerDocument</strong>：表示整个文档的文档节点。这种关系表示的是任何节点都属于它所在的文档，任何节点都不能同时存在于两个或更多文档中。</p>
</li>
</ul>
<h4 id="（3）、方法"><a href="#（3）、方法" class="headerlink" title="（3）、方法"></a>（3）、方法</h4><ul>
<li><p><strong>hasChildNodes()</strong>：当节点包含一或多个子节点时返回 true。</p>
</li>
<li><p><strong>appendChild()</strong>：在 childNodes 末尾添加新节点，返回新增的节点。</p>
</li>
<li><p><strong>insertBefore()</strong>：在 childNodes 指定位置插入节点，该方法接收两个参数：要插入的节点和作为参照的节点。</p>
</li>
<li><p><strong>replaceChild()</strong>：从文档树中移除要替换的节点，并返回该节点，同时要插入的节点占据其位置。该方法接收两个参数：插入的节点和替换的节点。</p>
</li>
<li><p><strong>removeChild()</strong>：移除节点。（移除的节点仍然为文档所有，但是在文档中已经没有了自己的位置。）</p>
</li>
<li><p><strong>cloneNode()</strong>：创建调用该方法的节点的一个完全相同的副本。接收一个布尔值：true 表示执行深复制，也就是复制整个节点及其整个子节点数；fasle 表示浅复制，即只复制节点本身。所有类型的方法都拥有该方法。（复制后返回的节点副本属于文档所有，但并没有为它指定父节点。）</p>
</li>
<li><p><strong>normalize()</strong>：合并相邻文本节点。所有类型的方法都拥有该方法。</p>
</li>
</ul>
<p>注：并不是所有类型的节点都有子节点，如果在不支持子节点调用以上方法，将会导致错误发生，所有在调用方法之前需要进行相应的检测，以免发生错误。</p>
<h3 id="2、Document-类型"><a href="#2、Document-类型" class="headerlink" title="2、Document 类型"></a>2、Document 类型</h3><p>HTMLDocument 继承 Document，document 对象是 HTMLDocument 的实例，同时也是 window 对象的一个属性。document 对象表示整个 HTML 页面。Document 节点具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>9</strong>；</p>
</li>
<li><p>nodeName 的值为 <strong>#document</strong>；</p>
</li>
<li><p>nodeValue 的值为 <strong>null</strong>；</p>
</li>
<li><p>parentNode 的值为 <strong>null</strong>；</p>
</li>
<li><p>ownerDocument 的值为 <strong>null</strong>；</p>
</li>
<li><p>其子节点可能是一个 DocumentType（最多一个）、Element（Element）、ProcessingInstrction 或 Comment。</p>
</li>
</ul>
<h4 id="（1）、属性"><a href="#（1）、属性" class="headerlink" title="（1）、属性"></a>（1）、属性</h4><ul>
<li><p><strong>documentElement</strong>：访问子节点，指向 HTML 页面中 <strong><html></html></strong> 元素。</p>
</li>
<li><p><strong>body</strong>：指向 <strong>&lt;body&gt;</strong> 元素。</p>
</li>
<li><p><strong>doctype</strong>：访问子节点 <strong>DocumentType</strong> 信息。</p>
</li>
<li><p><strong>title</strong>：显示在浏览器窗口的标题栏或者标签页上。</p>
</li>
<li><p><strong>URL</strong>：包含页面完整的 URL（即地址栏中显示 URL）。</p>
</li>
<li><p><strong>domain</strong>：只包含页面的域名，可设置。</p>
</li>
<li><p><strong>referrer</strong>：保存着链接到当前页面的那个页面的 URL。</p>
</li>
<li><p><strong>anchors</strong>：包含文档中所有带 <strong>name</strong> 特性的 <strong>&lt;a&gt;</strong> 元素，返回的结果是 HTMLCollection 对象。</p>
</li>
<li><p><strong>forms</strong>：包含文档中所有的 <strong>&lt;form&gt;</strong> 元素，返回的结果是 HTMLCollection 对象。</p>
</li>
<li><p><strong>images</strong>：包含文档中所有的 <strong>&lt;img&gt;</strong> 元素，返回的结果是 HTMLCollection 对象。</p>
</li>
<li><p><strong>links</strong>：包含文档中所有带 <strong>href</strong> 特性的 <strong>&lt;a&gt;</strong> 元素，返回的结果是 HTMLCollection。</p>
</li>
<li><p><strong>implementation</strong>：提供检测浏览器相应信息和功能的对象，提供方法 <strong>hasFeature()</strong>。</p>
</li>
</ul>
<h4 id="（2）、方法"><a href="#（2）、方法" class="headerlink" title="（2）、方法"></a>（2）、方法</h4><ul>
<li><p><strong>getElementById()</strong>：接收一个参数：要取得的元素的 ID。如果找到相应的元素则返回该元素；否则返回 null。</p>
</li>
<li><p><strong>getElementsByTagName()</strong>：接收一个参数：元素的标签名。返回零个或多个元素的 NodeList，该方法返回的对象是 <strong>HTMLCollection</strong>，可使用该对象提供的方法 <strong>item(index)</strong> 或 <strong>namedItem(name)</strong> 访问集合中的项。</p>
</li>
<li><p><strong>getElementsByName()</strong>：接收一个参数：name 特定。返回带有指定 name 特定的所有元素，即 HTMLCollection 对象。</p>
</li>
<li><p><strong>createElement()</strong>：创建新元素，接收一个参数：要创建元素的标签名。</p>
</li>
<li><p><strong>createTextNode()</strong>：创建文本节点，接收一个参数：要插入节点中的文本。</p>
</li>
<li><p><strong>createDocument()</strong>：创建注释节点。</p>
</li>
<li><p><strong>createCDataSection()</strong>：创建 CDATA 区域，只需为其传入节点的内容。</p>
</li>
<li><p><strong>createDocumentFragment()</strong>：创建文档片段。</p>
</li>
<li><p><strong>createAttribute()</strong>：创建新的特性节点，传入特性的名称。</p>
</li>
<li><p><strong>hasFeature</strong>：<strong>implmentation</strong> 对象提供的方法，接收两个参数：要检测的 DOM 功能的名称及版本号。</p>
</li>
<li><p><strong>write()</strong>：接收一个参数：写入到输出流的文本，原样写入；可以动态包含外部资源。</p>
</li>
<li><p><strong>writeln()</strong>：接收一个参数：写入到输出流的文本，在字符串的末尾添加一个换行符（\n）；可以动态包含外部资源。</p>
</li>
<li><p><strong>open()</strong>：打开网页的输出流。</p>
</li>
<li><p><strong>close()</strong>：关闭网页的输出流。</p>
</li>
</ul>
<h3 id="3、Element-类型"><a href="#3、Element-类型" class="headerlink" title="3、Element 类型"></a>3、Element 类型</h3><p>Element 类型用于表现 XML 或 HTML 元素，提供了对元素标签名、子节点及特性的访问。Element 节点具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>1</strong>；</p>
</li>
<li><p>nodeName 的值为元素的标签名（tagName）；</p>
</li>
<li><p>nodeValue 的值为 <strong>null</strong>；</p>
</li>
<li><p>parentNode 可能是 <strong>Document</strong> 或 <strong>Element</strong>；</p>
</li>
<li><p>其子节点可能是 Element、Text、Comment、ProcessingInstruction、CDATASection 或 EntityReference。</p>
</li>
</ul>
<h4 id="1、元素特性"><a href="#1、元素特性" class="headerlink" title="1、元素特性"></a>1、元素特性</h4><p>HTML 元素由 HTMLElement 类型表示，而 HTMLElement 类型继承 Element 并添加属性，而这些属性成为每个 HTML 元素存在特有标准特性。</p>
<ul>
<li><p><strong>id</strong>：元素在文档中的唯一标识符。</p>
</li>
<li><p><strong>title</strong>：有关元素的附加说明信息，一般通过工具提示条显示出来。</p>
</li>
<li><p><strong>lang</strong>：元素内容的语言代码，很少使用。</p>
</li>
<li><p><strong>dir</strong>：语言的方向，值为 “ltr” （左 -&gt; 右）或 “rtr” （右 -&gt; 左）。</p>
</li>
<li><p><strong>className</strong>：与元素的 class 特性对应，即为元素指定的 CSS 类。</p>
</li>
</ul>
<h4 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h4><ul>
<li><p><strong>attributes</strong>：Element 类型是使用 <strong>attributes</strong> 属性的唯一一个 DOM 节点类型。<strong>attributes</strong> 属性返回的是 <strong>NamedNodeMap</strong> 集合，因为元素的每一个特性都由一个 <strong>Attr</strong> 节点表示，每个节点都保存在 <strong>NamedNodeMap</strong> 对象中。NamedNodeMap 对象提供以下方法：</p>
<ul>
<li><p><strong>getNamedItem(name)</strong>：返回 nodeName 属性等于 name 的节点；</p>
</li>
<li><p><strong>removeNamedItem(name)</strong>：从列表中移除 nodeName 属性等于 name 的节点；</p>
</li>
<li><p><strong>setNamedItem(node)</strong>：向列表中添加节点，以节点的 nodeName 属性为索引；</p>
</li>
<li><p><strong>item(pos)</strong>：返回位于数字 pos 位置处的节点。</p>
</li>
</ul>
</li>
<li><p><strong>specified</strong>：true 表示设置相应特性；否则相反。</p>
</li>
</ul>
<h4 id="3、元素方法"><a href="#3、元素方法" class="headerlink" title="3、元素方法"></a>3、元素方法</h4><ul>
<li><p><strong>getAttribute()</strong>：获取元素标准特性，传入参数特性名；也可以获取自定义特性，自定义特性应该加上 <strong>data-</strong> 前缀以便验证。注意特性的名称是不区分大小写的。</p>
</li>
<li><p><strong>setAttribute()</strong>：设置特性。接收两个参数：要设置的特性名和值。</p>
</li>
<li><p><strong>removeAttribute()</strong>：彻底删除元素的特性。该方法不仅会清除特性的值，而且也会从元素中完全删除特性。</p>
</li>
</ul>
<h4 id="4、要点"><a href="#4、要点" class="headerlink" title="4、要点"></a>4、要点</h4><ul>
<li><p>任何元素的所有特性，也都可以通过 DOM 元素本身的属性来访问；只有公认的（标准）特性才会以属性的形式添加到 DOM 对象中，而自定义属性则不会，无法通过元素本身的属性来访问（IE 除外）。比如：<strong>div.id</strong> </p>
</li>
<li><p>调用元素方法 <strong>getAttribute()</strong> 获取特性的返回值与元素本身的属性访问的返回值不同的两类特殊特性：</p>
<ul>
<li><p>第一类特性是 <strong>style</strong>，用于通过 CSS 为元素指定样式。<strong>getAttribute()</strong> 访问的特性的返回值是 CSS 文本；而通过属性访问则返回一个对象。</p>
</li>
<li><p>第二类特性是 <strong>onClick</strong>，表示事件处理程序。<strong>getAttribute()</strong> 访问时返回相应代码的字符串；属性访问则返回 JavaScript 函数。</p>
</li>
</ul>
</li>
</ul>
<h3 id="3、Text-类型"><a href="#3、Text-类型" class="headerlink" title="3、Text 类型"></a>3、Text 类型</h3><p>文本节点由 Text 类型表示，包含的是可以照字面解释的纯文本内容。纯文本中可以包含转义后的 HTML 字符，但不能包含 HTML 代码。Text 节点具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>3</strong>；</p>
</li>
<li><p>nodeName 的值为 <strong>#text</strong>；</p>
</li>
<li><p>nodeValue 的值为节点所包含的文本；（data）</p>
</li>
<li><p>parentNode 是一个 Element；</p>
</li>
<li><p>不支持子节点。</p>
</li>
</ul>
<h4 id="元素方法"><a href="#元素方法" class="headerlink" title="元素方法"></a>元素方法</h4><ul>
<li><p><strong>appendData(text)</strong>：将 text 添加到节点的末尾；</p>
</li>
<li><p><strong>deleteData(offset, count)</strong>：从 offset 指定的位置开始删除 count 个字符。</p>
</li>
<li><p><strong>insertData(offset, text)</strong>：在 offset 指定的位置插入 text。</p>
</li>
<li><p><strong>replaceData(offset, count, text)</strong>：用 text 替换从 offset 指定的位置开始到 offset + count 为止处的文本。</p>
</li>
<li><p><strong>splitText(offset)</strong>：从 offset 指定的位置将当前文本节点分成两个文本节点。该方法返回新文本节点。</p>
</li>
<li><p><strong>substringData(offset, count)</strong>：提取从 offset 指定的位置开始到 offset+count 为止处的字符串。</p>
</li>
</ul>
<h3 id="5、Comment-类型"><a href="#5、Comment-类型" class="headerlink" title="5、Comment 类型"></a>5、Comment 类型</h3><p>在 DOM 中，注释是通过 Comment 类型来表示。Comment 类型 与 Text 类型继承相同的基类，因此 Comment 类型具有 <strong>splitText()</strong> 之外的所有字符串操作方法。Comment 节点具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>8</strong>；</p>
</li>
<li><p>nodeName 的值为 <strong>#comment</strong>；</p>
</li>
<li><p>nodeValue 的值是注释的内容；</p>
</li>
<li><p>parentNode 可能是 Document 或 Element；</p>
</li>
<li><p>不支持子节点。</p>
</li>
</ul>
<h3 id="6、CDATASection-类型"><a href="#6、CDATASection-类型" class="headerlink" title="6、CDATASection 类型"></a>6、CDATASection 类型</h3><p>CDATASection 类型只针对基于 XML 的文档，表示的是 CDATA 区域。CDATASection 类型继承自 Text 类型，因此具有 <strong>splitText()</strong> 之外的所有字符串操作方法。CDATASection 节点具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>4</strong>；</p>
</li>
<li><p>nodeName 的值为 <strong>“#cdata-section”</strong>；</p>
</li>
<li><p>nodeValue 的值是 CDATA 区域中的内容；</p>
</li>
<li><p>parentNode 可能是 Document 或 Element；</p>
</li>
<li><p>不支持子节点。</p>
</li>
</ul>
<h3 id="7、DocumentType-类型"><a href="#7、DocumentType-类型" class="headerlink" title="7、DocumentType 类型"></a>7、DocumentType 类型</h3><p>DocumentType 包含着与文档的 doctype 有关的所有信息，它具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>10</strong>；</p>
</li>
<li><p>nodeName 的值为 <strong>doctype</strong> 名称；</p>
</li>
<li><p>nodeValue 的值为 null；</p>
</li>
<li><p>parentNode 是 Document；</p>
</li>
<li><p>不支持子节点。</p>
</li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p><strong>name</strong>：表示文档类型的名称；</p>
</li>
<li><p><strong>entities</strong>：由文档类型描述的实体的 NamedNodeMap 对象；</p>
</li>
<li><p><strong>notations</strong>：由文档类型描述的符号的 NamedNodeMap 对象。</p>
</li>
</ul>
<p>在 DOM 1 级中，DocumentType 对象不支持动态创建，只能通过解析文档代码的方式来创建。</p>
<h3 id="8、DocumentFragment-类型"><a href="#8、DocumentFragment-类型" class="headerlink" title="8、DocumentFragment 类型"></a>8、DocumentFragment 类型</h3><p>在所有节点类型中，只有 DocumentFragment 类型在文档中没有对应的标记。DocumentFragment 可以比喻为一个 “仓库”，用来保存将来可能会添加到问文档中节点，当其本身是不被添加到文档中去的。DocumentFragment 节点具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>11</strong>；</p>
</li>
<li><p>nodeName 的值为 <strong>“#document-fragment”</strong>；</p>
</li>
<li><p>nodeValue 的值为 null；</p>
</li>
<li><p>parentNode 的值为 null；</p>
</li>
<li><p>子节点可以是 Element、ProcessingInstruction、Comment、Text、CDATASection 或 EntityReference。</p>
</li>
</ul>
<h3 id="9、Attr-类型"><a href="#9、Attr-类型" class="headerlink" title="9、Attr 类型"></a>9、Attr 类型</h3><p>在 DOM 中，Attr 类型用于表示元素特性，而特性就存在于元素 <strong>attributes</strong> 属性中的节点。特性节点具有以下特征：</p>
<ul>
<li><p>nodeType 的值为 <strong>2</strong>；</p>
</li>
<li><p>nodeName 的值是特性的名称；</p>
</li>
<li><p>nodeValue 的值是特性的值；</p>
</li>
<li><p>parentNode 的值为 null；</p>
</li>
<li><p>在 HTML 中不支持子节点；</p>
</li>
<li><p>在 XML 中子节点可以是 Text 或 EntityReference。</p>
</li>
</ul>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p><strong>name</strong>：特性名称；</p>
</li>
<li><p><strong>value</strong>：特性的值；</p>
</li>
<li><p><strong>specified</strong>：用来表示特性是否被指定，true 表示指定；反之相反。</p>
</li>
</ul>
<h1 id="二、-DOM-操作技术"><a href="#二、-DOM-操作技术" class="headerlink" title="二、 DOM 操作技术"></a>二、 DOM 操作技术</h1><h3 id="1、动态脚本"><a href="#1、动态脚本" class="headerlink" title="1、动态脚本"></a>1、动态脚本</h3><p>向 HTML 页面插入 JavaScript 脚本的方式有两种：通过 <strong>src</strong> 特性包含外部文件和直接通过 <strong>&lt;script&gt;</strong> 元素包含代码。</p>
<p>这里所说的动态脚本是指在页面加载时不存在，但是将来某一时刻通过修改 DOM 动态添加脚本。示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScriptString</span>(<span class="params">code</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">	script.type = <span class="string">"text/javascript"</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		script.appendChild(<span class="built_in">document</span>.createTextNode(code));</div><div class="line">	&#125; <span class="keyword">catch</span>(ex) &#123;</div><div class="line">		script.text = code;        <span class="comment">// 适配 IE 浏览器</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">document</span>.body.appendChild(script);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：IE 会将 <strong>&lt;script&gt;</strong> 元素认为是一个特殊元素，不允许 DOM 访问其子节点。但是可以通过 <strong>&lt;script&gt;</strong> 元素 <strong>text</strong> 指定 JavaScript 代码。</p>
<h3 id="2、动态样式"><a href="#2、动态样式" class="headerlink" title="2、动态样式"></a>2、动态样式</h3><p>HTML 页面包含 CSS 样式的方式有两种：通过 <strong>&lt;link&gt;</strong> 元素包含外部文件和直接通过 <strong>&lt;style&gt;</strong> 元素指定嵌入的样式，</p>
<p>这里所说的动态样式是指在页面刚加载时不存在的样式；而是在页面加载完成后动态添加到页面中。示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">css</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</div><div class="line">    style.type = <span class="string">"text/css"</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</div><div class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">        style.styleSheet.cssText = css;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</div><div class="line">     head.appendChild(style);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：IE 会将 <strong>&lt;style&gt;</strong> 元素认为是一个特殊元素，不允许 DOM 访问其子节点。但是可以访问元素 <strong>&lt;style&gt;</strong> 的属性 <strong>styleSheet</strong>，同时该属性又有 <strong>cssText</strong> 属性，可以接受 CSS 代码。</p>
<h3 id="3、操作表格"><a href="#3、操作表格" class="headerlink" title="3、操作表格"></a>3、操作表格</h3><p><strong>&lt;table&gt;</strong> 元素在 HTML 中相对复杂些，要创建一个表格，会涉及到表格头、表格行、单元格等。HTML DOM 除了提供对应标签外，还为相应的标签提供属性和方法。</p>
<h4 id="（1）-lt-table-gt-元素添加的属性和方法"><a href="#（1）-lt-table-gt-元素添加的属性和方法" class="headerlink" title="（1）&lt;table&gt; 元素添加的属性和方法"></a>（1）<strong>&lt;table&gt;</strong> 元素添加的属性和方法</h4><ul>
<li><p><strong>caption</strong>：保存着对 <strong>&lt;caption&gt;</strong> 元素（如果有）的指针。</p>
</li>
<li><p><strong>tBodies</strong>：是一个 <strong>&lt;tbody&gt;</strong> 元素的 HTMLCollection。</p>
</li>
<li><p><strong>tFoot</strong>：保存着对 <strong>&lt;tfoot&gt;</strong> 元素（如果有）的指针。</p>
</li>
<li><p><strong>tHead</strong>：保存着对 <strong>&lt;thead&gt;</strong> 元素（如果有）的指针。</p>
</li>
<li><p><strong>rows</strong>：是一个表格中所有行的 HTMLCollection。</p>
</li>
<li><p><strong>createTHead()</strong>：创建 <strong>&lt;thead&gt;</strong> 元素，将其放到表格中，返回引用。</p>
</li>
<li><p><strong>createTFoot()</strong>：创建 <strong>&lt;tfoot&gt;</strong> 元素，将其放到表格中，返回引用。</p>
</li>
<li><p><strong>createCaption()</strong>：创建 <strong>&lt;caption&gt;</strong> 元素，将其放到表格中，返回引用。</p>
</li>
<li><p><strong>deleteTHead()</strong>：删除 <strong>&lt;thead&gt;</strong> 元素。</p>
</li>
<li><p><strong>deleteTFoot()</strong>：删除 <strong>&lt;tfoot&gt;</strong> 元素。</p>
</li>
<li><p><strong>deleteCaption()</strong>：删除 <strong>&lt;caption&gt;</strong> 元素。</p>
</li>
<li><p><strong>deleteRow(pos)</strong>：删除指定位置的行。</p>
</li>
<li><p><strong>insertRow(pos)</strong>：向 rows 集合中的指定位置插入一行。</p>
</li>
</ul>
<h4 id="（2）-lt-tbody-gt-元素添加的属性和方法"><a href="#（2）-lt-tbody-gt-元素添加的属性和方法" class="headerlink" title="（2）&lt;tbody&gt; 元素添加的属性和方法"></a>（2）<strong>&lt;tbody&gt;</strong> 元素添加的属性和方法</h4><ul>
<li><p><strong>rows</strong>：保存着 <strong>&lt;tbody&gt;</strong> 元素中行的 HTMLCollection。</p>
</li>
<li><p><strong>deleteRow(pos)</strong>：删除指定位置。</p>
</li>
<li><p><strong>insertRow(pos)</strong>：向 rows 集合中的指定位置插入一行，返回对新插入行的引用。</p>
</li>
</ul>
<h4 id="（3）-lt-tr-gt-元素添加的属性和方法"><a href="#（3）-lt-tr-gt-元素添加的属性和方法" class="headerlink" title="（3）&lt;tr&gt; 元素添加的属性和方法"></a>（3）<strong>&lt;tr&gt;</strong> 元素添加的属性和方法</h4><ul>
<li><p><strong>cells</strong>：保存着对 <strong>&lt;tr&gt;</strong> 元素中单元格的 HTMLCollection。</p>
</li>
<li><p><strong>deleteCell(pos)</strong>：删除指定位置的单元格。</p>
</li>
<li><p><strong>insertCell(pos)</strong>：向 cells 集合中的指定位置插入一个单元格，返回对新插入单元格的引用。</p>
</li>
</ul>
<p>示例代码如下：</p>
<pre><code class="javascript"><span class="comment">// 创建表格 table</span>
    <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">"table"</span>);
    table.border = <span class="number">1</span>;
    table.width = <span class="string">"100%"</span>;

    <span class="comment">// 创建 tbody</span>
    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.createElement(<span class="string">"tbody"</span>);
    table.appendChild(tbody);

    <span class="comment">// 创建第一行</span>
    tbody.insertRow(<span class="number">0</span>);
    tbody.rows[<span class="number">0</span>].insertCell(<span class="number">0</span>);
    tbody.rows[<span class="number">0</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Cell 1,1"</span>));
    tbody.rows[<span class="number">0</span>].insertCell(<span class="number">1</span>);
    tbody.rows[<span class="number">0</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Cell 2,1"</span>));

    <span class="comment">// 创建第二行</span>
    tbody.insertRow(<span class="number">1</span>);
    tbody.rows[<span class="number">1</span>].insertCell(<span class="number">0</span>);
    tbody.rows[<span class="number">1</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Cell 1,2"</span>));
    tbody.rows[<span class="number">1</span>].insertCell(<span class="number">1</span>);
    tbody.rows[<span class="number">1</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Cell 2,2"</span>));

    <span class="built_in">document</span>.body.appendChild(table);
</code></pre>
<h4 id="4-NodeList"><a href="#4-NodeList" class="headerlink" title="(4) NodeList"></a>(4) NodeList</h4><p>NodeList、NamedNodeMap 和 HTMLCollection 这三个集合是 “动态的”，即每当文档结构发生变化时（比如添加元素之类），集合都会得到更新。</p>
<p>以上是在学习 《JavaScript 高级程序设计》（第 3 版）这本书第十章的学习笔记，主要把书中讲到的要点记录下来，方便自己查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、节点层次&quot;&gt;&lt;a href=&quot;#一、节点层次&quot; class=&quot;headerlink&quot; title=&quot;一、节点层次&quot;&gt;&lt;/a&gt;一、节点层次&lt;/h1&gt;&lt;p&gt;DOM（文档对象模型）将任何 HTML 或 XML 文档描绘成一个由多层节点构成的结构。节点类型总共有 12
    
    </summary>
    
      <category term="JavaScript" scheme="http://panzeyong.com/categories/JavaScript/"/>
    
    
      <category term="《JavaScript 高级程序设计》学习笔记" scheme="http://panzeyong.com/tags/%E3%80%8AJavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 学习笔记（一）：开发环境搭建</title>
    <link href="http://panzeyong.com/2017/08/19/Kotlin-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://panzeyong.com/2017/08/19/Kotlin-开发环境搭建/</id>
    <published>2017-08-19T08:11:20.000Z</published>
    <updated>2017-08-19T08:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Kotlin-语言介绍"><a href="#一、Kotlin-语言介绍" class="headerlink" title="一、Kotlin 语言介绍"></a>一、Kotlin 语言介绍</h1><p>Kotlin 是一种基于 JVM 新编程语言，由 JetBrains 开发。Kotlin 不仅可以编译成 Java 字节码，而且也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。（来源：百度百科）</p>
<p>在应用上，Kotlin 可以用来开发服务器、Android 以及 JavaScript。</p>
<p>在 2017 年 Google I/O 大会上，官方宣布 Kotlin 正式成为 Android 开发语言。</p>
<p>学习一门新语言，首先要做的第一件事就是搭建开发环境。所谓工欲善其事，必先利其器。</p>
<h2 id="二、用命令行编译器创建-Hello-World-程序（链接）"><a href="#二、用命令行编译器创建-Hello-World-程序（链接）" class="headerlink" title="二、用命令行编译器创建 Hello World 程序（链接）"></a>二、用命令行编译器创建 Hello World 程序（<a href="https://kotlinlang.org/docs/tutorials/command-line.html" target="_blank" rel="external">链接</a>）</h2><h3 id="1、安装方式"><a href="#1、安装方式" class="headerlink" title="1、安装方式"></a>1、安装方式</h3><h4 id="（1）、手动安装"><a href="#（1）、手动安装" class="headerlink" title="（1）、手动安装"></a>（1）、手动安装</h4><ul>
<li><p>下载编译器：kotlin 编译器最新版本是 1.1.3-2，可以从 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.1.3-2" target="_blank" rel="external">GitHub Releases</a> 下载。</p>
</li>
<li><p>将下载好的 kotlin 编译器解压到指定目录，然后将 <strong>bin</strong> 目录添加到系统环境变量中。不同平台添加系统环境变量有所不同，下面介绍下 Mac、Linux 平台，至于 Windows 平台的设置 google 吧。</p>
<ul>
<li><p>Linux：以 Ubuntu 为例，Ubuntu 下有多个文件可以配置环境变量（ps：自己 google），这里我选择文件 <strong>~/.bashrc</strong> 来配置。在终端打开文件 <strong>~/.bashrc</strong>，命令为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.bashrc</div></pre></td></tr></table></figure>
<p>然后添加环境变量，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> KOTLIN_HOME =/home/panju/Install/kotlinc</div><div class="line">PATH=$&#123;PATH&#125;:$&#123;KOTLIN_HOME&#125;/bin</div><div class="line">export KOTLIN_HOME PATH</div></pre></td></tr></table></figure>
<p>最后保存退出，并执行命令 <strong>source ~/.bashrc</strong> 使其生效。</p>
<p>如果在终端输入命令 <strong>kotlin -version</strong>，出现以下信息则说明 Kotlin 环境搭建成功。如下图：</p>
<p>  <img src="/images/kotlin/configuration_environment/kotlin_linux.png" alt=""></p>
</li>
<li><p>Mac：在 Mac 中，<strong>/etc/profile</strong>、<strong>/etc/bashrc</strong> 这两个文件是针对系统所有用户的全局变量，需要 root 用户才能操作它们，对于普通用户来说是只读；而 <strong>~/.bash_profile</strong> 文件是针对普通用户，即当前用户下所设置的系统环境变量，一般推荐对该文件进行操作。因此，将在 <strong>~/.bash_profile</strong> 文件下配置 kotlin 环境。</p>
<p>  在终端使用命令 <strong>vim ~/.bash_profile</strong> 打开该文件，并添加环境变量</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export KOTLIN=/Users/Pan/Library/kotlinc</div><div class="line">   export PATH=$PATH:$KOTLIN/bin</div></pre></td></tr></table></figure>
<p>最后保存退出，并执行命令 <strong>source /.bash_profile</strong> 使其生效。</p>
<p>如果在终端输入命令 <strong>kotlin -version</strong>，会出现以下信息<br>  <img src="/images/kotlin/configuration_environment/kotlin_mac.png" alt=""></p>
<p>网上 google 下说这个问题是 Homebrew 安装版的一个 bug，对 kotlin 环境搭建没影响，其实是安装成功的。（<a href="http://bbs.itxdl.cn/read-htm-tid-232933-page-e.html" target="_blank" rel="external">链接</a>） </p>
</li>
</ul>
</li>
</ul>
<h4 id="（2）、SDKMAN"><a href="#（2）、SDKMAN" class="headerlink" title="（2）、SDKMAN"></a>（2）、SDKMAN</h4><p>对于基于 UNIX 系统比如 OS X、Linux、Cygwin、FreeBSD and Solaris 则可以使用 <a href="http://sdkman.io/" target="_blank" rel="external">SDKMAN</a> 安装，安装命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -s https://get.sdkman.io | bash</div><div class="line"></div><div class="line">sdk install kotlin</div></pre></td></tr></table></figure>
<h4 id="（3）、Homebrew"><a href="#（3）、Homebrew" class="headerlink" title="（3）、Homebrew"></a>（3）、Homebrew</h4><p>对于使用 OS X 系统则可以通过 <a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a> 安装，安装命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line"></div><div class="line">brew install kotlin</div></pre></td></tr></table></figure>
<h4 id="（4）、MacPorts"><a href="#（4）、MacPorts" class="headerlink" title="（4）、MacPorts"></a>（4）、MacPorts</h4><p>如果你是 MacPorts 用户，则可以通过 <a href="https://www.macports.org/" target="_blank" rel="external">MacPorts</a> 安装，安装命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo port install kotlin</div></pre></td></tr></table></figure>
<h3 id="2、创建和运行第一个-kotlin-程序"><a href="#2、创建和运行第一个-kotlin-程序" class="headerlink" title="2、创建和运行第一个 kotlin 程序"></a>2、创建和运行第一个 kotlin 程序</h3><p>创建文件 hello.kt，敲入以下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    println(<span class="string">"Hello, World"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>保存文件，并使用 kotlin 编译器编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kotlinc hello.kt -include-runtime -d hello.jar</div></pre></td></tr></table></figure>
<p>kotlinc 表示编译的意思；hello.kt 显然是文件名；-include-runtime 表示运行时需要的 kotlin 库包含进来；-d 则表示打包成 jar 文件。至于要了解命令的详细内容，则可以在终端输入 kotlinc -help 查看。那么，接下来就可以运行程序，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar hello.jar</div></pre></td></tr></table></figure>
<p>此时会在终端显示 <strong>Hello, World</strong>。到此，第一个 kotlin 程序就完成了。</p>
<h2 id="三、用-Kotlin-开发-Android-环境搭建（链接）"><a href="#三、用-Kotlin-开发-Android-环境搭建（链接）" class="headerlink" title="三、用 Kotlin 开发 Android 环境搭建（链接）"></a>三、用 Kotlin 开发 Android 环境搭建（<a href="https://kotlinlang.org/docs/tutorials/kotlin-android.html" target="_blank" rel="external">链接</a>）</h2><h3 id="1、安装-Kotlin-插件"><a href="#1、安装-Kotlin-插件" class="headerlink" title="1、安装 Kotlin 插件"></a>1、安装 Kotlin 插件</h3><p>Android Studio 从 3.0 开始集成 Kotlin 插件，无需自己安装。但是如果你使用 3.0 以前版本，则需要手动安装 kotlin 插件，安装流程也挺简单的。<strong>Go to File | Settings | Plugins | Install JetBrains plugin…</strong> 搜索和安装 Kotlin 插件；如果 Android Studio 是处于 “Welcome to Android Studio” <strong>Configure | Plugins | Install JetBrains plugin…</strong>。Kotlin 插件安装完成后，需要重新启动 Android Studio 插件才能生效。</p>
<h3 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h3><p>使用 Kotlin 开发 Android 程序时，同样也需要创建 Android 项目，创建项目流程跟之前差不多，稍微有区别的是 Android Studio 版本不同在创建时一些选项有所不同。那么就简单来说下他们的不同之处。</p>
<ul>
<li><p>在创建项目第一步，Android Studio 3.0 提供一个选项：是否支持 Kotlin。如果选择这个选项，则可以跳过 <strong>“在项目中配置 Kotlin”</strong> 这一步。</p>
<p>  <img src="/images/kotlin/configuration_environment/kotlin_create_project.png" alt=""></p>
</li>
<li><p>在 Android Studio 3.0 中，你可以选择以 Kotlin 方式创建 Activity，所以可以跳过 <strong>“Java 代码转换为 Kotlin 代码”</strong> 这一步。可是在之前版本，还是用 Java 创建 Activity，然后使用转换工具转换。</p>
</li>
</ul>
<h3 id="3、Java-代码转换为-Kotlin-代码"><a href="#3、Java-代码转换为-Kotlin-代码" class="headerlink" title="3、Java 代码转换为 Kotlin 代码"></a>3、Java 代码转换为 Kotlin 代码</h3><p>打开 MainActivity.java 文件，使用快捷键 <strong>Command Shift A</strong> 调出 <strong>Enter action or option name</strong> 并搜索 <strong>convert Java File to Kotlin File</strong>，如下图</p>
<p><img src="/images/kotlin/configuration_environment/kotlin_convert.png" alt=""></p>
<p>然后按下回车，转换的 Kotlin 代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、在项目中配置-Kotlin"><a href="#4、在项目中配置-Kotlin" class="headerlink" title="4、在项目中配置 Kotlin"></a>4、在项目中配置 Kotlin</h3><p>完成以上步骤，还需要在项目中配置 Kotlin。找到 <strong>Tools | Kotlin | Configure Kotlin in Project</strong>，点击后会弹出对话框，如下图：</p>
<p><img src="/images/kotlin/configuration_environment/kotlin_configure.png" alt=""></p>
<p>点击 <strong>OK</strong>，然后 <strong>Sync</strong> build.gradle，Kotlin 就配置完成。</p>
<h3 id="5、构建和发布-Kotlin-程序"><a href="#5、构建和发布-Kotlin-程序" class="headerlink" title="5、构建和发布 Kotlin 程序"></a>5、构建和发布 Kotlin 程序</h3><p>构建程序和运行在真机或模拟器上，会显示 <strong>Hello World</strong>，那么也就完成了用 Kotlin 开发第一个 Android 程序。</p>
<p>以上是自己在 <a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin</a> 官网学习后所做的笔记，记录下来的目的是方便自己查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Kotlin-语言介绍&quot;&gt;&lt;a href=&quot;#一、Kotlin-语言介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Kotlin 语言介绍&quot;&gt;&lt;/a&gt;一、Kotlin 语言介绍&lt;/h1&gt;&lt;p&gt;Kotlin 是一种基于 JVM 新编程语言，由 J
    
    </summary>
    
      <category term="Kotlin" scheme="http://panzeyong.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin 学习笔记" scheme="http://panzeyong.com/tags/Kotlin-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第九章 客户端检测</title>
    <link href="http://panzeyong.com/2017/08/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B/"/>
    <id>http://panzeyong.com/2017/08/13/第九章-客户端检测/</id>
    <published>2017-08-13T09:23:34.000Z</published>
    <updated>2017-08-13T11:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、能力检测"><a href="#一、能力检测" class="headerlink" title="一、能力检测"></a>一、能力检测</h1><p>能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。比如说，函数 <strong>document.getElementById</strong> 在不同浏览器是否被支持。</p>
<p>能力检测有两个重要概念：一是先检测达成目的的最常用的特性；二是必须测试实际要用到的特性。</p>
<p>示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;&#125;&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.all[id];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二、怪癖检测"><a href="#二、怪癖检测" class="headerlink" title="二、怪癖检测"></a>二、怪癖检测</h1><p>识别浏览器的特殊行为，即检测浏览器存在什么缺陷。怪癖检测无法精确地检测特定的浏览器和版本。</p>
<h1 id="三、用户代理检测"><a href="#三、用户代理检测" class="headerlink" title="三、用户代理检测"></a>三、用户代理检测</h1><p>通过检测用户代理字符串来确定实际使用的浏览器，可以通过 JavaScript 的 <strong>navigator.userAgent</strong> 属性访问。</p>
<h3 id="1、主要浏览器所使用的呈现引擎如下表："><a href="#1、主要浏览器所使用的呈现引擎如下表：" class="headerlink" title="1、主要浏览器所使用的呈现引擎如下表："></a>1、主要浏览器所使用的呈现引擎如下表：</h3><table><tr align="center"><th>浏览器</th><td>IE</td><td>Opera</td><td>Chrome</td><td>Firefox</td><td>Safari</td><td>Konqueror</td></tr><tr align="center"><th>呈现引擎</th><td>IE</td><td>Opera</td><td>WebKit</td><td>Gecko</td><td>WebKit</td><td>KHTML</td></tr></table>

<h3 id="2、用户代理字符串（userAgent）所包含属性如下表："><a href="#2、用户代理字符串（userAgent）所包含属性如下表：" class="headerlink" title="2、用户代理字符串（userAgent）所包含属性如下表："></a>2、用户代理字符串（userAgent）所包含属性如下表：</h3><table><tr align="center"><th width="25%">字符串项</th><th width="15%">必须吗</th><th width="60%">说明</th></tr><tr align="center"><td>Mozilla 版本号</td><td>是</td><td>Mozilla 的版本号</td></tr><tr align="center"><td>平台</td><td>是</td><td>浏览器运行的平台。可能的值包括 Windows、Mac 和 X11（指 Unix 的 X 窗口系统）</td></tr><tr align="center"><td>加密类型</td><td>是</td><td>加密技术的类型：U 表示 128 位、I 表示 40 位、N 表示未加密</td></tr><tr align="center"><td>操作系统或 CPU</td><td>是</td><td>浏览器运行的操作系统或计算机系统使用的 CPU。在 Windows 平台中，这一项指 Windows 的版本（如 WinNT、Win95，等等）。如果平台是 Macintosh，这一项是 Unix 操作系统的名称，与使用 Unix 命令 uname-sm 得到的名称相同。</td></tr><tr align="center"><td>语言</td><td>是</td><td>浏览器设计时所针对的目标用户语言</td></tr><tr align="center"><td>预先发行版本</td><td>否</td><td>最初用于表示 Mozilla 的预先发行版本，现在则用来表示 Gecko 呈现引擎的版本号</td></tr><tr align="center"><td>Gecko 版本号</td><td>是</td><td>Gecko 呈现引擎的版本号，但由 yyyymmdd 格式的日期表示</td></tr><tr align="center"><td>应用程序或产品</td><td>否</td><td>使用 Gecko 的产品名。可能是 Netscape、Firefox 等</td></tr><tr align="center"><td>应用程序或产品版本号</td><td>否</td><td>应用程序或产品的版本号；用于区分 Mozilla 版本号或 Gecko 版本号</td></tr><br></table>

<h3 id="3、用户代理字符串检测技术"><a href="#3、用户代理字符串检测技术" class="headerlink" title="3、用户代理字符串检测技术"></a>3、用户代理字符串检测技术</h3><p>通过编写脚本检测浏览器呈现引擎、浏览器、平台、Windows 操作系统、移动设备、游戏系统以此来满足项目中需求。</p>
<p>声明全局变量 client，并使用模块增强模式来封装脚本，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> engine = &#123;</div><div class="line">        <span class="comment">// 呈现引擎</span></div><div class="line">        ie: <span class="number">0</span>,</div><div class="line">        gecko: <span class="number">0</span>,</div><div class="line">        webkit: <span class="number">0</span>,</div><div class="line">        khtml: <span class="number">0</span>,</div><div class="line">        opera: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 具体的版本号</span></div><div class="line">        ver: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">	</div><div class="line">    <span class="keyword">var</span> browser = &#123;</div><div class="line">        <span class="comment">// 浏览器</span></div><div class="line">        ie: <span class="number">0</span>,</div><div class="line">        firefox: <span class="number">0</span>,</div><div class="line">        safari: <span class="number">0</span>,</div><div class="line">        konq: <span class="number">0</span>,</div><div class="line">        opera: <span class="number">0</span>,</div><div class="line">        chrome: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 具体的版本</span></div><div class="line">        ver: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> system = &#123;</div><div class="line">        <span class="comment">// 检测平台</span></div><div class="line">        win: <span class="literal">false</span>,</div><div class="line">        mac: <span class="literal">false</span>,</div><div class="line">        x11: <span class="literal">false</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 移动设备</span></div><div class="line">        iphone: <span class="literal">false</span>,</div><div class="line">        ipod: <span class="literal">false</span>,</div><div class="line">        ipad: <span class="literal">false</span>,</div><div class="line">        ios: <span class="literal">false</span>,</div><div class="line">        android: <span class="literal">false</span>,</div><div class="line">        nokiaN: <span class="literal">false</span>,</div><div class="line">        winMobile: <span class="literal">false</span>,</div><div class="line"></div><div class="line">        <span class="comment">// 游戏系统</span></div><div class="line">        wii: <span class="literal">false</span>,</div><div class="line">        ps: <span class="literal">false</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 在此检测呈现引擎、平台和设备（各部分代码以下给出）</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        engine: engine,</div><div class="line">        browser: browser,</div><div class="line">        system: system</div><div class="line">    &#125;;</div><div class="line">&#125;();</div><div class="line"></div><div class="line"><span class="keyword">var</span> userAgent = navigator.userAgent;</div></pre></td></tr></table></figure>
<h4 id="（1）、识别呈现引擎以及浏览器"><a href="#（1）、识别呈现引擎以及浏览器" class="headerlink" title="（1）、识别呈现引擎以及浏览器"></a>（1）、识别呈现引擎以及浏览器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 识别呈现浏览器步骤如下：</div><div class="line"> * </div><div class="line"> * 1. 第一步：检测 Opera</div><div class="line"> * 2. 第二步：检测 WebKit</div><div class="line"> * 3. 第三步：检测 KHTML</div><div class="line"> * 4. 第四步：检测 Gecko</div><div class="line"> * 5. 第五步：检测 IE</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</div><div class="line">    alert(<span class="string">"Opera"</span>);</div><div class="line">    engine.ver = browser.ver = <span class="built_in">window</span>.opera.version();</div><div class="line">    engine.opera = browser.opera = <span class="built_in">parseFloat</span>(engine.ver);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebKit\/(\S+)/</span>.test(userAgent)) &#123;</div><div class="line">    alert(<span class="string">"AppleWebKit"</span>);</div><div class="line">    engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">    engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</div><div class="line"></div><div class="line">    <span class="comment">// 确定是 Chrome 还是 Safari</span></div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/Chrome\/(\S+)/</span>.test(userAgent)) &#123;</div><div class="line">        browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        browser.chrome = <span class="built_in">parseFloat</span>(browser.ver);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/</span>.test(userAgent)) &#123;</div><div class="line">        browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 近似地确定版本号</span></div><div class="line">        <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>) &#123;</div><div class="line">            safariVersion = <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>) &#123;</div><div class="line">            safariVersion = <span class="number">1.2</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>) &#123;</div><div class="line">            safariVersion = <span class="number">1.3</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            safariVersion = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        browser.safari = browser.ver = safariVersion;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/</span>.test(userAgent) || <span class="regexp">/Konqueror\/([^;]+)/</span>.test(userAgent)) &#123;</div><div class="line">    alert(<span class="string">"KHTML"</span>);</div><div class="line"></div><div class="line">    engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">    engine.khtml = browser.konq = <span class="built_in">parseFloat</span>(engine.ver);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/</span>.test(userAgent)) &#123;</div><div class="line">    alert(<span class="string">"Gecko"</span>);</div><div class="line"></div><div class="line">    engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">    engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</div><div class="line"></div><div class="line">    <span class="comment">// 确定是不是 Firefox</span></div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/Firefox\/(\S+)/</span>.test(userAgent)) &#123;</div><div class="line">        browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        browser.firefox = <span class="built_in">parseFloat</span>(browser.ver);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/MSIE ([^;]+)/</span>.test(userAgent)) &#123;</div><div class="line">    alert(<span class="string">"IE"</span>);</div><div class="line"></div><div class="line">    engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">    engine.ie = browser.ie = <span class="built_in">parseFloat</span>(engine.ver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了以上代码，就可以对浏览器进行检测，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (client.engine.webkit) &#123;</div><div class="line">    <span class="keyword">if</span> (client.browser.chrome) &#123;</div><div class="line">        alert(<span class="string">"Chrome : "</span> + client.browser.chrome);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.browser.safari) &#123;</div><div class="line">        alert(<span class="string">"Safari : "</span> + client.browser.safari);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.engine.gecko) &#123;</div><div class="line">    <span class="keyword">if</span> (client.browser.firefox) &#123;</div><div class="line">        alert(<span class="string">"Firefox : "</span> + client.browser.firefox);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"Not Firefox Browser"</span>);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.engine.opera) &#123;</div><div class="line">    <span class="keyword">if</span> (client.browser.opera) &#123;</div><div class="line">        alert(<span class="string">"Opera : "</span> + client.browser.opera);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"Not Opera Browser"</span>);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.engine.khtml) &#123;</div><div class="line">    <span class="keyword">if</span> (client.browser.konq) &#123;</div><div class="line">        alert(<span class="string">"konq : "</span> + client.browser.konq);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"Not konq Browser"</span>);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.engine.ie) &#123;</div><div class="line">    <span class="keyword">if</span> (client.browser.ie) &#123;</div><div class="line">        alert(<span class="string">"IE : "</span> + client.browser.ie);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"Not IE Browser"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（2）、识别平台"><a href="#（2）、识别平台" class="headerlink" title="（2）、识别平台"></a>（2）、识别平台</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> platform = navigator.platform;</div><div class="line"></div><div class="line">system.win = platform.indexOf(<span class="string">"Win"</span>) == <span class="number">0</span>;</div><div class="line">system.mac = platform.indexOf(<span class="string">"Mac"</span>) == <span class="number">0</span>;</div><div class="line">system.x11 = (platform.indexOf(<span class="string">"x11"</span>) == <span class="number">0</span>) || (platform.indexOf(<span class="string">"Linux"</span>) == <span class="number">0</span>);</div><div class="line"></div><div class="line">alert(<span class="string">"Win : "</span> + system.win);</div><div class="line">alert(<span class="string">"Mac : "</span> + system.mac);</div><div class="line">alert(<span class="string">"X11 : "</span> + system.x11);</div></pre></td></tr></table></figure>
<h4 id="（3）、识别-Windows-操作系统"><a href="#（3）、识别-Windows-操作系统" class="headerlink" title="（3）、识别 Windows 操作系统"></a>（3）、识别 Windows 操作系统</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (system.win) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/</span>.test(userAgent)) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"NT"</span>) &#123;</div><div class="line">            <span class="keyword">switch</span>(<span class="built_in">RegExp</span>[$<span class="number">2</span>]) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"5.0"</span>:</div><div class="line">                    system.win = <span class="string">"2000"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> <span class="string">"5.1"</span>:</div><div class="line">                    system.win = <span class="string">"XP"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> <span class="string">"6.0"</span>:</div><div class="line">                    system.win = <span class="string">"Vista"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> <span class="string">"6.1"</span>:</div><div class="line">                    system.win = <span class="string">"7"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    system.win = <span class="string">"NT"</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"9x"</span>) &#123;</div><div class="line">             system.win = <span class="string">"ME"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">             system.win = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据以上代码检测 Windows 操作系统</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (client.system.win == <span class="string">"2000"</span>) &#123;</div><div class="line">    alert(<span class="string">"Windows 2000"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.system.win == <span class="string">"XP"</span>) &#123;</div><div class="line">    alert(<span class="string">"Windows XP"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.system.win == <span class="string">"Vista"</span>) &#123;</div><div class="line">    alert(<span class="string">"Windows Vista"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.system.win == <span class="string">"7"</span>) &#123;</div><div class="line">    alert(<span class="string">"Windows 7"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.system.win == <span class="string">"NT"</span>) &#123;</div><div class="line">    alert(<span class="string">"Windows NT"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-、识别移动设备"><a href="#4-、识别移动设备" class="headerlink" title="(4)、识别移动设备"></a>(4)、识别移动设备</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">system.iphone = userAgent.indexOf(<span class="string">"iPhone"</span>) &gt; <span class="number">-1</span>;</div><div class="line">system.ipod = userAgent.indexOf(<span class="string">"iPod"</span>) &gt; <span class="number">-1</span>;</div><div class="line">system.ipad = userAgent.indexOf(<span class="string">"iPad"</span>) &gt; <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 检测 iOS 版本</span></div><div class="line"><span class="keyword">if</span> (system.mac &amp;&amp; userAgent.indexOf(<span class="string">"Mobile"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/</span>.test(userAgent)) &#123;</div><div class="line">        system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1.</span>replace(<span class="string">"_"</span>, <span class="string">"."</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 无法检测出来</span></div><div class="line">        system.ios = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 检测 Android 版本</span></div><div class="line"><span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(userAgent)) &#123;</div><div class="line">    system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 检测 诺基亚 N 系列</span></div><div class="line">system.nokiaN = userAgent.indexOf(<span class="string">"NokiaN"</span>) &gt; <span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 检测 Windows Mobile</span></div><div class="line"><span class="keyword">if</span> (system.win == <span class="string">"CE"</span>) &#123;</div><div class="line">    system.winMobile = system.win;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">"Ph"</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/Windows Phone OS (\d+.\d+)/</span>.test(userAgent)) &#123;</div><div class="line">        system.win = <span class="string">"Phone"</span>;</div><div class="line">        system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>检测手机，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (client.engine.webkit) &#123;</div><div class="line">    <span class="keyword">if</span> (client.system.ios) &#123;</div><div class="line">        alert(<span class="string">"iOS 手机"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.system.android) &#123;</div><div class="line">        alert(<span class="string">"Android 手机"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (client.system.nokiaN) &#123;</div><div class="line">        alert(<span class="string">"诺基亚 N 系列手机"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（5）、识别游戏系统"><a href="#（5）、识别游戏系统" class="headerlink" title="（5）、识别游戏系统"></a>（5）、识别游戏系统</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">system.wii = userAgent.indexOf(<span class="string">"Wii"</span>) &gt; <span class="number">-1</span>;</div><div class="line">system.ps = <span class="regexp">/playstation/i</span>.test(userAgent);</div></pre></td></tr></table></figure>
<p>以上是在学习 《JavaScript 高级程序设计》（第 3 版）这本书第九章的学习笔记，主要把书中讲到的要点记录下来，方便自己查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、能力检测&quot;&gt;&lt;a href=&quot;#一、能力检测&quot; class=&quot;headerlink&quot; title=&quot;一、能力检测&quot;&gt;&lt;/a&gt;一、能力检测&lt;/h1&gt;&lt;p&gt;能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。比如说，函数 &lt;strong&gt;document.g
    
    </summary>
    
      <category term="JavaScript" scheme="http://panzeyong.com/categories/JavaScript/"/>
    
    
      <category term="《JavaScript 高级程序设计》学习笔记" scheme="http://panzeyong.com/tags/%E3%80%8AJavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第八章 BOM</title>
    <link href="http://panzeyong.com/2017/07/25/%E7%AC%AC%E5%85%AB%E7%AB%A0-BOM/"/>
    <id>http://panzeyong.com/2017/07/25/第八章-BOM/</id>
    <published>2017-07-24T23:42:23.000Z</published>
    <updated>2017-08-13T11:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、window-对象"><a href="#一、window-对象" class="headerlink" title="一、window 对象"></a>一、window 对象</h2><h3 id="1、全局作用域"><a href="#1、全局作用域" class="headerlink" title="1、全局作用域"></a>1、全局作用域</h3><p>window 对象具有双重角色</p>
<ul>
<li><p>通过 JavaScript 访问浏览器窗口的一个接口；</p>
</li>
<li><p>ECMAScript 规定的 Global 对象。</p>
</li>
</ul>
<p>定义全局变量与在 window 对象上直接定义属性区别：全局变量不能通过 delete 操作符删除，而直接在 window 对象上定义的属性可以。</p>
<p>尝试访问未声明的变量会抛出错误，但是通过查询 window 对象，可以知道某个可能未声明的变量是否存在。</p>
<p>书中例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义全局变量</span></div><div class="line"><span class="keyword">var</span> age = <span class="number">29</span>;</div><div class="line"></div><div class="line"><span class="comment">// 在 window 对象上定义属性</span></div><div class="line"><span class="built_in">window</span>.color = <span class="string">"Green"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 在 IE &lt; 9 时抛出错误，在其他所以浏览器中都返回 false</span></div><div class="line">alert(<span class="keyword">delete</span> <span class="built_in">window</span>.age);</div><div class="line"></div><div class="line"><span class="comment">// 在 IE &lt; 9 时抛出错误，在其他所以浏览器中都返回 true</span></div><div class="line">alert(<span class="keyword">delete</span> <span class="built_in">window</span>.color);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayAge</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(age);</div><div class="line">alert(<span class="built_in">window</span>.age);</div><div class="line"></div><div class="line">sayAge();</div><div class="line"><span class="built_in">window</span>.sayAge();</div><div class="line"></div><div class="line">alert(<span class="built_in">window</span>.color);</div></pre></td></tr></table></figure>
<h3 id="2、窗口关系以及框架"><a href="#2、窗口关系以及框架" class="headerlink" title="2、窗口关系以及框架"></a>2、窗口关系以及框架</h3><p>每个框架（frame）都拥有自己的 window 对象，并且保存在 frames 集合钟；每个 window 对象都有一个 name 属性，包含框架名称。</p>
<p>top 对象：始终指向最高（最外）层的框架，也就是浏览器窗口；使用它可以确保在一个框架中正确第访问另外一个框架。（当网页有框架的情况下，window 对象指向的是每个框架特定的实例，与 top 对象不相等；反之，则相同。）</p>
<p>parent 对象：始终指向当前框架的直接上层框架。（当网页有框架的情况下，parent 不一定等于 top；反之，则一定相等。）</p>
<p>self 对象：始终指向 window，可以与 window 对象互换使用。引入该对象的目的只是为了与 top 和 parent 对象对应起来。</p>
<p>top、parent、self 等对象其实都是 window 的属性，也就是说，可以通过 window.top、window.parent 等访问。</p>
<p>访问框架的方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不推荐，因为在有框架的网页中，每个 window 对象都是指向框架的特定实例，而非指向最外层框架。</span></div><div class="line"><span class="built_in">window</span>.frames[index]</div><div class="line"><span class="built_in">window</span>.frames[<span class="string">"框架名称"</span>]</div><div class="line"></div><div class="line"><span class="comment">// 推荐，因为始终指向最高（最外）层的框架，也就是浏览器窗口</span></div><div class="line">top.frames[index]</div><div class="line">top.frames[<span class="string">"框架名称"</span>]</div><div class="line"></div><div class="line"><span class="comment">// 通过集合访问</span></div><div class="line">frames[index]</div><div class="line">frames[<span class="string">"框架名称"</span>]</div></pre></td></tr></table></figure>
<h3 id="3、窗口位置"><a href="#3、窗口位置" class="headerlink" title="3、窗口位置"></a>3、窗口位置</h3><p>screenLeft、screenTop、screenX、screenY 这四个属性在各个浏览器中使用情况：</p>
<table><tr align="center"><td width="25%" align="center">浏览器 / 属性</td><td width="15%" align="center">IE</td><td width="15%" align="center">Chrome</td><td width="15%" align="center">Sarari</td><td width="15%" align="center">Opera</td><td width="15%" align="center">Firefox</td></tr><tr align="center"><td>screenLeft</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr align="center"><td>screenTop</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr align="center"><td>screenX</td><td>不支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>screenY</td><td>不支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr></table>

<p>跨浏览器获取窗口左边和上边的位置的示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> leftPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft == <span class="string">"number"</span>) ? <span class="built_in">window</span>.screenLeft : <span class="built_in">window</span>.screenX;</div><div class="line"><span class="keyword">var</span> topPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenTop == <span class="string">"number"</span> )? <span class="built_in">window</span>.screenTop : <span class="built_in">window</span>.screenY;</div></pre></td></tr></table></figure>
<h3 id="4、窗口大小"><a href="#4、窗口大小" class="headerlink" title="4、窗口大小"></a>4、窗口大小</h3><p>innerWidth、innerHeight、outerWidth、outerHegiht 这四个属性在以下浏览器是支持的，不同的是获取的值，具体情况如下：</p>
<table><tr align="center"><td width="25%">浏览器 / 属性</td><td width="15%">IE9+</td><td width="15%">Chrome</td><td width="15%">Sarari</td><td width="15%">Opera</td><td width="15%">Firefox</td></tr><tr align="center"><td>innerWidth</td><td>页面视图区的大小（减去边框宽度）</td><td>视口（viewport）大小而非浏览器窗口的大小</td><td>页面视图区的大小（减去边框宽度）</td><td>页面视图区的大小（减去边框宽度）</td><td>页面视图区的大小（减去边框宽度）支持</td></tr><tr align="center"><td>innerHeight</td><td>页面视图区的大小（减去边框宽度）</td><td>视口（viewport）大小而非浏览器窗口的大小</td><td>页面视图区的大小（减去边框宽度）</td><td>页面视图区的大小（减去边框宽度）</td><td>不页面视图区的大小（减去边框宽度）</td></tr><tr align="center"><td>outerWidth</td><td>返回浏览器本身窗口的大小</td><td>视口（viewport）大小而非浏览器窗口的大小</td><td>返回浏览器本身窗口的大小</td><td>页面视图容器大小（单个标签页对应的浏览器窗口）</td><td>返回浏览器本身窗口的大小</td></tr><tr align="center"><td>outerHeight</td><td>返回浏览器本身窗口的大小</td><td>视口（viewport）大小而非浏览器窗口的大小</td><td>返回浏览器本身窗口的大小</td><td>页面视图容器大小（单个标签页对应的浏览器窗口）</td><td>返回浏览器本身窗口的大小</td></tr></table>

<p>document.documentElement.clientWidth、document.documentElement.clientHeight、document.body.clientWidth、document.body.clientHeight 这四个属性作用主要是保存页面视口信息，在不同浏览器使用情况如下：</p>
<table><tr align="center"><td width="50%">浏览器 / 属性</td><td width="10%">IE</td><td width="10%">Chrome</td><td width="10%">Sarari</td><td width="10%">Opera</td><td width="10%">Firefox</td></tr><tr align="center"><td>document.documentElement.clientWidth</td><td>支持（IE6 中标准模式）</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>document.documentElement.clientHeight</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>document.body.clientWidth</td><td>支持（混杂模式）</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>document.body.clientHeight</td><td>支持（混杂模式）</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr></table>

<p>获取页面视口大小示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth;</div><div class="line"><span class="keyword">var</span> pageHeight = <span class="built_in">window</span>.innerHeight;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth != <span class="string">"number"</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>) &#123;</div><div class="line">		pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</div><div class="line">		pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		pageWidth = <span class="built_in">document</span>.body.clientWidth;</div><div class="line">		pageHeight = <span class="built_in">document</span>.body.clientHeight;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5、导航和打开窗口"><a href="#5、导航和打开窗口" class="headerlink" title="5、导航和打开窗口"></a>5、导航和打开窗口</h3><p><strong>window.open()：</strong>既可以导航到特定的 URL，也可以打开一个新的浏览器窗口。接收 4 个参数，具体如下：</p>
<ul>
<li><p>加载的 URL；</p>
</li>
<li><p>窗口目标：_self、_parent、_top、_blank（指定窗口的话就在该窗口打开 URL；没有的话就根据浏览器设置打开新标签页或者打开新的窗口）；</p>
</li>
<li><p>特性字符串：不允许出现空格；</p>
</li>
<li><p>布尔值（表示新页面是否取代浏览器历史记录中当前加载页面）</p>
</li>
</ul>
<p>第三个参数设置窗口特性，具体如下：</p>
<table><tr align="center"><td width="20%">设置</td><td width="20%">值</td><td width="60%">说明</td></tr><tr align="center"><td width="20%">fullscreen</td><td width="20%">yes / no</td><td width="60%">表示浏览器窗口是否最大化。仅限 IE</td></tr><tr align="center"><td width="20%">height</td><td width="20%">数值</td><td width="60%">表示新窗口的高度。不能小于 100</td></tr><tr align="center"><td width="20%">left</td><td width="20%">数值</td><td width="60%">表示新窗口的左坐标。不能是负值</td></tr><tr align="center"><td width="20%">location</td><td width="20%">yes / no</td><td width="60%">表示是否在浏览器窗口中显示地址栏。不同浏览器的默认值不同。如果设置为 no，地址栏可能会隐藏，也可能会被禁止（取决于浏览器）</td></tr><tr align="center"><td width="20%">menubar</td><td width="20%">yes / no</td><td width="60%">表示是否在浏览器窗口中显示菜单栏。默认值为 no</td></tr><tr align="center"><td width="20%">resizeable</td><td width="20%">yes / no</td><td width="60%">表示是否可以通过拖动浏览器窗口的边框改变其大小。默认值为 no</td></tr><tr align="center"><td width="20%">scrollbars</td><td width="20%">yes / no</td><td width="60%">表示如果内容在视口中显示不下，是否允许滚动。默认值为 no</td></tr><tr align="center"><td width="20%">status</td><td width="20%">yes / no</td><td width="60%">表示是否在浏览器窗口中显示状态栏。默认值 no</td></tr><tr align="center"><td width="20%">toolbar</td><td width="20%">yes / no</td><td width="60%">表示是否在浏览器窗口中显示工具栏。默认值为 no</td></tr><tr align="center"><td width="20%">top</td><td width="20%">数值</td><td width="60%">表示新窗口的上坐标。不能是负值</td></tr><tr align="center"><td width="20%">width</td><td width="20%">数值</td><td width="60%">表示新窗口的宽度。不能小于 100</td></tr></table>

<p><strong>opener</strong>：新创建窗口属性，保存着打开它的原始窗口对象。opener 设置为 null，表示在单独的进程中运行新标签页。（Chrome）</p>
<p><strong>屏蔽弹出窗口方式：</strong></p>
<ul>
<li><p>浏览器内置的屏蔽程序阻止的弹出窗口，window.open 很可能返回 null。</p>
</li>
<li><p>浏览器扩展或者其它程序阻止的弹出窗口，window.open() 通常会抛出一个错误。</p>
</li>
</ul>
<p>示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> blocked = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="keyword">var</span> baiduWin = <span class="built_in">window</span>.open(<span class="string">"http://www.baidu.com"</span>, <span class="string">"topFrame"</span>, <span class="string">"height=400,widht=600,left=25,top=25,location=no,menubar=no,resizable=true,scrollbars=yes,status=no,toolbar=no"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (<span class="literal">null</span> == baiduWin) &#123;</div><div class="line">		blocked = <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">	blocked = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (blocked) &#123;</div><div class="line">	alert(<span class="string">"The popup was blocked !"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	alert(<span class="string">"The popup was not blocked !"</span>);</div><div class="line">	alert(baiduWin);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6、间歇调用和超时调用"><a href="#6、间歇调用和超时调用" class="headerlink" title="6、间歇调用和超时调用"></a>6、间歇调用和超时调用</h3><p>一般认为，使用超时调用来模拟间歇调用的是一种最佳模式。在开发环境下，很少使用真正的间歇调用，原因是后一个间歇调用可能会在前一个间歇调用结束之前启动。</p>
<p><strong>setTimeout()</strong>：超时调用,返回一个数值 ID，表示唯一标识。接收两个参数：要执行的代码和以毫秒表示的时间（即在执行代码前需要等待多时毫秒）</p>
<p><strong>setInterval()</strong>：间歇调用。接收两个参数：要执行的代码和每次执行之前需要等待的毫秒数。</p>
<p><strong>clearTimeout()</strong>：根据相应的 id 取消调用。</p>
<p>示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">"Hello World !"</span>);</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"></div><div class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="string">"Hello World"</span>);</div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<h3 id="7、系统对话框"><a href="#7、系统对话框" class="headerlink" title="7、系统对话框"></a>7、系统对话框</h3><p><strong>alert()：</strong>警告框。</p>
<p><strong>comfirm()：</strong>确认对话框。</p>
<p><strong>prompt()：</strong>提示对话框。</p>
<p><strong>window.print()：</strong>打印。</p>
<p><strong>window.find()：</strong>查找。</p>
<p>示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">"Hello World !"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (confirm(<span class="string">"Are you sure ?"</span>)) &#123;</div><div class="line">	alert(<span class="string">"I'm so glad you're sure !"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	alert(<span class="string">"I'm sorry to hear you're not sure ."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = prompt(<span class="string">"What is your name ? "</span>, <span class="string">""</span>);</div><div class="line"><span class="keyword">if</span> (<span class="literal">null</span> != result) &#123;</div><div class="line">	alert(<span class="string">"Welcome, "</span> + result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二、location-对象"><a href="#二、location-对象" class="headerlink" title="二、location 对象"></a>二、location 对象</h2><p>location 对象不仅提供与当前窗口中加载的文档有关的信息，还提供了一些导航功能以及将 URL 解析为独立的片段。window.location 和 document.location 引用的同是一个对象，即 location 对象。</p>
<p>location 对象所有属性如下表：</p>
<table><tr align="center"><td width="25%">属性名</td><td width="25%">例子</td><td width="50%">说明</td></tr><tr align="center"><td>hash</td><td>“#contents”</td><td>返回 URL 中的 hash（# 号后跟或多个字符），如果 URL 中不包含散列，则返回空字符串</td></tr><tr align="center"><td>host</td><td>“www.wrox.com:80”</td><td>返回服务器名称和端口号（如果有）</td></tr><tr align="center"><td>hostname</td><td>“www.wrox.com”</td><td>返回不带端口号的服务器名称</td></tr><tr align="center"><td>href</td><td>“<a href="http://www.wrox.com" target="_blank" rel="external">http://www.wrox.com</a>“</td><td>返回当前加载页面的完整 URL。而 location 对象的 toString() 方法也返回这个值</td></tr><tralign="center"><td>pathname</td><td>“/WileyCDA”</td><td>返回 URL 中的目录和（或）文件名</td><tr align="center"><td>port</td><td>“8080”</td><td>返回 URL 中指定的端口号。如果 URL 中不包含端口号，则这个属性返回空字符串</td></tr><tr align="center"><td>protocol</td><td>“http”</td><td>返回页面使用的协议。通常是 http: 或 https:</td></tr><tr align="center"><td>search</td><td>“?q=javascript”</td><td>返回 URL 的查询字符串。这个字符串以问号开头</td></tr></tralign="center"></table>

<p>查询参数示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> qs = (location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>);</div><div class="line"></div><div class="line">	args = &#123;&#125;;</div><div class="line"></div><div class="line">	items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [];</div><div class="line">	item = <span class="literal">null</span>;</div><div class="line">	name = <span class="literal">null</span>;</div><div class="line">	value = <span class="literal">null</span>;</div><div class="line"></div><div class="line">	i = <span class="number">0</span>;</div><div class="line">	len = items.length;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">		item = items[i].split(<span class="string">"="</span>);</div><div class="line">		name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</div><div class="line">		value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (name.length) &#123;</div><div class="line">			args[name] = value;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> args;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>位置操作方法：</p>
<ul>
<li><p><strong>location.assign(url)</strong>：立即打开新 URL 并在浏览器的历史记录中生成一条记录。<strong>location.href</strong> 与 <strong>window.location</strong> 效果与之一样。</p>
</li>
<li><p><strong>location.replace(url)</strong>：打开新 URL，但是不会下历史记录中生成新记录。</p>
</li>
<li><p><strong>location.reload()</strong>：重新加载当前显示的页面。可接收参数，比如 true，表示从服务器加载。</p>
</li>
</ul>
<h2 id="三、navigator-对象"><a href="#三、navigator-对象" class="headerlink" title="三、navigator 对象"></a>三、navigator 对象</h2><p>navigator 对象属性如下表：</p>
<table><tr align="center"><th width="20%">属性或方法</th><th width="34%">说明</th><th width="8%">IE</th><th width="10%">Firefox</th><th width="18%">Safari/Chrome</th><th width="10%">Opera</th></tr><tr align="center"><td>appCodeName</td><td>浏览器的名称。通常都是 Mozilla，即使在非 Mozilla 浏览器也是如此</td><td>3.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>appMinorVersion</td><td>此版本信息</td><td>4.0+</td><td>-</td><td>-</td><td>9.5+</td></tr><tr align="center"><td>appName</td><td>完整的浏览器名称</td><td>3.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>appVersion</td><td>浏览器的版本。一般不与实际的浏览器版本对应</td><td>3.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>buildId</td><td>浏览器编译版本</td><td>-</td><td>2.0+</td><td>-</td><td>-</td></tr><tr align="center"><td>cookieEnabled</td><td>表示 cookie 是否启用</td><td>4.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>cpuClass</td><td>客户端计算机中使用的 CPU 类型（x86、68K、Alpha、PPC 或 Other）</td><td>4.0+</td><td>-</td><td>-</td><td>-</td></tr><tr align="center"><td>javaEnabled()</td><td>表示当前浏览器中是否启用了 Java</td><td>4.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>language</td><td>浏览器的主语言</td><td>4.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>mimeTypes</td><td>在浏览器中注册的 MIME 类型数组</td><td>4.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>onLine</td><td>表示浏览器是否连接到因特网</td><td>4.0+</td><td>1.0+</td><td>-</td><td>9.5+</td></tr><tr align="center"><td>oscpu</td><td>客户端计算机的操作系统或使用的 CPU</td><td>-</td><td>1.0+</td><td>-</td><td>-</td></tr><tr align="center"><td>platform</td><td>浏览器所在的系统平台</td><td>4.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>plugins</td><td>浏览器中安装的插件信息的数组</td><td>4.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>preference()</td><td>设置用户的首选项</td><td>-</td><td>1.5+</td><td>-</td><td>-</td></tr><tr align="center"><td>product</td><td>产品名称（如 Gecko）</td><td>-</td><td>1.0+</td><td>1.0+</td><td>-</td></tr><tr align="center"><td>productSub</td><td>关于产品的次要信息（如 Gecko 版本）</td><td>-</td><td>1.0+</td><td>1.0+</td><td>-</td></tr><br><tr align="center"><td>systemLanguage</td><td>操作系统的语言</td><td>4.0+</td><td>-</td><td>-</td><td>-</td></tr><tr align="center"><td>userAgent</td><td>浏览器的用户代理字符串</td><td>3.0+</td><td>1.0+</td><td>1.0+</td><td>7.0+</td></tr><tr align="center"><td>userLanguage</td><td>操作系统的默认语言</td><td>4.0+</td><td>-</td><td>-</td><td>7.0+</td></tr><tr align="center"><td>userProfile</td><td>借以访问用户个人信息的对象</td><td>4.0+</td><td>-</td><td>-</td><td>-</td></tr><tr align="center"><td>vendor</td><td>浏览器的品牌</td><td>-</td><td>1.0+</td><td>1.0+</td><td>-</td></tr><tr align="center"><td>vendorSub</td><td>有关供应商的次要信息</td><td>-</td><td>1.0+</td><td>1.0+</td><td>-</td></tr></table>

<h3 id="检测插件"><a href="#检测插件" class="headerlink" title="检测插件"></a>检测插件</h3><p>对于非 IE 浏览器，可以使用 navigator 对象提供的 plugins 属性来检测浏览器插件信息，返回的是数组。该数组中的每一项都包含以下属性：</p>
<ul>
<li><p>name：插件的名字。</p>
</li>
<li><p>description：插件的描述。</p>
</li>
<li><p>filename：插件的文件名。</p>
</li>
<li><p>length：插件所处理的 MIME 类型数量。</p>
</li>
</ul>
<p>检测插件示例代码（在 IE 中无效）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	name = name.toLowerCase();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; navigator.plugins.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; <span class="number">-1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>检测插件示例代码（只在 IE 中有效）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">new</span> ActiveXObject(name);</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="四、screen-对象"><a href="#四、screen-对象" class="headerlink" title="四、screen 对象"></a>四、screen 对象</h2><p>用来表明客户端的能力，其中包括浏览器窗口外部的显示器信息，比如像素宽度和高度。</p>
<p>screen 对象各种属性如下表：</p>
<table><tr><th width="30%">属性</th><th width="30%">说明</th><th width="10%">IE</th><th width="10%">Firefox</th><th width="10%">Safari / Chrome</th><th width="10%">Opera</th></tr><tr align="center"><td>availHeight</td><td>屏幕的像素高度减系统部件高度之后的值（只读）</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>availLeft</td><td>未被系统部件占用的最左侧的像素值（只读）</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr align="center"><td>availTop</td><td>未被系统部件占用的最上方的像素值（只读）</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr align="center"><td>availWidth</td><td>屏幕的像素宽度减去系统部件宽度之后的值（只读）</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>bufferDepth</td><td>读、写用于呈现屏外位图的位数</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>colorDepth</td><td>用于表现颜色的位数；多数系统是 32（只读）</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>deviceXDPI</td><td>屏幕实际的水平 DPI（只读）</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>deviceYDPI</td><td>屏幕实际的垂直 DPI（只读）</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>fontSmooth / ingEnabled</td><td>表示是否启用字体平滑（只读）</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>height</td><td>屏幕的像素高度</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>left</td><td>当前屏幕距离左边的像素距离</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>logicalXDPI</td><td>屏幕逻辑的水平 DPI（只读）</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>logicalYDPI</td><td>屏幕逻辑的垂直 DPI（只读）</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>pixelDepth</td><td>屏幕的位深</td><td>不支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr align="center"><td>top</td><td>当前屏幕距上边的像素距离</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>updateInterval</td><td>读、写以毫秒表示的屏幕刷新时间间隔</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr align="center"><td>width</td><td>屏幕的像素宽度</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr></table>

<h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><p>history 对象保存着用户上网的的历史记录。</p>
<p><strong>go()</strong>：在用户的历史记录中任意跳转，可以向其也可以向后。该方法接收一个参数，正数表示向前，负数表示向后。</p>
<p><strong>back()</strong>：后退。</p>
<p><strong>forward()</strong>：前进。</p>
<p>以上是在学习 《JavaScript 高级程序设计》（第 3 版）这本书第八章的学习笔记，主要把书中讲到的要点记录下来，方便自己查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、window-对象&quot;&gt;&lt;a href=&quot;#一、window-对象&quot; class=&quot;headerlink&quot; title=&quot;一、window 对象&quot;&gt;&lt;/a&gt;一、window 对象&lt;/h2&gt;&lt;h3 id=&quot;1、全局作用域&quot;&gt;&lt;a href=&quot;#1、全局作用域&quot; c
    
    </summary>
    
      <category term="JavaScript" scheme="http://panzeyong.com/categories/JavaScript/"/>
    
    
      <category term="《JavaScript 高级程序设计》学习笔记" scheme="http://panzeyong.com/tags/%E3%80%8AJavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
