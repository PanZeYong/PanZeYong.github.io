<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PANJU&#39;s Note</title>
  <subtitle>故不积跬步，无以至千里；不积小流，无以成江海。</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://panzeyong.github.io/"/>
  <updated>2017-05-21T05:30:05.000Z</updated>
  <id>https://panzeyong.github.io/</id>
  
  <author>
    <name>PANJU</name>
    <email>04120513panzeyong@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JobScheduler 用法</title>
    <link href="https://panzeyong.github.io/2017/05/21/JobScheduler-%E7%94%A8%E6%B3%95/"/>
    <id>https://panzeyong.github.io/2017/05/21/JobScheduler-用法/</id>
    <published>2017-05-21T04:28:37.000Z</published>
    <updated>2017-05-21T05:30:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>先来聊聊怎么会知道 JobSchduler 这神奇的东西。公司项目有这么一个需求：平板上实时记录小朋友的学习情况，然后生成学习报告上传到服务器，供手机端查看。原先的做法是开启服务，在服务里注册广播接收器，当广播接收器接收到 action，就会将数据上传，在网络正常的情况下，该做法是没有问题的；但是当网络很差的情况下，有可能造成上传失败，数据丢失。后来我采用一种方式：当上传失败时，开启定时器上传，直到成功为止。原本以为这样就解决问题，可是后来做后台的同事说由于设置时间短，访问量多，造成服务器流量过大，希望我能找另外一种解决方法。这时 Leader 跟我说采用 JobScheduler，它完全有系统控制，满足一定的条件时触发任务。于是我马上 Google，看看这玩意到底是啥？经过搜索一番，发现 JobScheduler 功能挺强大的。下面是自己学习 JobSchduler 小结。</p>
<p>JobScheduler 是在 Android 5.0 Google 推出的一个新组件，它的出现主要是为了解决某些任务需要在满足一个或多个条件的情况下才触发的需求，这些条件比如网络状态、电池充电、数据变化、自己设定的条件等，在满足条件时会触发相应的 JobScheduler 完成相应的任务。这个过程只需我们对要执行的任务设定条件，其它都由系统控制完成的，无需我们去控制任务。在学习 JobScheduler 的用法之前，先来了解相关的 API，这里涉及到 JobScheduler、JobInfo、JobParameters、JobService 这四个类。</p>
<h2 id="API-讲解"><a href="#API-讲解" class="headerlink" title="API 讲解"></a>API 讲解</h2><h4 id="JobScheduler"><a href="#JobScheduler" class="headerlink" title="JobScheduler"></a>JobScheduler</h4><p>先来看下官方文档对 JobScheduler 的描述：</p>
<blockquote>
<p>根据应用程序自己的进程中调度各种类型的任务。</p>
<p>关于可以运行的任务类型以及如何构建它们的更多描述，请参阅 <a href="https://developer.android.com/reference/android/app/job/JobInfo.html" target="_blank" rel="external">JobInfo</a>。你将构建这些 JobInfo 对象,并调用 JobScheduler 方法 <a href="https://developer.android.com/reference/android/app/job/JobScheduler.html#schedule(android.app.job.JobInfo" target="_blank" rel="external">schdule(JonInfo)</a>) 将这些 JobInfo 对象传给它。当设定的条件满足时，系统将会在你应用程序 <a href="https://developer.android.com/reference/android/app/job/JobService.html" target="_blank" rel="external">JobService</a> 上执行相应的任务。当你使用 <a href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#JobInfo.Builder(int, android.content.ComponentName" target="_blank" rel="external">JobInfo.Builder(int, android.content.ComponentName)</a>) 创建你的 JobInfo 时，意味着已经确定哪个 JobService 将执行你的任务逻辑。</p>
<p>框架对于你接收回调的时机很智能的，并且尝试尽可能地分批处理和延迟它们。通常来说，如果你没有为你的任务设置最后期限，那么就会根据 JobScheduler 内部队列当前的状态在任何时刻来执行它们；<br>可是只要到下一次设备连接电源，那么任务就有可能被延迟。</p>
<p>你不能直接实例化 JobScheduler，而是需要通过 <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T" target="_blank" rel="external">Context.getSystemService(Context.JOB_SCHEDULER_SERVICE)</a>) 获取实例。</p>
</blockquote>
<p>从官方文档可以知道，JobScheduler 的职责是调度任务、取消任务。JobScheduler 提供 2 个常量和 5 个方法，在了解它们之前，先来了解如何获取 JobScheduler 实例。正如官方文档所介绍的，通过获取系统服务来获取的，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JobScheduler jobScheduler = (JobScheduler) Context.getSystemService(Context.JOB_SCHEDULER_SERVICE);</div></pre></td></tr></table></figure>
<p>接下来来了解两个常量的具体含义</p>
<ul>
<li><p>RESULT_FAILURE：调度任务失败时返回值。</p>
</li>
<li><p>RESULT_SUCCESS：调度任务成功时返回值。</p>
</li>
</ul>
<p>JobScheduler 提供 5 个方法供我们使用，让我们来了解下这 5 个方法的具体用法</p>
<ul>
<li><p><strong>cancel(int jobId)</strong>：取消 JobScheduler 内部队列 id 为 jobId 待处理任务。</p>
</li>
<li><p><strong>cancelAll()</strong>：取消在这个应用程序上 JobScheduler 已经注册的所有任务。</p>
</li>
<li><p><strong>getAllPendingJobs()</strong>：检索 JobScheduler 待处理所有任务。</p>
</li>
<li><p><strong>getPendingJob(int jobId)</strong>：检索 JobScheduler 内部队列 id 为 jobId 待处理任务。</p>
</li>
<li><p><strong>schedule(JobInfo job)</strong>：调度任务。</p>
</li>
</ul>
<h4 id="JobInfo"><a href="#JobInfo" class="headerlink" title="JobInfo"></a>JobInfo</h4><p>JobInfo 对一个即将被执行的任务的信息进行封装，然后供 JobScheduler 调度。由于 JobInfo 包含的信息比较多，所有采用建造者模式来构建其实例，即 JobInfo.Builder 来创建。</p>
<p>来看下官方文档的描述：</p>
<blockquote>
<p>将要调度的任务所需的参数（信息）封装为 JobInfo 对象传递给 <a href="https://developer.android.com/reference/android/app/job/JobScheduler.html#RESULT_FAILURE" target="_blank" rel="external">JobScheduler</a>。使用 <a href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#JobInfo.Builder(int, android.content.ComponentName" target="_blank" rel="external">JobInfo.Builder</a>) 创建 JobInfo 实例。当你正在创建 JobInfo 对象时，你必须<strong>至少指定一项约束条件</strong>。这样做的目标是为你想完成的任务提供优先级高调度。<strong>如果你没有指定任何一项约束时，你的 app 会抛出异常。</strong></p>
</blockquote>
<p>那么来看下如何创建 JobInfo 实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JobInfo.Builder builder = <span class="keyword">new</span> JobInfo.Builder(jobId, componentName);</div><div class="line">builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);</div><div class="line">JobInfo jobInfo = builder.build();</div></pre></td></tr></table></figure>
<p>由于创建 JobInfo 对象时至少指定一项约束条件，所以以上只是指定请求网络类型，至于其它属性可以根据自己的需求指定。那么 JobInfo 到底有哪些属性呢？下面一一揭晓。</p>
<p>先来看下 JobInfo 提供常量：</p>
<ul>
<li><p><strong>BACKOFF_POLICY_EXPONENTIAL</strong>：退避策略，任务失败时等待间隔呈指数增长。</p>
</li>
<li><p><strong>BACKOFF_POLICY_LINEAR</strong>：退避策略，任务失败时等待间隔呈线性增长。</p>
</li>
<li><p><strong>DEFAULT_INITIAL_BACKOFF_MILLIS</strong>：默认情况下任务的 backoff，以毫秒为单位。</p>
</li>
<li><p><strong>MAX_BACKOFF_DELAY_MILLIS</strong>：允许任务最大 backoff，以毫秒为单位。</p>
</li>
<li><p><strong>NETWORK_TYPE_ANY</strong>：连接任何网络。</p>
</li>
<li><p><strong>NETWORK_TYPE_NONE</strong>：默认值，没联网。</p>
</li>
<li><p><strong>NETWORK_TYPE_NOT_ROAMING</strong>：连接非漫游网络。</p>
</li>
<li><p><strong>NETWORK_TYPE_UNMETERED</strong>：连接非计量网络。</p>
</li>
</ul>
<p>JobInfo 设置属性的方法由 JobInfo.Builder，那么来看下提供哪些方法设置属性</p>
<ul>
<li><p><strong>setRequiredNetworkType (int networkType)</strong>：设置网络类型。如果任务需要通过网络访问服务器，但是没有调用该方法设置网络类型时，那么任务不会被执行。提供四个参数可以设置：</p>
<ul>
<li><p><strong>NETWORK_TYPE_NONE</strong>：默认值，不连接网络。</p>
</li>
<li><p><strong>NETWORK_TYPE_ANY</strong>：连接任何网络。</p>
</li>
<li><p><strong>NETWORK_TYPE_NOT_ROAMING</strong>：连接非漫游网络。</p>
</li>
<li><p><strong>NETWORK_TYPE_UNMETERED</strong>：连接非计量网络。</p>
</li>
</ul>
</li>
<li><p><strong>setRequiresCharging (boolean requiresCharging)</strong>：设置是否连接电源，默认值为 false。</p>
</li>
<li><p><strong>setRequiresDeviceIdle (boolean requiresDeviceIdle)</strong>：设置是否需要设备处于空闲模式，默认值为 false。空闲模式是系统提供的一种松散模式，意味着设备没有在使用或者已经有一段时间没有使用，这正是执行繁重任务的好时机。</p>
</li>
<li><p><strong>addTriggerContentUri (JobInfo.TriggerContentUri uri)</strong>：API 24 支持使用 content provider 变化作为触发任务执行的时机。需要指定触发 URL，并通过 ContentObserver 监听 content provider 变化，从而触发任务的执行。注意设置该属性后，不能设置 <strong>setPeriodic(long)</strong> 或者 <strong>setPersisted(boolean)</strong> 属性，也就是说不能与他们任何一个一起使用。因为他们之间是不兼容的，如果一起使用的话，当 <strong>build()</strong> 被调用时，会抛出 <strong>IllegalArgumentException</strong> 异常。为了持续监听 content 变化，需要在 JobService 完成最近变化执行的任务之前，调用新的 JobInfo 观察相同的 URL。</p>
</li>
<li><p><strong>setTriggerContentMaxDelay (long durationMs)</strong>：设置当第一次监听到 content 变化到任务执行时可以延迟的最大时间，以毫秒为单位。</p>
</li>
<li><p><strong>setTriggerContentUpdateDelay (long durationMs)</strong>：设置当监听到 content 变化时到任务执行时可以延迟的时间，如果在这期间监听到更多变化，那么延迟时间的计时将被重置到最近一次更改开始。</p>
</li>
<li><p><strong>setBackoffCriteria (long initialBackoffMillis, int backoffPolicy)</strong>：设置 back-off 或者 重试策略。注意尝试调用 <strong>setRequiresDeviceIdle(boolean)</strong> 为任务设置回退策略时，当 <strong>build()</strong> 被调用时会抛出异常。因为 back-off 对这些工作类型没意义。</p>
<p>  第一个参数表示第一次失败时尝试的时间间隔，单位为毫秒，预设的参数有：</p>
<ul>
<li><p>DEFAULT_INITIAL_BACKOFF_MILLIS：30000</p>
</li>
<li><p>MAX_BACKOFF_DELAY_MILLIS：18000000</p>
<p>第二个参数表示退避策略</p>
</li>
<li><p>BACKOFF_POLICY_EXPONENTIAL：任务失败时等待间隔呈指数增长。</p>
</li>
<li><p>BACKOFF_POLICY_LINEAR：任务失败时等待间隔呈线性增长。</p>
</li>
</ul>
</li>
<li><p><strong>setMinimumLatency (long minLatencyMillis)</strong>：指定任务延迟执行时间。</p>
</li>
<li><p><strong>setOverrideDeadline (long maxExecutionDelayMillis)</strong>：设置任务执行最大的延迟时间。即使到了时间期限，条件还没满足，任务也会被执行。</p>
</li>
<li><p><strong>setPeriodic (long intervalMillis)</strong>：指定任务在一定的周期内执行，并且每一个任务在周期内只执行一次。调用该方法设置后，不能再调用 <strong>setMinimumLatency (long minLatencyMillis)</strong> 或者 <strong>setOverrideDeadline (long maxExecutionDelayMillis)</strong> 方法，否则会抛出异常。</p>
</li>
<li><p><strong>setPersisted (boolean isPersisted)</strong>：设置当设备重启，任务是否被重新调度。如果设置 true，必须申请权限 <strong>RECEIVE_BOOT_COMPLETED</strong>，否则运行时会报错。</p>
</li>
<li><p><strong>setExtras (PersistableBundle extras)</strong>：设置额外参数，值允许原始数据类型。</p>
</li>
</ul>
<h4 id="JobService"><a href="#JobService" class="headerlink" title="JobService"></a>JobService</h4><p>JobScheduler 所要调度的任务是在 JobService 定义的，而 JobService 是继承 Service；也就是说，JobService 也是服务，只是它与四大组件之一 Service 有所区别。JobService 有一大特点是无论你的 app 是否处于活跃状态，当你的任务满足特定的条件时，系统都会执行任务。我们可以编写多个 JobServices，而且每个 JobService 指定不同的任务，每个任务在某个时间点被执行。</p>
<p>来看下官方文档的描述</p>
<blockquote>
<p><a href="https://developer.android.com/reference/android/app/job/JobScheduler.html#RESULT_FAILURE" target="_blank" rel="external">JobScheduler</a> 回调的入口点。</p>
<p>JobService 是处理之前调度的异步请求的基类。你应该重写 <a href="https://developer.android.com/reference/android/app/job/JobService.html#onStartJob(android.app.job.JobParameters" target="_blank" rel="external">onStartJob (JobParameters params)</a>) 方法，将在该方法实现你的任务逻辑。</p>
<p>此服务运行在应用程序主线程处理传入的任务。这意味着你必须将执行逻辑放到子线程、handler、<a href="https://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="external">AsyncTask</a>。如果不这样做的话会阻塞 JobManager 的回调，特别是 <a href="https://developer.android.com/reference/android/app/job/JobService.html#onStopJob(android.app.job.JobParameters" target="_blank" rel="external">onStopJob(android.app.job.JobParameters)</a>)，这意味着将通知你不满足调度要求。</p>
</blockquote>
<p>那么该如何实现 JobService 呢？必须创建一个新类，继承 JobService，并重写方法 <strong>onStartJob(JobParameters)</strong> 和 <strong>onStopJob(android.app.job.JobParameters)</strong>。下面给出一个模板：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobSchedulerService</span> <span class="keyword">extends</span> <span class="title">JobService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartJob</span><span class="params">(JobParameters params)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStopJob</span><span class="params">(JobParameters params)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从以上可知，两个方法都返回 boolean 值，那么什么时候返回 true，什么时候返回 false 呢，返回值对 JobScheduler 任务调度又有什么影响呢？下面一一来解析：</p>
<ul>
<li><p><strong>onStartJob(JobParameters)</strong>：在此方法实现任务的逻辑。由于 JobService 是在主线程运行，因此对于逻辑简单的可以直接写在该方法里，但是对于比较复杂任务，例如网络请求，那么就要开启子线程来操作，以免造成阻塞。当任务完成的时候返回 <strong>false</strong>，作用是通知系统任务已经完成；当有任务要执行的话返回 <strong>true</strong>，作用是让系统知道有任务即将执行或正在执行，并对该任务持有锁。因为任务一旦完成并通知系统，系统就释放持有该任务锁。</p>
</li>
<li><p><strong>onStopJob (JobParameters params)</strong>：当任务未完成调用 <a href="https://developer.android.com/reference/android/app/job/JobService.html#jobFinished(android.app.job.JobParameters, boolean" target="_blank" rel="external">jobFinished(JobParameters, boolean)</a>) 取消任务时，此方法就会被调用。发生这种现象的原因大部分是调度的任务不满足所指定的条件，导致系统无法执行任务。当任务停止时，如果还想系统重新调度任务的话，那么返回 <strong>true</strong>；反之返回 <strong>false</strong>，此时系统会移除任务，导致所要调度的任务必须暂停。</p>
</li>
</ul>
<p>除此之外，JobService 还提供了 <a href="https://developer.android.com/reference/android/app/job/JobService.html#jobFinished(android.app.job.JobParameters, boolean" target="_blank" rel="external">jobFinished(JobParameters, boolean)</a>) 这个方法，虽然不用重写该方法，但是该方法却有很大的作用。此回调方法用来通知 JobManager 任务已经完成。由于此方法最终在主线程调用，因此可以在任何线程调用该方法。当系统收到信息时，就会释放持有该任务锁。当 <strong>onStartJob(JobParameters)</strong> 返回 true，即表示任务正在执行或要被执行，在任务执行完成后需要调用 <strong>jobFinished(JobParameters, boolean)</strong> 方法来通知系统任务已经完成，此时系统才可以安全地释放持有该任务锁。如果忘记调用该方法的话，应用中其它任务就不会被执行。</p>
<p><strong>jobFinished(JobParameters, boolean)</strong> 需要传入两个参数：第一个参数 JobParameters 表示当前任务的信息，以至于任务完成时系统知道释放哪个锁；第二个参数是 boolean 值，<strong>true</strong> 表示根据退避策略（back-off criteria）重新调度任务；<strong>false</strong> 则表示不调度任务。</p>
<p>跟四大组件之一 service 一样，都需要在 AndroidManifest.xml 声明，但是有一点不同的是需要添加权限 <strong>android:permission=”android.permission.BIND_JOB_SERVICE”</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;service </div><div class="line">	android:permission=<span class="string">"android.permission.BIND_JOB_SERVICE"</span></div><div class="line">	android:name=<span class="string">".service.JobSchedulerService"</span> &gt;</div></pre></td></tr></table></figure>
<h4 id="JobParameters"><a href="#JobParameters" class="headerlink" title="JobParameters"></a>JobParameters</h4><p>来看下官方文档描述</p>
<blockquote>
<p>JobParameters 对任务的信息进行封装，当任务被调度时，系统就会创建该对象，包含任务的信息；自己是无法实例化该对象的。</p>
</blockquote>
<p>PS：自己觉得是与 JobInfo 对应的，JobInfo 是设置属性，而 JobParameters 是获取相应属性。</p>
<p>那么来看下 JobParameters 提供的方法，只列出部分：</p>
<ul>
<li><p><strong>getJobId ()</strong>：获取每个任务独一无二的 id。</p>
</li>
<li><p><strong>getExtras ()</strong>：获取额外参数。</p>
</li>
</ul>
<p>了解 API 之后，接下来的任务是学习 JobScheduler 用法。</p>
<h2 id="JobScheduler-用法"><a href="#JobScheduler-用法" class="headerlink" title="JobScheduler 用法"></a>JobScheduler 用法</h2><p>对于 JobScheduler 的用法，我打算用项目中使用到 JobScheduler 作为例子，前提是移除了业务逻辑，代码可能不太完整。换句话说吧，给个模板吧。</p>
<p>先给出例子，再来分步讲解吧。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobSchedulerService</span> <span class="keyword">extends</span> <span class="title">JobService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = JobSchedulerService.class.getCanonicalName();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TASK = <span class="string">"com.demo.panju.task"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> JOB_ID = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ComponentName mComponentName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JobScheduler mJobScheduler;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">switch</span>(msg.what) &#123;</div><div class="line">            	<span class="keyword">case</span> <span class="number">1</span>；</div><div class="line">            		task();</div><div class="line">            		<span class="keyword">break</span>;</div><div class="line">            			</div><div class="line">            	<span class="keyword">default</span>:</div><div class="line">            		<span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">        mReceiver = <span class="keyword">new</span> Receiver();</div><div class="line">        mFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        </div><div class="line">        mComponentName = <span class="keyword">new</span> ComponentName(getPackageName(), JobSchedulerService.class.getName());</div><div class="line">        mJobScheduler = (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);</div><div class="line"></div><div class="line">        registerReceiver();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartJob</span><span class="params">(JobParameters params)</span> </span>&#123;</div><div class="line">        sendMessage(params);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStopJob</span><span class="params">(JobParameters params)</span> </span>&#123;</div><div class="line">        mHandler.removeMessages(<span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLowMemory();</div><div class="line">        stopSelf();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mReceiver) &#123;</div><div class="line">            unregisterReceiver(mReceiver);</div><div class="line">            mReceiver = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scheduleJob</span><span class="params">(<span class="keyword">int</span> jobId)</span> </span>&#123;</div><div class="line">        JobInfo.Builder builder = <span class="keyword">new</span> JobInfo.Builder(jobId, mComponentName);</div><div class="line">        builder.setPersisted(<span class="keyword">true</span>);</div><div class="line">        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);</div><div class="line">        builder.setOverrideDeadline(<span class="number">500</span>);</div><div class="line">        mJobScheduler.schedule(builder.build());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(JobParameters parameters)</span> </span>&#123;</div><div class="line">        Message message = mHandler.obtainMessage();</div><div class="line">        message.what = <span class="number">1</span>;</div><div class="line">        message.obj = parameters;</div><div class="line">        mHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerReceiver</span><span class="params">()</span> </span>&#123;</div><div class="line">        mFilter.addAction(TASK);</div><div class="line">        registerReceiver(mReceiver, mFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</div><div class="line">        mApi.task(<span class="keyword">new</span> Callback() &#123;&#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object result)</span> </span>&#123;</div><div class="line">                jobFinished(mJobParameters, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Object e, <span class="keyword">int</span> errno)</span> </span>&#123;</div><div class="line">                jobFinished(mJobParameters, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            String action = intent.getAction();</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (TASK.equals(action)) &#123;</div><div class="line">                 scheduleJob(JOB_ID);</div><div class="line">            &#125;</div><div class="line">     	&#125;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>以上例子应该不难理解，接下来分步讲解：</p>
<ul>
<li><p>创建新类 JobSchedulerService 并继承 Service，重写方法 <strong>onStartJob(JobParameters params)</strong> 和 <strong>onStopJob(JobParameters params)</strong>。<strong>onStartJob(JobParameters params)</strong> 返回 <strong>true</strong> 表示任务将被执行；<strong>onStopJob(JobParameters params)</strong> 返回 <strong>false</strong> 表示当任务中途被取消而导致暂停任务，系统将会移除任务。</p>
</li>
<li><p>创建 JobScheduler 和 ComponentName 对象</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mComponentName = <span class="keyword">new</span> ComponentName(getPackageName(), JobSchedulerService.class.getName());</div><div class="line">  mJobScheduler = (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>对调度任务所需要的属性进行封装</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scheduleJob</span><span class="params">(<span class="keyword">int</span> jobId)</span> </span>&#123;</div><div class="line">       JobInfo.Builder builder = <span class="keyword">new</span> JobInfo.Builder(jobId, mComponentName);</div><div class="line">       builder.setPersisted(<span class="keyword">true</span>);</div><div class="line">       builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);</div><div class="line">       builder.setOverrideDeadline(<span class="number">500</span>);</div><div class="line">       mJobScheduler.schedule(builder.build());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>编写广播接收器、注册接收器、重写 Handler 回调方法 handleMessage(Message msg) 并实现相应逻辑。</p>
</li>
<li><p>当注册的广播接收器收到相应 action 时，就会调用方法 scheduleJob(JOB_ID)，即调度任务，那么方法 onStartJob(JobParameters params) 就会被调用，在该方法里通过 Handler 机制发送消息，Handler 的回调方法 handleMessage(Message msg) 就会被调用，实现的逻辑主要是发起网络请求，即 task() 方法。task() 方法逻辑中有两个回调方法：onSuccess(Object result) 和 onError(Object e, int errno)。发起网络请求成功的话就会调用方法 onSuccess(Object result)，在该方法里又调用 jobFinished(mJobParameters, false)，传入的 boolean 值是 false，意味着任务已经成功完成，无需重新调度任务；发起网络请求失败的话就会调用 onError(Object e, int errno)，在该方法里又会调用 jobFinished(mJobParameters, true)，传入的 boolean 值是 true，意味着任务失败，根据重试策略重新调度任务。</p>
</li>
</ul>
<p>由于自己的水平有限，若有些地方描述的不对或者翻译的不恰当（参考官方文档和国外博客），欢迎指出 ！ 大家一起学习，共同进步 ！</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.android.com/reference/android/app/job/JobScheduler.html#RESULT_FAILURE" target="_blank" rel="external">官方文档</a></p>
<p><a href="https://medium.com/google-developers/scheduling-jobs-like-a-pro-with-jobscheduler-286ef8510129" target="_blank" rel="external">https://medium.com/google-developers/scheduling-jobs-like-a-pro-with-jobscheduler-286ef8510129</a></p>
<p><a href="http://josiassena.com/the-jobscheduler-on-android/" target="_blank" rel="external">http://josiassena.com/the-jobscheduler-on-android/</a></p>
<p><a href="http://blog.csdn.net/bboyfeiyu/article/details/44809395" target="_blank" rel="external">http://blog.csdn.net/bboyfeiyu/article/details/44809395</a></p>
<p><a href="http://zhanghuimin.com/2016/10/27/about-android-job-scheduler/" target="_blank" rel="external">http://zhanghuimin.com/2016/10/27/about-android-job-scheduler/</a></p>
<p><a href="http://mahong978.top/2016/08/19/android-job-scheduler/" target="_blank" rel="external">http://mahong978.top/2016/08/19/android-job-scheduler/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;先来聊聊怎么会知道 JobSchduler 这神奇的东西。公司项目有这么一个需求：平板上实时记录小朋友的学习情况，然后生成学习报告上传到服务
    
    </summary>
    
      <category term="Android" scheme="https://panzeyong.github.io/categories/Android/"/>
    
    
      <category term="性能优化" scheme="https://panzeyong.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>第二章 在 HTML 中使用 JavaScript</title>
    <link href="https://panzeyong.github.io/2017/05/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9C%A8-HTML-%E4%B8%AD%E4%BD%BF%E7%94%A8-JavaScript/"/>
    <id>https://panzeyong.github.io/2017/05/04/第二章-在-HTML-中使用-JavaScript/</id>
    <published>2017-05-03T23:40:59.000Z</published>
    <updated>2017-05-03T23:57:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>script：表示向 HTML 页面插入 JavaScript。该元素定义 6 个属性：</p>
<ul>
<li><p>async：可选。表示应该立即下载脚本，但不应妨碍页面中的其它内容加载。只对<strong>外部脚本</strong>文件有效。标记为 async 的脚本并不能保证按照指定的的先后顺序执行，一定会在页面的 load 事件前执行，但是对于 DOMContentLoaded 事件就不一定了。建议异步脚本不要在加载期间修改 DOM。</p>
</li>
<li><p>charset：可选。表示通过 src 属性指定的代码的字符集。</p>
</li>
<li><p>defer：可选。表示所要加载的脚本可以延迟到文档完全被解析和显示之后再执行，即遇到 html 标签之后才执行；只对<strong>外部脚本</strong>文件有效。HTML 5 规范要求延迟脚本是按照出现的顺序执行的，并且先于 DOMContentLoaded 事件，但是现实是不一定的，因此最好只包含一个延迟脚本。</p>
</li>
<li><p>language：已经废弃。</p>
</li>
<li><p>src：可选。表示包含要执行代码的外部文件。</p>
</li>
<li><p>type：可选。language 的替代属性。表示编写代码使用的脚本语言的内容类型（MIME 类型）。通常的默认值为 <code>text/javascript</code>。</p>
</li>
</ul>
<p>noscript：在不支持 JavaScript 的浏览器中显示替代的内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;noscript&gt;</div><div class="line">	&lt;p&gt;本页面需要浏览器支持（启用）JavaScript&lt;/p&gt;</div><div class="line">&lt;<span class="regexp">/noscript&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li><p>解释器对 script 元素内代码的解析是从上往下，在该元素内的代码被解析完之前，页面其它内容是不会被浏览器加载或者显示的。（外部文件也一样）</p>
</li>
<li><p>通过 src 属性引入外部文件必须要包含开始的 script 和结束的 script，只是 HTML 规范。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javasript"</span> src=<span class="string">"example.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>带有 src 属性的 script 元素不应该在其元素之间包含额外的 JavaScritp 代码，如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。</p>
</li>
<li><p>JavaScript 代码建议放在 body 元素中页面内容之后</p>
</li>
</ul>
<p>以上是在学习 《JavaScript 高级程序设计》（第 3 版）这本书第二章的学习笔记，主要把书中讲到的要点记录下来，方便自己查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h3&gt;&lt;p&gt;script：表示向 HTML 页面插入 JavaScript。该元素定义 6 个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;async：可选。
    
    </summary>
    
      <category term="《JavaScript 高级程序设计》学习笔记" scheme="https://panzeyong.github.io/categories/%E3%80%8AJavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://panzeyong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AsnycTask 用法及源码解析</title>
    <link href="https://panzeyong.github.io/2017/05/01/AsnycTask-%E7%94%A8%E6%B3%95%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://panzeyong.github.io/2017/05/01/AsnycTask-用法及源码解析/</id>
    <published>2017-05-01T09:49:39.000Z</published>
    <updated>2017-05-03T23:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>AsyncTask 是一种轻量级异步任务类，可以在线程池执行后台任务，获取到的结果传递给主线程并且在主线程中更新 UI。AsyncTask 比较适合执行短时间任务，对于长时间任务推荐使用 Executor，ThreadPoolExecutor 和 FutureTask。</p>
<p>AsyncTask 是一个抽象类，提供三个泛型参数，分别是 Params，Progress 和 Result；以及 4 个步骤：onPreExecute，doInBackground，onProgressUpdate 和 onPostExecute。</p>
<h4 id="AsyncTask-三个泛型参数"><a href="#AsyncTask-三个泛型参数" class="headerlink" title="AsyncTask 三个泛型参数"></a>AsyncTask 三个泛型参数</h4><ul>
<li><p>Params：发送给执行任务的参数类型。</p>
</li>
<li><p>Progress：执行后台任务进度的类型。</p>
</li>
<li><p>Result：执行完后台任务返回的结果类型。</p>
</li>
</ul>
<h4 id="AsyncTask-四个核心方法"><a href="#AsyncTask-四个核心方法" class="headerlink" title="AsyncTask 四个核心方法"></a>AsyncTask 四个核心方法</h4><ul>
<li><p><strong>onPreExecute(</strong>)：在任务执行之前调用，主线程执行；主要做一些初始化工作，比如在用户界面展示进度条。</p>
</li>
<li><p><strong>doInBackground(Params…)</strong>：onPreExecute() 执行完成后被调用，在线程池执行；所有的异步操作都在这个方法执行，执行结果被返回时，onPostExecute(Result) 会被调用。如果在该方法中调用 publishProgress(Progress…)，那么方法 onProgressUpdate(Progress…) 也会被调用，主要用于更新后台任务进度。</p>
</li>
<li><p><strong>onProgressUpdate(Progress…)</strong>：publishProgress(Progress…) 执行完之后被调用，在主线程执行；主要在用户界面显示后台任务执行进度。</p>
</li>
<li><p><strong>onPostExecute(Result)</strong>：doInBackground(Params…) 执行完之后调用，在主线程执行；参数 Result 是 doInBackground(Params…) 的返回值。</p>
</li>
</ul>
<p>一个异步任务可以通过调用 cancel(boolean) 随时取消，此时 isCancelled() 被调用，这就导致 doInBackground(Params…) 执行完后 onPostExecute(Result) 不会被调用。</p>
<p>在使用 AsyncTask 的过程中，要注意以下几点：</p>
<ul>
<li><p>AsyncTask 类必须在 UI 线程加载，Android 4.1 已经自动绑定了。</p>
</li>
<li><p>AsyncTask 实例必须在 UI 线程创建。</p>
</li>
<li><p>execute(Params…) 必须在 UI 线程调用。</p>
</li>
<li><p>不要手动调用 onPreExecute()、onPostExecute(Result)、doInBackground(Params…)、onProgressUpdate(Progress…)。</p>
</li>
<li><p>一个 AsyncTask 对象只能被执行一次；否则会抛异常。</p>
</li>
</ul>
<p>以上是 AsnycTask 基本知识点，掌握知识点后就要学会如何使用它。那么接下来就来学习 AsyncTask 用法。</p>
<h4 id="AsyncTask-用法"><a href="#AsyncTask-用法" class="headerlink" title="AsyncTask 用法"></a>AsyncTask 用法</h4><p>AsyncTask 是抽象类，不能直接实例化，必须创建新类并继承它，抽象方法 doInBackground(Params…) 是一定要重写的，其它三个方法根据自己的需求确定。以下通过 URL 获取数据为例子来讲解 AsyncTask 的用法。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskExample</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onPreExecute();</div><div class="line">		mLoad.setVisibility(View.VISIBLE);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> getUrlResponse(params[<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onPostExecute(s);</div><div class="line">     	mLoad.setVisibility(View.GONE);</div><div class="line">     	mText.setText(s);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中可以很清晰地看出，第 5 行是显示加载进度条，表示正在获取数据；第 10 行是核心代码，异步操作，网络请求数据并将结果返回；第 16 - 17 行代码主要操作是隐藏进度条，表示数据加载完毕，并将获取到的结果显示出来。这里主要给出核心代码，至于其它代码也就调用而已。</p>
<p>那么该如何调用呢？很简单，一行代码就搞定</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> AsyncTaskExample().execute(url);</div></pre></td></tr></table></figure>
<h4 id="AsyncTask-源码解析"><a href="#AsyncTask-源码解析" class="headerlink" title="AsyncTask 源码解析"></a>AsyncTask 源码解析</h4><p>知其然必知其所以然。对于新知识点，学会使用之后，就应该探究其原理。由于个人倾向于通过画图来理解知识点的流程，因此先简单地给出 AsyncTask 任务执行的流程图，再根据流程图和源码进行讲解。流程图如下：</p>
<p><img src="/images/asynctask/asynctask.png" alt=""></p>
<p>对于源码的理解，一般是以最终调用的方法为入口，一步一步地理解整个流程。那么对于 AsyncTask 该从哪里入手呢？当然是从方法 execute(Params… params) 入手了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于 AsyncTask 不同版本，execute(Params… params) 方法的执行方式是不一样的。Android 1.6 以前，AsyncTask 是单线程串行执行任务的；Android 1.6，AsyncTask 是线程池多线程并行执行任务；但是到 Android 3.0，AsyncTask 又改为单线程串行执行任务的。该方法的逻辑很简单，直接调用方法 executeOnExecutor(Executor exec, Params… params)，将我们传入的参数 params 和 sDefaultExecutor 传到该方法里，并将的返回值返回。那么来看下该方法的具体实现，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec, Params... params)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">		<span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">			<span class="keyword">case</span> RUNNING:</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> +  <span class="string">" the task is already running."</span>);</div><div class="line">			<span class="keyword">case</span> FINISHED:</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> +  <span class="string">" the task has already been executed "</span> +  <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">		&#125;</div><div class="line">   	&#125;</div><div class="line">   	</div><div class="line">   	mStatus = Status.RUNNING;</div><div class="line">     onPreExecute();</div><div class="line">     mWorker.mParams = params;</div><div class="line">     exec.execute(mFuture);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>executeOnExecutor(Executor exec, Params… params) 方法是在线程池 THREAD_POOL_EXECUTOR 执行，允许多任务并发执行，但是不推荐采用多任务并发执行；在主线程执行。该方法实现的主要功能是：</p>
<ul>
<li><p>检查任务状态，并记录任务当前状态；</p>
</li>
<li><p>调用 onPreExecute() 方法，根据我们自己的需求可以重写该方法；</p>
</li>
<li><p>将我们传入的参数 params 赋值给 WorkRunnable 中字段 mParams(稍后解释)；</p>
</li>
<li><p>调用 SerialExecutor 中方法 execute(Runnable r) 执行任务。</p>
</li>
</ul>
<p>mWorker 是 WorkerRunnable<params, result=""> 实例，而 WorkerRunnable 是抽象类，实现 Callable 接口，并且该接口有一个回调方法 call()；同时抽象类有一个字段 Params []，第 13 行代码就是把我们传进来的参数 params 赋值给它的。mWorker 是在创建 AsyncTask 实例时被初始化的，即 AsyncTask 构造方法里，并重写回调方法 call()，那么接下来看回调方法 call() 的具体实现。</params,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line">		Result result = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">			<span class="comment">//noinspection unchecked</span></div><div class="line">            result = doInBackground(mParams);</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line">            mCancelled.set(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">throw</span> tr;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            postResult(result);</div><div class="line">        &#125;</div><div class="line">           	<span class="keyword">return</span> result;</div><div class="line">      	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>该回调方法实现的主要功能：</p>
<ul>
<li><p>将 mTaskInvoked 设置为 true，表示任务已经被调用过；</p>
</li>
<li><p>设置线程优先级为后台线程；</p>
</li>
<li><p>调用 doInBackground(mParams) 方法，异步执行，后台执行的逻辑都写在这个方法里面，一定要被重写；如果任务执行抛出异常时，取消任务；</p>
</li>
<li><p>调用 postResult(result) 方法；</p>
</li>
</ul>
<p>postResult(result) 的具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">	<span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">	message.sendToTarget();</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码里可以看出，将执行结果通过 sHandler 发送 MESSAGE_POST_RESULT 的消息，然后 handleMessage() 方法收到消息后进行相应的处理。sHandler 是 InternalHandler 实例，主要作用是将任务执行的环境从线程切换到主线程中，从 InternalHandler 的具体实现就可以看出了。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">		AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">		<span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">			<span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">				result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">			<span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">             	result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从构造函数 InternalHandler() 就可以看出了，获取主线程 Looper，而 Handler 必须与 Looper 进行绑定，因此可以断定是在主线程里。<code>handleMessage()</code> 函数对两种消息进行处理：MESSAGE_POST_RESULT 和 MESSAGE_POST_PROGRESS；而我们刚刚发送的消息是 MESSAGE_POST_RESULT，那就先来看该消息收到后会做什么处理吧？很显然，调用 finish(Result result)，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">		onCancelled(result);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		onPostExecute(result);</div><div class="line">	&#125;</div><div class="line">	mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果任务被取消了，直接调用 onCancelled(result) 方法，onPostExecute(result) 方法不会被调用；否则就调用 onPostExecute(result) 方法，该方法需要被重写，在主线程执行，根据返回的结果进行相应的处理；最后修改任务的状态。那么对于消息 MESSAGE_POST_PROGRESS 是从哪里发出来的呢？还记得在前面的知识点讲解中有提到过如果在 doInBackground(mParams) 方法中调用 publishProgress(Progress…) 方法时，方法 onProgressUpdate(Progress…) 也会被调用，用于后台任务进度更新。没错，消息 MESSAGE_POST_PROGRESS 就是用来处理进度更新的。先看下 publishProgress(Progress…) 具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">		getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">		<span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很显然，如果任务没有被取消的话，就会发送消息 MESSAGE_POST_PROGRESS，那么来看下收到该消息后的处理逻辑，即调用 onProgressUpdate(Progress… values) 方法，该方法需要我们根据自己的需求进行重写。</p>
<p>再回到 executeOnExecutor(Executor exec, Params… params) 方法，第 14 行代码开始执行任务，在理解如何执行任务之前，先来理解参数 mFuture 和 sDefaultExecutor 的含义。</p>
<p>mFuture 是 FutureTask<result> 实例，在 AsyncTask 构造方法中初始化。将 mWorker 作为参数传入 FutureTask 构造函数，个人认为传入该参数的作用是由于 FutureTask 中 run() 方法会被调用，而在该方法里会通过传入参数 mWorker 调用 call() 方法，进而使任务得到执行。FutureTask 是一个并发执行任务类，可以执行任务、取消任务、查询结果、获取结果；提交到线程池执行。实现的接口有 Future、Runnable。</result></p>
<p>对于传入的参数 sDefaultExecutor，究竟是什么啥玩意呢？让我们来探个究竟吧。sDefaultExecutor 是 SerialExecutor 的实例，而 SerialExecutor 实际上是一个串行的线程池，主要的功能是一个进程中所有的 AsyncTask 任务都在这个串行的线程池中排队执行。看到这里，是不是还不知道任务真正在哪里被开始执行？其实以上都只是铺垫，下面才真正拉开序幕。真正开始执行任务的逻辑是在 SerialExecutor 中 execute(Runnable r) 方法里，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">	Runnable mActive;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">		mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					r.run();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					scheduleNext();</div><div class="line">              	&#125;</div><div class="line">             &#125;</div><div class="line">         &#125;);</div><div class="line">            </div><div class="line">         <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">         	scheduleNext();</div><div class="line">         &#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">			THREAD_POOL_EXECUTOR.execute(mActive);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先将 AsyncTask 通过线程池 SerialExecutor 添加到队列里（从这里可以看出 SerialExecutor 的作用），然后重写 run() 方法，并判断 mActive 是否为 null，即当前是否有任务在执行，如果有任务执行的话就等待该任务执行完后再执行其他任务，否则就执行任务，即调用 scheduleNext() 方法，该方法的主要功能是从队列 mTasks 获取任务，任务不为空的话就直接提交到线程池 THREAD_POOL_EXECUTOR 里执行（任务真正开始执行），即启动任务，根据个人的理解，任务被启动后，会调用第 6 行代码，即 run() 方法，进而调用 FutureTask 中 run() 方法，从而会调用 WorkerRunnable 中 call() 方法，因此任务被执行，我们重写的方法也会被调用。结合以上流程图应该能更清晰地理解 AsyncTask 执行流程。</p>
<p>以上是自己在学习 《Android 开发艺术探索》 这本书第十一章关于 AsyncTask 这个主题的学习笔记，由于自己能力有限，有错误的地方欢迎指出。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="external">https://developer.android.com/reference/android/os/AsyncTask.html</a></p>
<p>《Android 开发艺术探索》》中 第 11 章 Android 的线程和线程池</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AsyncTask 是一种轻量级异步任务类，可以在线程池执行后台任务，获取到的结果传递给主线程并且在主线程中更新 UI。AsyncTask 比较适合执行短时间任务，对于长时间任务推荐使用 Executor，ThreadPoolExecutor 和 FutureTask。&lt;/
    
    </summary>
    
      <category term="《Android 开发艺术探索》学习笔记" scheme="https://panzeyong.github.io/categories/%E3%80%8AAndroid-%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://panzeyong.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记：字符串</title>
    <link href="https://panzeyong.github.io/2017/04/17/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://panzeyong.github.io/2017/04/17/Python-学习笔记：字符串/</id>
    <published>2017-04-17T14:27:28.000Z</published>
    <updated>2017-04-21T23:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>定义：Python 的字符串是一种对象类型，这种类型用 <code>str</code> 表示，通常用双引号 <code>“”</code> 或者单引号 <code>‘’</code> 表示。</p>
<h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><p>Python 的字符串是可以拼接，用符号 <code>+</code> 表示；但是与 Java 语言有一点不同的是拼接的两个对象必须是同类型，否则会报错。例子如下：</p>
<p>两个相同类型 str 拼接（正确）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Hello "</span> + <span class="string">"Python"</span></div><div class="line"><span class="string">'Hello Python'</span></div></pre></td></tr></table></figure>
<p>两个相同类型 int 拼接（正确）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">3</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<p>两个不同类型 str 和 int 拼接（错误）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python "</span> + <span class="number">5</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: Can<span class="string">'t convert '</span>int<span class="string">' object to str implicitly</span></div></pre></td></tr></table></figure>
<p>很显然，对于类型都是 str 将多个对象拼接起来；对于类型都是 int 则执行相加操作；对于不同类型则报错。那么对于不同类型的操作该如何转换呢？解决办法如下：</p>
<ul>
<li><p>str() 函数</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python "</span> + str(<span class="number">3</span>)</div><div class="line"><span class="string">'Python 3'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>repr() 函数（反引号的替代品）</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python "</span> + repr(<span class="number">3</span>)</div><div class="line"><span class="string">'Python 3'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>str() 与 repr() 区别</p>
<ul>
<li><p>str() 将对象转化为可读性好的字符串，适合于 <code>print</code> 输出到终端，其返回值无法用于内建函数 <code>eval</code>。</p>
</li>
<li><p>repr() 返回对象的规范字符串表示形式；对于大多数对象而言，<code>eval（repr（obj））== obj</code>，也就是说，大多数情况下可以通过内建函数 <code>eval</code> 重新获取该对象。</p>
</li>
<li><p>大部分情况下 <code>str()</code> 用于终端输出，<code>eval()</code> 主要用于调试。</p>
</li>
</ul>
<h4 id="字符串格式化输出"><a href="#字符串格式化输出" class="headerlink" title="字符串格式化输出"></a>字符串格式化输出</h4><p>用于指定输出参数的格式与相对位置的字符串参数。通俗地讲，先定制模板，预留占位符，用对应类型的值填充；常用的占位符有 %s（字符串）、%d（整数）、%f（浮点数）。</p>
<p>以下通过例子说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"I love my %s"</span> % <span class="string">"job"</span> </div><div class="line"><span class="string">'I love my job'</span></div></pre></td></tr></table></figure>
<p>在这个字符串中，<code>%s</code> 是一个占位符，可以被其它字符串替换，这里替换的是 “job”。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"I'm %d years old"</span> % <span class="number">20</span></div><div class="line"><span class="string">"I'm 20 years old"</span></div></pre></td></tr></table></figure>
<p>不同占位符也可以混合使用，例子如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"What's your name ? My name is %s and I'm %d years old."</span> % (<span class="string">"John"</span>, <span class="number">15</span>)</div><div class="line"><span class="string">"What's your name ? My name is John and I'm 15 years old."</span></div></pre></td></tr></table></figure>
<h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><p><strong>index(…)</strong>：子字符串在整个字符串中的索引，即子字符串中第一个字符的位置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"The programming language Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.index(<span class="string">"Python"</span>)</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
<p><strong>isalnum(…)</strong>：字符串中所有字符都是字母数字时返回 True，否则 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"199993"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 包含空格，并非全是字母数字，所以返回 False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python 3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isalpha(…)</strong>：字符串中所有字符都是字母时返回 True，否则 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalpha()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 包含数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalpha()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 包含空格（其它符号也一样，比如 "\"、"%"等）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalpha()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isdecimal(…)</strong>：字符串中只有十进制字符时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Unicode 数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># byte数字（单字节）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">b"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'bytes'</span> object has no attribute <span class="string">'isdecimal'</span></div><div class="line"></div><div class="line"><span class="comment"># 全角数字（双字节)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 汉字数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"五"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 包含字母</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python1993"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 包含空格（其它符号也一样，比如 "\"、"%"等）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1993 1993"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isdigit(…)</strong>：字符串中所有字符都是数字 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Unicode 数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># byte数字（单字节）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">b"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 全角数字（双字节)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 汉字数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"五"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isnumeric(…)</strong>：字符串中只有数字字符时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Unicode 数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># byte数字（单字节）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">b"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'bytes'</span> object has no attribute <span class="string">'isnumeric'</span></div><div class="line"></div><div class="line"><span class="comment"># 全角数字（双字节)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 汉字数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"五"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>提示：isdecimal()、isdigit()、isnumeric() 三个函数区别如上。</p>
<p><strong>islower(…)</strong>：字符串中所有字符都是小写时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.islower()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.islower()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isupper(…)</strong>：字符串中所有字符都是大写时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"PYTHON"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isupper()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isupper()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>join(…)</strong>：将序列中的元素以指定的字符连接成生成新的字符串。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"-"</span> <span class="comment"># 指定的字符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>seq = <span class="string">"Hello,Python"</span> <span class="comment"># 序列</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.join(seq)</div><div class="line"><span class="string">'H-e-l-l-o-,-P-y-t-h-o-n'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"-"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>seq = [<span class="string">'Python'</span>, <span class="string">'PHP'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.join(seq)</div><div class="line"><span class="string">'Python-PHP'</span></div></pre></td></tr></table></figure>
<p><strong>lower(…)</strong>：返回字符串的副本并将其转换为小写。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Welcome to Python World !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.lower()</div><div class="line"><span class="string">'welcome to python world !'</span></div></pre></td></tr></table></figure>
<p><strong>upper(…)</strong>：返回字符串的副本并将其转换为大写。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Welcome to Python World !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.upper()</div><div class="line"><span class="string">'WELCOME TO PYTHON WORLD !'</span></div></pre></td></tr></table></figure>
<p><strong>capitalize(…)</strong>：字符串中首字母大写，其它都是小写。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.capitalize()</div><div class="line"><span class="string">'Hello python'</span></div></pre></td></tr></table></figure>
<p><strong>istitle(…)</strong>：字符串中所有单词的首字母大写，其它小写时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"hello python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"HELLO PYTHON"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>split(…）</strong>：根据分隔符对字符串进行分割，返回列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.split()</div><div class="line">[<span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'Python'</span>, <span class="string">'!'</span>]</div></pre></td></tr></table></figure>
<p><strong>strip(…)</strong>：去掉字符串左右空格。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">" I love Python ! "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.strip()</div><div class="line"><span class="string">'I love Python !'</span></div></pre></td></tr></table></figure>
<p><strong>lstrip(…)</strong>：去掉字符串左边空格。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">" I love Python ! "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.lstrip()</div><div class="line"><span class="string">'I love Python ! '</span></div></pre></td></tr></table></figure>
<p><strong>rstrip(…)</strong>：去掉字符串右边空格。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">" I love Python ! "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.rstrip()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' I love Python !'</span></div></pre></td></tr></table></figure>
<p><strong>len(…)</strong>：返回序列（字符串）的长度。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(string)</div><div class="line"><span class="number">15</span></div></pre></td></tr></table></figure>
<p><strong>in</strong>：判断字符串是否包含某个字符或子字符串，包含的话返回 True；否则返回 False。（区分大小写）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"python"</span> <span class="keyword">in</span> string</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python"</span> <span class="keyword">in</span> string</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p><strong>max</strong>：根据 ASCII 编码，求出字符串中最大值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(string)</div><div class="line"><span class="string">'y'</span></div></pre></td></tr></table></figure>
<p><strong>min</strong>：根据 ASCII 编码，求出字符串中最小值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(string)</div><div class="line"><span class="string">' '</span></div></pre></td></tr></table></figure>
<h4 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h4><p>与其它编程一样，在 Python 中的字符串也可以通过索引获取相应的字符，唯一的区别是获取的方式不一样。在 Python 中，字符串是一种序列，以一种数组的形式存在，可以通过下标获取。最直接的方式还是通过例子来说明吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">7</span>]</div><div class="line"><span class="string">'P'</span></div></pre></td></tr></table></figure>
<p>这种形式很类似 Java 语言中数组，但是 Java 语言中通过索引获取字符串中某个字符是通过调用 <code>charAt(index)</code> 方法获取到；获取子字符串是通过调用 <code>subString(start, end)</code> 方法，但是在 Python 获取子字符串称为<strong>切片</strong>，获取方式跟字符类似。例子如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 得到从字符串索引为 2 到 7 的子字符串。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">2</span>:<span class="number">8</span>]</div><div class="line"><span class="string">'love P'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">得到从字符串索引为 <span class="number">2</span> 到末尾的子字符串。</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">2</span>:]</div><div class="line"><span class="string">'love Python !'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取全部字符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[:]</div><div class="line"><span class="string">'I love Python !'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取从第一个字符到 9 之前的字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[:<span class="number">9</span>]</div><div class="line"><span class="string">'I love Py'</span></div></pre></td></tr></table></figure>
<p>从以上例子可以看出字符串切片的使用用法，以下做下简单的总结：</p>
<ul>
<li><p>[a : b]：表示从索引为 a 起到索引 b 之前字符串。</p>
</li>
<li><p>[:a]：从第一个字符到索引 a 之前的所有字符串。</p>
</li>
<li><p>[a : ]：表示从索引为 a 到末尾字符串。</p>
</li>
<li><p>[:]：表示原始字符串，但不是复制一份，只是两个变量指向同一个对象。</p>
</li>
</ul>
<p>以上只是最近在学 Python 中字符串的小结，也可以说是学习笔记，方便以后查找。（基于 Python3）</p>
<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="http://docs.pythontab.com/learnpython/106/" target="_blank" rel="external">http://docs.pythontab.com/learnpython/106/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义：Python 的字符串是一种对象类型，这种类型用 &lt;code&gt;str&lt;/code&gt; 表示，通常用双引号 &lt;code&gt;“”&lt;/code&gt; 或者单引号 &lt;code&gt;‘’&lt;/code&gt; 表示。&lt;/p&gt;
&lt;h4 id=&quot;拼接字符串&quot;&gt;&lt;a href=&quot;#拼接字符串&quot; clas
    
    </summary>
    
      <category term="Python" scheme="https://panzeyong.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://panzeyong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>第一章 Activity 的生命周期和启动模式</title>
    <link href="https://panzeyong.github.io/2017/03/26/%E7%AC%AC%E4%B8%80%E7%AB%A0-Activity-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://panzeyong.github.io/2017/03/26/第一章-Activity-的生命周期和启动模式/</id>
    <published>2017-03-26T08:41:15.000Z</published>
    <updated>2017-03-26T15:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p>
<h3 id="Activity-正常情况下生命周期"><a href="#Activity-正常情况下生命周期" class="headerlink" title="Activity 正常情况下生命周期"></a>Activity 正常情况下生命周期</h3><p><img src="/images/explore/activity_lifecycle.png" alt=""></p>
<ul>
<li><p>生命周期方法分析</p>
<ul>
<li><p>onCreate()：Activity 创建时调用，可以做一些初始化工作。</p>
</li>
<li><p>onRestart()：Activity 正在重新启动，由不可见状态变为可见状态。</p>
</li>
<li><p>onStart()：Activity 正在被启动，这时已经处于可见状态，但是还没出现在前台，而是在后台，无法与用户交互。</p>
</li>
<li><p>onResume()：Activity 已经处于可见状态，并且出现在前台。</p>
</li>
<li><p>onPause()：Activity 暂停，位于后台，可以做一些存储数据、停止动画等工作，但是不能太耗时。</p>
</li>
<li><p>onStop()：Activity 停止，不可见状态，可以做一些资源回收工作，但不能太耗时。</p>
</li>
<li><p>onDestroy()：Activity 销毁，可以做一些回收工作和资源释放。</p>
</li>
</ul>
</li>
<li><p>Activity 生命周期方法不同情况下调用</p>
<ul>
<li><p>Activity 第一次启动：onCreate() —&gt; onStart() —&gt; onResume()。</p>
</li>
<li><p>打开新的 Activity 或者切换到桌面：onPause() —&gt; onStop()。</p>
</li>
<li><p>回到原来 Activity：onRestart() —&gt; onStart() —&gt; onResume()。</p>
</li>
<li><p>按 back 键：onPause() —&gt; onStop() —&gt; onDestroy()。</p>
</li>
</ul>
</li>
<li><p>注意（提示、问题）</p>
<ul>
<li><p>onCreate() 与 onDestroy() 是配对的，表示 Activity 的创建和销毁,并且只有可能一次调用。</p>
</li>
<li><p>onStart() 与 onStop() 是配对的，从是否可见这个角度来回调。</p>
</li>
<li><p>onResume() 与 onPause() 是配对的，从是否位于前台这个角度来回调。</p>
</li>
<li><p>如果新 Activity 采用了透明主题，那么当前 Activity 不会回到 onStop()（原因：处于可见状态，但是失去焦点，无法与用户进行交互）。</p>
</li>
<li><p>假设当前 Activity A，用户打开新的 Activity B，此时 A 的 onPause() 先调用，再调用 B 的 onResume()。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="Activity异常情况下生命周期"><a href="#Activity异常情况下生命周期" class="headerlink" title="Activity异常情况下生命周期"></a>Activity异常情况下生命周期</h3><ul>
<li><p>系统配置发生改变导致 Activity 被杀死并重新创建</p>
<ul>
<li><p>系统配置文件发生改变时，Activity 会被重新创建，生命周期方法调用顺序 onPause() —&gt; onSaveInstanceState() —&gt; onStop() —&gt; onDestroy() —&gt; onCreate() —&gt; onStart() —&gt; onRestoreInstanceState() —&gt; onResume()。</p>
</li>
<li><p>Activity 被异常终止情况下，onSaveInstanceState() 方法才会被调用，正常情况下是不会的；该方法调用时机是在 onStop() 之前，至于在 onPause() 之前或者之后并不确定。</p>
</li>
<li><p>Activity 被异常终止情况下，Activity 会被重建，此时 onRestoreInstanceState() 会被调用，调用时机在 onStart() 之后。</p>
</li>
<li><p>onCreate() 与 onRestoreInstanceState() 区别：onRestoreInstanceState() 一旦被调用，其参数  savedInstanceState 一定是有值的，不用判断是否为空；但 onCreate() 不一样，如果是正常启动时，其参数 savedInstanceState 为 null，所以需要额外判空。</p>
</li>
<li><p>可以通过设置<code>android:configChanges</code>属性让屏幕旋转时不重新创建。</p>
</li>
</ul>
</li>
<li><p>资源内存不足导致低优先级的 Activity 被杀死</p>
<ul>
<li><p>前台 Activity：正在和用户交互的 Activity，优先级最高。</p>
</li>
<li><p>可见但非前台 Activity：可见但是位于后台无法与用户进行交互，优先级次之。</p>
</li>
<li><p>后台 Activity：优先级最低。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="Activity四种启动模式"><a href="#Activity四种启动模式" class="headerlink" title="Activity四种启动模式"></a>Activity四种启动模式</h3><ul>
<li><p>启动模式</p>
<ul>
<li><p>standard：标准模式，这也是系统默认模式。每当启动一个 Activity 创建一个实例，谁启动谁就在谁任务栈。</p>
</li>
<li><p>singleTop：栈顶复用模式。如果新 Activity 已经位于任务栈栈顶，那么此 Activity 不会被创建，同时 onNewIntent() 方法被调用，随后 onResume() 方法也被调用；反之则会重新创建 Activity。</p>
</li>
<li><p>singleTask：栈内复用模式，这是一种实例模式。</p>
<p><img src="/images/explore/singTask.png" alt=""></p>
</li>
<li><p>singleInstance：单实例模式，singleTask 加强版。Activity 启动时，系统会单独为其创建任务栈，然后此 Activity 就在这个任务栈中，后续跟 singleTask 相同。</p>
</li>
</ul>
</li>
<li><p>Activity 的 Flags</p>
<ul>
<li><p>FLAG_ACTIVITY_NEW_TASK：为 Activity 指定 singleTask 启动模式。</p>
</li>
<li><p>FLAG_ACTIVITY_SINGLE_TOP：为 Activity 指定 singleTop 启动模式。</p>
</li>
<li><p>FLAG_ACTIVITY_CLEAR_TOP：与 singleTask 启动模式异同出现，作用相同。</p>
</li>
<li><p>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：具有该标记的 Activity 不会出现在历史 Activity 列表中。</p>
</li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><p>TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用才起作用，其它情况下没用。</p>
</li>
<li><p>TaskAffinity 与 singleTask 启动模式配对使用时，此时 Activity 运行 TaskAffinity 属性所指定的任务栈。</p>
</li>
<li><p>TaskAffinity 与 allowTaskReparenting 配对使用时，情况比较复杂，会产生特殊效果。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="IntentFilter-匹配规则"><a href="#IntentFilter-匹配规则" class="headerlink" title="IntentFilter 匹配规则"></a>IntentFilter 匹配规则</h3><ul>
<li><p>action 的匹配规则</p>
<ul>
<li><p>匹配规则：Intent 中的 action 必须能够和过滤规则中的任何一个action 匹配。</p>
</li>
<li><p>区分大小写。</p>
</li>
<li><p>注意与 category 匹配规则不一样。</p>
</li>
</ul>
</li>
<li><p>category 的匹配规则</p>
<ul>
<li><p>匹配规则：Intent 所包含的 category 必须与过滤规则中的任何一个 category 相同（可理解为一对一关系）。</p>
</li>
<li><p>特殊情况是 Intent 可以没有 category，但是系统默认会加上<code>android.intent.category.DEFAULT</code>，这也是隐式调用所要求的。</p>
</li>
</ul>
</li>
<li><p>data 匹配规则</p>
<ul>
<li><p>data 的结构</p>
<ul>
<li><p>android:scheme：URI 模式，比如 http、file、content 等。</p>
</li>
<li><p>android:port：URI 中的端口号，需要指定 scheme 和 host 才有作用。</p>
</li>
<li><p>android:host：URI 主机名。</p>
</li>
<li><p>android:path：完整的路径。</p>
</li>
<li><p>android:pathPattern：完整的路径信息，也可以包含通配符 *。</p>
</li>
<li><p>android:pathPrefix：路径的前缀信息。</p>
</li>
<li><p>android:mimeType：媒体类型。</p>
</li>
</ul>
</li>
<li><p>匹配规则：Intent 包含的 data 数据必须与过滤规则中某一个匹配（Intent 是过滤规则的子集），与 action 类似。</p>
</li>
<li><p>过滤规则有默认URI值：content 和 file。</p>
</li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><p>判断是否能匹配隐式 Intent 方法</p>
<ul>
<li><p>调用 PackageManager 的 resolveActivity 方法。</p>
</li>
<li><p>Intent 的 resolveActivity 方法。</p>
</li>
</ul>
</li>
<li><p>PackageManager 中 queryIntentActivies 方法。    </p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;Activity-正常情况下生命周期&quot;&gt;&lt;a href=&quot;#Activity-正常情况下生命周期&quot; class=&quot;headerlink&quot; title=&quot;Activity 正常情况下生命周期&quot;&gt;&lt;/a&gt;Activity 正常情况下生命周期&lt;/
    
    </summary>
    
      <category term="《Android 开发艺术探索》学习笔记" scheme="https://panzeyong.github.io/categories/%E3%80%8AAndroid-%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://panzeyong.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
