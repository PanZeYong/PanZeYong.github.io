<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PANJU&#39;s Note</title>
  <subtitle>故不积跬步，无以至千里；不积小流，无以成江海。</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://panzeyong.github.io/"/>
  <updated>2017-05-03T23:47:50.000Z</updated>
  <id>https://panzeyong.github.io/</id>
  
  <author>
    <name>PANJU</name>
    <email>04120513panzeyong@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二章 在 HTML 中使用 JavaScript</title>
    <link href="https://panzeyong.github.io/2017/05/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9C%A8-HTML-%E4%B8%AD%E4%BD%BF%E7%94%A8-JavaScript/"/>
    <id>https://panzeyong.github.io/2017/05/04/第二章-在-HTML-中使用-JavaScript/</id>
    <published>2017-05-03T23:40:59.000Z</published>
    <updated>2017-05-03T23:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><script\>：表示向 HTML 页面插入 JavaScript。该元素定义 6 个属性：</script\></p>
<ul>
<li><p>async：可选。表示应该立即下载脚本，但不应妨碍页面中的其它内容加载。只对<strong>外部脚本</strong>文件有效。标记为 async 的脚本并不能保证按照指定的的先后顺序执行，一定会在页面的 load 事件前执行，但是对于 DOMContentLoaded 事件就不一定了。建议异步脚本不要在加载期间修改 DOM。</p>
</li>
<li><p>charset：可选。表示通过 src 属性指定的代码的字符集。</p>
</li>
<li><p>defer：可选。表示所要加载的脚本可以延迟到文档完全被解析和显示之后再执行，即遇到 \ 标签之后才执行；只对<strong>外部脚本</strong>文件有效。HTML 5 规范要求延迟脚本是按照出现的顺序执行的，并且先于 DOMContentLoaded 事件，但是现实是不一定的，因此最好只包含一个延迟脚本。</p>
</li>
<li><p>language：已经废弃。</p>
</li>
<li><p>src：可选。表示包含要执行代码的外部文件。</p>
</li>
<li><p>type：可选。language 的替代属性。表示编写代码使用的脚本语言的内容类型（MIME 类型）。通常的默认值为 <code>text/javascript</code>。</p>
</li>
</ul>
<p>\<noscript\>：在不支持 JavaScript 的浏览器中显示替代的内容。</noscript\></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;noscript&gt;</div><div class="line">	&lt;p&gt;本页面需要浏览器支持（启用）JavaScript&lt;/p&gt;</div><div class="line">&lt;<span class="regexp">/noscript&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li><p>解释器对 \<script\> 元素内代码的解析是从上往下，在该元素内的代码被解析完之前，页面其它内容是不会被浏览器加载或者显示的。（外部文件也一样）</script\></p>
</li>
<li><p>通过 src 属性引入外部文件必须要包含开始的 \<script\> 和结束的 \&lt;\script>，只是 HTML 规范。</script\></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javasript"</span> src=<span class="string">"example.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>带有 src 属性的 \<script\> 元素不应该在其元素之间包含额外的 JavaScritp 代码，如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。</script\></p>
</li>
<li><p>JavaScript 代码建议放在 \<body\> 元素中页面内容之后</body\></p>
</li>
</ul>
<p>以上是在学习 《JavaScript 高级程序设计》（第 3 版）这本书第二章的学习笔记，主要把书中讲到的要点记录下来，方便自己查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h3&gt;&lt;p&gt;&lt;script\&gt;：表示向 HTML 页面插入 JavaScript。该元素定义 6 个属性：&lt;/script\&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li
    
    </summary>
    
      <category term="《JavaScript 高级程序设计》学习笔记" scheme="https://panzeyong.github.io/categories/%E3%80%8AJavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://panzeyong.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AsnycTask 用法及源码解析</title>
    <link href="https://panzeyong.github.io/2017/05/01/AsnycTask-%E7%94%A8%E6%B3%95%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://panzeyong.github.io/2017/05/01/AsnycTask-用法及源码解析/</id>
    <published>2017-05-01T09:49:39.000Z</published>
    <updated>2017-05-01T10:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>AsyncTask 是一种轻量级异步任务类，可以在线程池执行后台任务，获取到的结果传递给主线程并且在主线程中更新 UI。AsyncTask 比较适合执行短时间任务，对于长时间任务推荐使用 Executor，ThreadPoolExecutor 和 FutureTask。</p>
<p>AsyncTask 是一个抽象类，提供三个泛型参数，分别是 Params，Progress 和 Result；以及 4 个步骤：onPreExecute，doInBackground，onProgressUpdate 和 onPostExecute。</p>
<h4 id="AsyncTask-三个泛型参数"><a href="#AsyncTask-三个泛型参数" class="headerlink" title="AsyncTask 三个泛型参数"></a>AsyncTask 三个泛型参数</h4><ul>
<li><p>Params：发送给执行任务的参数类型。</p>
</li>
<li><p>Progress：执行后台任务进度的类型。</p>
</li>
<li><p>Result：执行完后台任务返回的结果类型。</p>
</li>
</ul>
<h4 id="AsyncTask-四个核心方法"><a href="#AsyncTask-四个核心方法" class="headerlink" title="AsyncTask 四个核心方法"></a>AsyncTask 四个核心方法</h4><ul>
<li><p><strong>onPreExecute(</strong>)：在任务执行之前调用，主线程执行；主要做一些初始化工作，比如在用户界面展示进度条。</p>
</li>
<li><p><strong>doInBackground(Params…)</strong>：onPreExecute() 执行完成后被调用，在线程池执行；所有的异步操作都在这个方法执行，执行结果被返回时，onPostExecute(Result) 会被调用。如果在该方法中调用 publishProgress(Progress…)，那么方法 onProgressUpdate(Progress…) 也会被调用，主要用于更新后台任务进度。</p>
</li>
<li><p><strong>onProgressUpdate(Progress…)</strong>：publishProgress(Progress…) 执行完之后被调用，在主线程执行；主要在用户界面显示后台任务执行进度。</p>
</li>
<li><p><strong>onPostExecute(Result)</strong>：doInBackground(Params…) 执行完之后调用，在主线程执行；参数 Result 是 doInBackground(Params…) 的返回值。</p>
</li>
</ul>
<p>一个异步任务可以通过调用 cancel(boolean) 随时取消，此时 isCancelled() 被调用，这就导致 doInBackground(Params…) 执行完后 onPostExecute(Result) 不会被调用。</p>
<p>在使用 AsyncTask 的过程中，要注意以下几点：</p>
<ul>
<li><p>AsyncTask 类必须在 UI 线程加载，Android 4.1 已经自动绑定了。</p>
</li>
<li><p>AsyncTask 实例必须在 UI 线程创建。</p>
</li>
<li><p>execute(Params…) 必须在 UI 线程调用。</p>
</li>
<li><p>不要手动调用 onPreExecute()、onPostExecute(Result)、doInBackground(Params…)、onProgressUpdate(Progress…)。</p>
</li>
<li><p>一个 AsyncTask 对象只能被执行一次；否则会抛异常。</p>
</li>
</ul>
<p>以上是 AsnycTask 基本知识点，掌握知识点后就要学会如何使用它。那么接下来就来学习 AsyncTask 用法。</p>
<h4 id="AsyncTask-用法"><a href="#AsyncTask-用法" class="headerlink" title="AsyncTask 用法"></a>AsyncTask 用法</h4><p>AsyncTask 是抽象类，不能直接实例化，必须创建新类并继承它，抽象方法 doInBackground(Params…) 是一定要重写的，其它三个方法根据自己的需求确定。以下通过 URL 获取数据为例子来讲解 AsyncTask 的用法。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskExample</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onPreExecute();</div><div class="line">		mLoad.setVisibility(View.VISIBLE);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> getUrlResponse(params[<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onPostExecute(s);</div><div class="line">     	mLoad.setVisibility(View.GONE);</div><div class="line">     	mText.setText(s);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中可以很清晰地看出，第 5 行是显示加载进度条，表示正在获取数据；第 10 行是核心代码，异步操作，网络请求数据并将结果返回；第 16 - 17 行代码主要操作是隐藏进度条，表示数据加载完毕，并将获取到的结果显示出来。这里主要给出核心代码，至于其它代码也就调用而已。</p>
<p>那么该如何调用呢？很简单，一行代码就搞定</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> AsyncTaskExample().execute(url);</div></pre></td></tr></table></figure>
<h4 id="AsyncTask-源码解析"><a href="#AsyncTask-源码解析" class="headerlink" title="AsyncTask 源码解析"></a>AsyncTask 源码解析</h4><p>知其然必知其所以然。对于新知识点，学会使用之后，就应该探究其原理。由于个人倾向于通过画图来理解知识点的流程，因此先简单地给出 AsyncTask 任务执行的流程图，再根据流程图和源码进行讲解。流程图如下：</p>
<p><img src="/images/asynctask/asynctask.png" alt=""></p>
<p>对于源码的理解，一般是以最终调用的方法为入口，一步一步地理解整个流程。那么对于 AsyncTask 该从哪里入手呢？当然是从方法 execute(Params… params) 入手了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于 AsyncTask 不同版本，execute(Params… params) 方法的执行方式是不一样的。Android 1.6 以前，AsyncTask 是单线程串行执行任务的；Android 1.6，AsyncTask 是线程池多线程并行执行任务；但是到 Android 3.0，AsyncTask 又改为单线程串行执行任务的。该方法的逻辑很简单，直接调用方法 executeOnExecutor(Executor exec, Params… params)，将我们传入的参数 params 和 sDefaultExecutor 传到该方法里，并将的返回值返回。那么来看下该方法的具体实现，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec, Params... params)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">		<span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">			<span class="keyword">case</span> RUNNING:</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> +  <span class="string">" the task is already running."</span>);</div><div class="line">			<span class="keyword">case</span> FINISHED:</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span> +  <span class="string">" the task has already been executed "</span> +  <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">		&#125;</div><div class="line">   	&#125;</div><div class="line">   	</div><div class="line">   	mStatus = Status.RUNNING;</div><div class="line">     onPreExecute();</div><div class="line">     mWorker.mParams = params;</div><div class="line">     exec.execute(mFuture);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>executeOnExecutor(Executor exec, Params… params) 方法是在线程池 THREAD_POOL_EXECUTOR 执行，允许多任务并发执行，但是不推荐采用多任务并发执行；在主线程执行。该方法实现的主要功能是：</p>
<ul>
<li><p>检查任务状态，并记录任务当前状态；</p>
</li>
<li><p>调用 onPreExecute() 方法，根据我们自己的需求可以重写该方法；</p>
</li>
<li><p>将我们传入的参数 params 赋值给 WorkRunnable 中字段 mParams(稍后解释)；</p>
</li>
<li><p>调用 SerialExecutor 中方法 execute(Runnable r) 执行任务。</p>
</li>
</ul>
<p>mWorker 是 WorkerRunnable<params, result=""> 实例，而 WorkerRunnable 是抽象类，实现 Callable 接口，并且该接口有一个回调方法 call()；同时抽象类有一个字段 Params []，第 13 行代码就是把我们传进来的参数 params 赋值给它的。mWorker 是在创建 AsyncTask 实例时被初始化的，即 AsyncTask 构造方法里，并重写回调方法 call()，那么接下来看回调方法 call() 的具体实现。</params,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line">		Result result = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">			<span class="comment">//noinspection unchecked</span></div><div class="line">            result = doInBackground(mParams);</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line">            mCancelled.set(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">throw</span> tr;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            postResult(result);</div><div class="line">        &#125;</div><div class="line">           	<span class="keyword">return</span> result;</div><div class="line">      	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>该回调方法实现的主要功能：</p>
<ul>
<li><p>将 mTaskInvoked 设置为 true，表示任务已经被调用过；</p>
</li>
<li><p>设置线程优先级为后台线程；</p>
</li>
<li><p>调用 doInBackground(mParams) 方法，异步执行，后台执行的逻辑都写在这个方法里面，一定要被重写；如果任务执行抛出异常时，取消任务；</p>
</li>
<li><p>调用 postResult(result) 方法；</p>
</li>
</ul>
<p>postResult(result) 的具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">	<span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">	message.sendToTarget();</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码里可以看出，将执行结果通过 sHandler 发送 MESSAGE_POST_RESULT 的消息，然后 handleMessage() 方法收到消息后进行相应的处理。sHandler 是 InternalHandler 实例，主要作用是将任务执行的环境从线程切换到主线程中，从 InternalHandler 的具体实现就可以看出了。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">		AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">		<span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">			<span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">				result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				</div><div class="line">			<span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">             	result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从构造函数 InternalHandler() 就可以看出了，获取主线程 Looper，而 Handler 必须与 Looper 进行绑定，因此可以断定是在主线程里。<code>handleMessage()</code> 函数对两种消息进行处理：MESSAGE_POST_RESULT 和 MESSAGE_POST_PROGRESS；而我们刚刚发送的消息是 MESSAGE_POST_RESULT，那就先来看该消息收到后会做什么处理吧？很显然，调用 finish(Result result)，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">		onCancelled(result);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		onPostExecute(result);</div><div class="line">	&#125;</div><div class="line">	mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果任务被取消了，直接调用 onCancelled(result) 方法，onPostExecute(result) 方法不会被调用；否则就调用 onPostExecute(result) 方法，该方法需要被重写，在主线程执行，根据返回的结果进行相应的处理；最后修改任务的状态。那么对于消息 MESSAGE_POST_PROGRESS 是从哪里发出来的呢？还记得在前面的知识点讲解中有提到过如果在 doInBackground(mParams) 方法中调用 publishProgress(Progress…) 方法时，方法 onProgressUpdate(Progress…) 也会被调用，用于后台任务进度更新。没错，消息 MESSAGE_POST_PROGRESS 就是用来处理进度更新的。先看下 publishProgress(Progress…) 具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">		getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">		<span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很显然，如果任务没有被取消的话，就会发送消息 MESSAGE_POST_PROGRESS，那么来看下收到该消息后的处理逻辑，即调用 onProgressUpdate(Progress… values) 方法，该方法需要我们根据自己的需求进行重写。</p>
<p>再回到 executeOnExecutor(Executor exec, Params… params) 方法，第 14 行代码开始执行任务，在理解如何执行任务之前，先来理解参数 mFuture 和 sDefaultExecutor 的含义。</p>
<p>mFuture 是 FutureTask<result> 实例，在 AsyncTask 构造方法中初始化。将 mWorker 作为参数传入 FutureTask 构造函数，个人认为传入该参数的作用是由于 FutureTask 中 run() 方法会被调用，而在该方法里会通过传入参数 mWorker 调用 call() 方法，进而使任务得到执行。FutureTask 是一个并发执行任务类，可以执行任务、取消任务、查询结果、获取结果；提交到线程池执行。实现的接口有 Future、Runnable。</result></p>
<p>对于传入的参数 sDefaultExecutor，究竟是什么啥玩意呢？让我们来探个究竟吧。sDefaultExecutor 是 SerialExecutor 的实例，而 SerialExecutor 实际上是一个串行的线程池，主要的功能是一个进程中所有的 AsyncTask 任务都在这个串行的线程池中排队执行。看到这里，是不是还不知道任务真正在哪里被开始执行？其实以上都只是铺垫，下面才真正拉开序幕。真正开始执行任务的逻辑是在 SerialExecutor 中 execute(Runnable r) 方法里，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">	Runnable mActive;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">		mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					r.run();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					scheduleNext();</div><div class="line">              	&#125;</div><div class="line">             &#125;</div><div class="line">         &#125;);</div><div class="line">            </div><div class="line">         <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">         	scheduleNext();</div><div class="line">         &#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">			THREAD_POOL_EXECUTOR.execute(mActive);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先将 AsyncTask 通过线程池 SerialExecutor 添加到队列里（从这里可以看出 SerialExecutor 的作用），然后重写 run() 方法，并判断 mActive 是否为 null，即当前是否有任务在执行，如果有任务执行的话就等待该任务执行完后再执行其他任务，否则就执行任务，即调用 scheduleNext() 方法，该方法的主要功能是从队列 mTasks 获取任务，任务不为空的话就直接提交到线程池 THREAD_POOL_EXECUTOR 里执行（任务真正开始执行），即启动任务，根据个人的理解，任务被启动后，会调用第 6 行代码，即 run() 方法，进而调用 FutureTask 中 run() 方法，从而会调用 WorkerRunnable 中 call() 方法，因此任务被执行，我们重写的方法也会被调用。结合以上流程图应该能更清晰地理解 AsyncTask 执行流程。</p>
<p>以上是自己在学习 《Android 开发艺术探索》 这本书第十一章关于 AsyncTask 这个主题的学习笔记，由于自己能力有限，有错误的地方欢迎指出。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="external">https://developer.android.com/reference/android/os/AsyncTask.html</a></p>
<p>《Android 开发艺术探索》》中 第 11 章 Android 的线程和线程池</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AsyncTask 是一种轻量级异步任务类，可以在线程池执行后台任务，获取到的结果传递给主线程并且在主线程中更新 UI。AsyncTask 比较适合执行短时间任务，对于长时间任务推荐使用 Executor，ThreadPoolExecutor 和 FutureTask。&lt;/
    
    </summary>
    
      <category term="《Android 开发艺术探索》" scheme="https://panzeyong.github.io/categories/%E3%80%8AAndroid-%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
    
      <category term="Android" scheme="https://panzeyong.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记：字符串</title>
    <link href="https://panzeyong.github.io/2017/04/17/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://panzeyong.github.io/2017/04/17/Python-学习笔记：字符串/</id>
    <published>2017-04-17T14:27:28.000Z</published>
    <updated>2017-04-21T23:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>定义：Python 的字符串是一种对象类型，这种类型用 <code>str</code> 表示，通常用双引号 <code>“”</code> 或者单引号 <code>‘’</code> 表示。</p>
<h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><p>Python 的字符串是可以拼接，用符号 <code>+</code> 表示；但是与 Java 语言有一点不同的是拼接的两个对象必须是同类型，否则会报错。例子如下：</p>
<p>两个相同类型 str 拼接（正确）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Hello "</span> + <span class="string">"Python"</span></div><div class="line"><span class="string">'Hello Python'</span></div></pre></td></tr></table></figure>
<p>两个相同类型 int 拼接（正确）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">3</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<p>两个不同类型 str 和 int 拼接（错误）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python "</span> + <span class="number">5</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: Can<span class="string">'t convert '</span>int<span class="string">' object to str implicitly</span></div></pre></td></tr></table></figure>
<p>很显然，对于类型都是 str 将多个对象拼接起来；对于类型都是 int 则执行相加操作；对于不同类型则报错。那么对于不同类型的操作该如何转换呢？解决办法如下：</p>
<ul>
<li><p>str() 函数</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python "</span> + str(<span class="number">3</span>)</div><div class="line"><span class="string">'Python 3'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>repr() 函数（反引号的替代品）</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python "</span> + repr(<span class="number">3</span>)</div><div class="line"><span class="string">'Python 3'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>str() 与 repr() 区别</p>
<ul>
<li><p>str() 将对象转化为可读性好的字符串，适合于 <code>print</code> 输出到终端，其返回值无法用于内建函数 <code>eval</code>。</p>
</li>
<li><p>repr() 返回对象的规范字符串表示形式；对于大多数对象而言，<code>eval（repr（obj））== obj</code>，也就是说，大多数情况下可以通过内建函数 <code>eval</code> 重新获取该对象。</p>
</li>
<li><p>大部分情况下 <code>str()</code> 用于终端输出，<code>eval()</code> 主要用于调试。</p>
</li>
</ul>
<h4 id="字符串格式化输出"><a href="#字符串格式化输出" class="headerlink" title="字符串格式化输出"></a>字符串格式化输出</h4><p>用于指定输出参数的格式与相对位置的字符串参数。通俗地讲，先定制模板，预留占位符，用对应类型的值填充；常用的占位符有 %s（字符串）、%d（整数）、%f（浮点数）。</p>
<p>以下通过例子说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"I love my %s"</span> % <span class="string">"job"</span> </div><div class="line"><span class="string">'I love my job'</span></div></pre></td></tr></table></figure>
<p>在这个字符串中，<code>%s</code> 是一个占位符，可以被其它字符串替换，这里替换的是 “job”。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"I'm %d years old"</span> % <span class="number">20</span></div><div class="line"><span class="string">"I'm 20 years old"</span></div></pre></td></tr></table></figure>
<p>不同占位符也可以混合使用，例子如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"What's your name ? My name is %s and I'm %d years old."</span> % (<span class="string">"John"</span>, <span class="number">15</span>)</div><div class="line"><span class="string">"What's your name ? My name is John and I'm 15 years old."</span></div></pre></td></tr></table></figure>
<h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><p><strong>index(…)</strong>：子字符串在整个字符串中的索引，即子字符串中第一个字符的位置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"The programming language Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.index(<span class="string">"Python"</span>)</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
<p><strong>isalnum(…)</strong>：字符串中所有字符都是字母数字时返回 True，否则 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"199993"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 包含空格，并非全是字母数字，所以返回 False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python 3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalnum()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isalpha(…)</strong>：字符串中所有字符都是字母时返回 True，否则 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalpha()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 包含数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalpha()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 包含空格（其它符号也一样，比如 "\"、"%"等）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isalpha()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isdecimal(…)</strong>：字符串中只有十进制字符时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Unicode 数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># byte数字（单字节）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">b"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'bytes'</span> object has no attribute <span class="string">'isdecimal'</span></div><div class="line"></div><div class="line"><span class="comment"># 全角数字（双字节)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 汉字数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"五"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 包含字母</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python1993"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 包含空格（其它符号也一样，比如 "\"、"%"等）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1993 1993"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdecimal()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isdigit(…)</strong>：字符串中所有字符都是数字 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Unicode 数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># byte数字（单字节）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">b"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 全角数字（双字节)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 汉字数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"五"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isdigit()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isnumeric(…)</strong>：字符串中只有数字字符时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Unicode 数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># byte数字（单字节）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">b"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'bytes'</span> object has no attribute <span class="string">'isnumeric'</span></div><div class="line"></div><div class="line"><span class="comment"># 全角数字（双字节)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string =<span class="string">"1"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 汉字数字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"五"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isnumeric()</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>提示：isdecimal()、isdigit()、isnumeric() 三个函数区别如上。</p>
<p><strong>islower(…)</strong>：字符串中所有字符都是小写时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.islower()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.islower()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>isupper(…)</strong>：字符串中所有字符都是大写时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"PYTHON"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isupper()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.isupper()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>join(…)</strong>：将序列中的元素以指定的字符连接成生成新的字符串。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"-"</span> <span class="comment"># 指定的字符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>seq = <span class="string">"Hello,Python"</span> <span class="comment"># 序列</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.join(seq)</div><div class="line"><span class="string">'H-e-l-l-o-,-P-y-t-h-o-n'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"-"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>seq = [<span class="string">'Python'</span>, <span class="string">'PHP'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.join(seq)</div><div class="line"><span class="string">'Python-PHP'</span></div></pre></td></tr></table></figure>
<p><strong>lower(…)</strong>：返回字符串的副本并将其转换为小写。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Welcome to Python World !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.lower()</div><div class="line"><span class="string">'welcome to python world !'</span></div></pre></td></tr></table></figure>
<p><strong>upper(…)</strong>：返回字符串的副本并将其转换为大写。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Welcome to Python World !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.upper()</div><div class="line"><span class="string">'WELCOME TO PYTHON WORLD !'</span></div></pre></td></tr></table></figure>
<p><strong>capitalize(…)</strong>：字符串中首字母大写，其它都是小写。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.capitalize()</div><div class="line"><span class="string">'Hello python'</span></div></pre></td></tr></table></figure>
<p><strong>istitle(…)</strong>：字符串中所有单词的首字母大写，其它小写时返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"hello Python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"hello python"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"HELLO PYTHON"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.istitle()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>split(…）</strong>：根据分隔符对字符串进行分割，返回列表。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.split()</div><div class="line">[<span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'Python'</span>, <span class="string">'!'</span>]</div></pre></td></tr></table></figure>
<p><strong>strip(…)</strong>：去掉字符串左右空格。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">" I love Python ! "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.strip()</div><div class="line"><span class="string">'I love Python !'</span></div></pre></td></tr></table></figure>
<p><strong>lstrip(…)</strong>：去掉字符串左边空格。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">" I love Python ! "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.lstrip()</div><div class="line"><span class="string">'I love Python ! '</span></div></pre></td></tr></table></figure>
<p><strong>rstrip(…)</strong>：去掉字符串右边空格。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">" I love Python ! "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.rstrip()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' I love Python !'</span></div></pre></td></tr></table></figure>
<p><strong>len(…)</strong>：返回序列（字符串）的长度。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(string)</div><div class="line"><span class="number">15</span></div></pre></td></tr></table></figure>
<p><strong>in</strong>：判断字符串是否包含某个字符或子字符串，包含的话返回 True；否则返回 False。（区分大小写）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"python"</span> <span class="keyword">in</span> string</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Python"</span> <span class="keyword">in</span> string</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p><strong>max</strong>：根据 ASCII 编码，求出字符串中最大值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(string)</div><div class="line"><span class="string">'y'</span></div></pre></td></tr></table></figure>
<p><strong>min</strong>：根据 ASCII 编码，求出字符串中最小值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(string)</div><div class="line"><span class="string">' '</span></div></pre></td></tr></table></figure>
<h4 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h4><p>与其它编程一样，在 Python 中的字符串也可以通过索引获取相应的字符，唯一的区别是获取的方式不一样。在 Python 中，字符串是一种序列，以一种数组的形式存在，可以通过下标获取。最直接的方式还是通过例子来说明吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">7</span>]</div><div class="line"><span class="string">'P'</span></div></pre></td></tr></table></figure>
<p>这种形式很类似 Java 语言中数组，但是 Java 语言中通过索引获取字符串中某个字符是通过调用 <code>charAt(index)</code> 方法获取到；获取子字符串是通过调用 <code>subString(start, end)</code> 方法，但是在 Python 获取子字符串称为<strong>切片</strong>，获取方式跟字符类似。例子如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 得到从字符串索引为 2 到 7 的子字符串。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">2</span>:<span class="number">8</span>]</div><div class="line"><span class="string">'love P'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">得到从字符串索引为 <span class="number">2</span> 到末尾的子字符串。</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">2</span>:]</div><div class="line"><span class="string">'love Python !'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取全部字符</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[:]</div><div class="line"><span class="string">'I love Python !'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取从第一个字符到 9 之前的字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"I love Python !"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string[:<span class="number">9</span>]</div><div class="line"><span class="string">'I love Py'</span></div></pre></td></tr></table></figure>
<p>从以上例子可以看出字符串切片的使用用法，以下做下简单的总结：</p>
<ul>
<li><p>[a : b]：表示从索引为 a 起到索引 b 之前字符串。</p>
</li>
<li><p>[:a]：从第一个字符到索引 a 之前的所有字符串。</p>
</li>
<li><p>[a : ]：表示从索引为 a 到末尾字符串。</p>
</li>
<li><p>[:]：表示原始字符串，但不是复制一份，只是两个变量指向同一个对象。</p>
</li>
</ul>
<p>以上只是最近在学 Python 中字符串的小结，也可以说是学习笔记，方便以后查找。（基于 Python3）</p>
<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="http://docs.pythontab.com/learnpython/106/" target="_blank" rel="external">http://docs.pythontab.com/learnpython/106/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义：Python 的字符串是一种对象类型，这种类型用 &lt;code&gt;str&lt;/code&gt; 表示，通常用双引号 &lt;code&gt;“”&lt;/code&gt; 或者单引号 &lt;code&gt;‘’&lt;/code&gt; 表示。&lt;/p&gt;
&lt;h4 id=&quot;拼接字符串&quot;&gt;&lt;a href=&quot;#拼接字符串&quot; clas
    
    </summary>
    
      <category term="Python" scheme="https://panzeyong.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://panzeyong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>第一章 Activity 的生命周期和启动模式</title>
    <link href="https://panzeyong.github.io/2017/03/26/%E7%AC%AC%E4%B8%80%E7%AB%A0-Activity-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://panzeyong.github.io/2017/03/26/第一章-Activity-的生命周期和启动模式/</id>
    <published>2017-03-26T08:41:15.000Z</published>
    <updated>2017-03-26T15:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p>
<h3 id="Activity-正常情况下生命周期"><a href="#Activity-正常情况下生命周期" class="headerlink" title="Activity 正常情况下生命周期"></a>Activity 正常情况下生命周期</h3><p><img src="/images/explore/activity_lifecycle.png" alt=""></p>
<ul>
<li><p>生命周期方法分析</p>
<ul>
<li><p>onCreate()：Activity 创建时调用，可以做一些初始化工作。</p>
</li>
<li><p>onRestart()：Activity 正在重新启动，由不可见状态变为可见状态。</p>
</li>
<li><p>onStart()：Activity 正在被启动，这时已经处于可见状态，但是还没出现在前台，而是在后台，无法与用户交互。</p>
</li>
<li><p>onResume()：Activity 已经处于可见状态，并且出现在前台。</p>
</li>
<li><p>onPause()：Activity 暂停，位于后台，可以做一些存储数据、停止动画等工作，但是不能太耗时。</p>
</li>
<li><p>onStop()：Activity 停止，不可见状态，可以做一些资源回收工作，但不能太耗时。</p>
</li>
<li><p>onDestroy()：Activity 销毁，可以做一些回收工作和资源释放。</p>
</li>
</ul>
</li>
<li><p>Activity 生命周期方法不同情况下调用</p>
<ul>
<li><p>Activity 第一次启动：onCreate() —&gt; onStart() —&gt; onResume()。</p>
</li>
<li><p>打开新的 Activity 或者切换到桌面：onPause() —&gt; onStop()。</p>
</li>
<li><p>回到原来 Activity：onRestart() —&gt; onStart() —&gt; onResume()。</p>
</li>
<li><p>按 back 键：onPause() —&gt; onStop() —&gt; onDestroy()。</p>
</li>
</ul>
</li>
<li><p>注意（提示、问题）</p>
<ul>
<li><p>onCreate() 与 onDestroy() 是配对的，表示 Activity 的创建和销毁,并且只有可能一次调用。</p>
</li>
<li><p>onStart() 与 onStop() 是配对的，从是否可见这个角度来回调。</p>
</li>
<li><p>onResume() 与 onPause() 是配对的，从是否位于前台这个角度来回调。</p>
</li>
<li><p>如果新 Activity 采用了透明主题，那么当前 Activity 不会回到 onStop()（原因：处于可见状态，但是失去焦点，无法与用户进行交互）。</p>
</li>
<li><p>假设当前 Activity A，用户打开新的 Activity B，此时 A 的 onPause() 先调用，再调用 B 的 onResume()。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="Activity异常情况下生命周期"><a href="#Activity异常情况下生命周期" class="headerlink" title="Activity异常情况下生命周期"></a>Activity异常情况下生命周期</h3><ul>
<li><p>系统配置发生改变导致 Activity 被杀死并重新创建</p>
<ul>
<li><p>系统配置文件发生改变时，Activity 会被重新创建，生命周期方法调用顺序 onPause() —&gt; onSaveInstanceState() —&gt; onStop() —&gt; onDestroy() —&gt; onCreate() —&gt; onStart() —&gt; onRestoreInstanceState() —&gt; onResume()。</p>
</li>
<li><p>Activity 被异常终止情况下，onSaveInstanceState() 方法才会被调用，正常情况下是不会的；该方法调用时机是在 onStop() 之前，至于在 onPause() 之前或者之后并不确定。</p>
</li>
<li><p>Activity 被异常终止情况下，Activity 会被重建，此时 onRestoreInstanceState() 会被调用，调用时机在 onStart() 之后。</p>
</li>
<li><p>onCreate() 与 onRestoreInstanceState() 区别：onRestoreInstanceState() 一旦被调用，其参数  savedInstanceState 一定是有值的，不用判断是否为空；但 onCreate() 不一样，如果是正常启动时，其参数 savedInstanceState 为 null，所以需要额外判空。</p>
</li>
<li><p>可以通过设置<code>android:configChanges</code>属性让屏幕旋转时不重新创建。</p>
</li>
</ul>
</li>
<li><p>资源内存不足导致低优先级的 Activity 被杀死</p>
<ul>
<li><p>前台 Activity：正在和用户交互的 Activity，优先级最高。</p>
</li>
<li><p>可见但非前台 Activity：可见但是位于后台无法与用户进行交互，优先级次之。</p>
</li>
<li><p>后台 Activity：优先级最低。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="Activity四种启动模式"><a href="#Activity四种启动模式" class="headerlink" title="Activity四种启动模式"></a>Activity四种启动模式</h3><ul>
<li><p>启动模式</p>
<ul>
<li><p>standard：标准模式，这也是系统默认模式。每当启动一个 Activity 创建一个实例，谁启动谁就在谁任务栈。</p>
</li>
<li><p>singleTop：栈顶复用模式。如果新 Activity 已经位于任务栈栈顶，那么此 Activity 不会被创建，同时 onNewIntent() 方法被调用，随后 onResume() 方法也被调用；反之则会重新创建 Activity。</p>
</li>
<li><p>singleTask：栈内复用模式，这是一种实例模式。</p>
<p><img src="/images/explore/singTask.png" alt=""></p>
</li>
<li><p>singleInstance：单实例模式，singleTask 加强版。Activity 启动时，系统会单独为其创建任务栈，然后此 Activity 就在这个任务栈中，后续跟 singleTask 相同。</p>
</li>
</ul>
</li>
<li><p>Activity 的 Flags</p>
<ul>
<li><p>FLAG_ACTIVITY_NEW_TASK：为 Activity 指定 singleTask 启动模式。</p>
</li>
<li><p>FLAG_ACTIVITY_SINGLE_TOP：为 Activity 指定 singleTop 启动模式。</p>
</li>
<li><p>FLAG_ACTIVITY_CLEAR_TOP：与 singleTask 启动模式异同出现，作用相同。</p>
</li>
<li><p>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：具有该标记的 Activity 不会出现在历史 Activity 列表中。</p>
</li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><p>TaskAffinity 属性主要和 singleTask 启动模式或者 allowTaskReparenting 属性配对使用才起作用，其它情况下没用。</p>
</li>
<li><p>TaskAffinity 与 singleTask 启动模式配对使用时，此时 Activity 运行 TaskAffinity 属性所指定的任务栈。</p>
</li>
<li><p>TaskAffinity 与 allowTaskReparenting 配对使用时，情况比较复杂，会产生特殊效果。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="IntentFilter-匹配规则"><a href="#IntentFilter-匹配规则" class="headerlink" title="IntentFilter 匹配规则"></a>IntentFilter 匹配规则</h3><ul>
<li><p>action 的匹配规则</p>
<ul>
<li><p>匹配规则：Intent 中的 action 必须能够和过滤规则中的任何一个action 匹配。</p>
</li>
<li><p>区分大小写。</p>
</li>
<li><p>注意与 category 匹配规则不一样。</p>
</li>
</ul>
</li>
<li><p>category 的匹配规则</p>
<ul>
<li><p>匹配规则：Intent 所包含的 category 必须与过滤规则中的任何一个 category 相同（可理解为一对一关系）。</p>
</li>
<li><p>特殊情况是 Intent 可以没有 category，但是系统默认会加上<code>android.intent.category.DEFAULT</code>，这也是隐式调用所要求的。</p>
</li>
</ul>
</li>
<li><p>data 匹配规则</p>
<ul>
<li><p>data 的结构</p>
<ul>
<li><p>android:scheme：URI 模式，比如 http、file、content 等。</p>
</li>
<li><p>android:port：URI 中的端口号，需要指定 scheme 和 host 才有作用。</p>
</li>
<li><p>android:host：URI 主机名。</p>
</li>
<li><p>android:path：完整的路径。</p>
</li>
<li><p>android:pathPattern：完整的路径信息，也可以包含通配符 *。</p>
</li>
<li><p>android:pathPrefix：路径的前缀信息。</p>
</li>
<li><p>android:mimeType：媒体类型。</p>
</li>
</ul>
</li>
<li><p>匹配规则：Intent 包含的 data 数据必须与过滤规则中某一个匹配（Intent 是过滤规则的子集），与 action 类似。</p>
</li>
<li><p>过滤规则有默认URI值：content 和 file。</p>
</li>
</ul>
</li>
<li><p>注意点</p>
<ul>
<li><p>判断是否能匹配隐式 Intent 方法</p>
<ul>
<li><p>调用 PackageManager 的 resolveActivity 方法。</p>
</li>
<li><p>Intent 的 resolveActivity 方法。</p>
</li>
</ul>
</li>
<li><p>PackageManager 中 queryIntentActivies 方法。    </p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;Activity-正常情况下生命周期&quot;&gt;&lt;a href=&quot;#Activity-正常情况下生命周期&quot; class=&quot;headerlink&quot; title=&quot;Activity 正常情况下生命周期&quot;&gt;&lt;/a&gt;Activity 正常情况下生命周期&lt;/
    
    </summary>
    
      <category term="《Android 开发艺术探索》学习笔记" scheme="https://panzeyong.github.io/categories/%E3%80%8AAndroid-%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android" scheme="https://panzeyong.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
